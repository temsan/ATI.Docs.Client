
Перем API;
Перем JSON;

#Область КлиентскаяЛогика

#КонецОбласти

#Область ОбработчикиСобытийФормыКлиент

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ТабДокументыПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = ЭлементыФормы.ТабДокументы.ТекущиеДанные;
	ТекКолонка = ЭлементыФормы.ТабДокументы.ТекущаяКолонка;
	
	Если ТекКолонка.Имя = "ID" И НЕ ПустаяСтрока(ТекДанные.ID) Тогда
		ЗапуститьПриложение("http://" + АдресСервера + "/document/" + ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабДокументыКонтрагентIDНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекДанные = ЭлементыФормы.Акты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		Результат1С = API.Search(ТекДанные.Контрагент.Наименование);
		МассивКонтрагентов = Результат1С;
		ЭлементыФормы.ТабДокументы.Колонки.КонтрагентID.ЭлементУправления.СписокВыбора.Очистить();
		Для Каждого НайденныйКонтрагент Из МассивКонтрагентов Цикл
			ЭлементыФормы.ТабДокументы.Колонки.КонтрагентID.ЭлементУправления.СписокВыбора.Добавить(НайденныйКонтрагент.id, НайденныйКонтрагент.id + "("+НайденныйКонтрагент.name+")");
		КонецЦикла;
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(ЭлементыФормы.ТабДокументы.Колонки.КонтрагентID.ЭлементУправления.СписокВыбора, ЭлементыФормы.Акты.Колонки.КонтрагентID.ЭлементУправления);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ТекДанные.КонтрагентID = Число(ВыбранныйЭлемент.Значение);
			Ответ = Вопрос("Сохранить данный ID для контрагента?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Сохранить_Код_АТИ_Контрагента(ТекДанные.Контрагент, ТекДанные.КонтрагентID);
				Отбор = Новый Структура;
				Отбор.Вставить("Контрагент", ТекДанные.Контрагент);
				ДокументыКонтрагента = ТабДокументы.НайтиСтроки(Отбор);
				Для Каждого СтрТаб Из ДокументыКонтрагента Цикл
					СтрТаб.КонтрагентID = ТекДанные.КонтрагентID;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Сообщить("Не выбран контрагент из справочника");
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Документ", ВыбранноеЗначение);
	НайденныеСтроки = ТабДокументы.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Стр <> ЭлементыФормы.ТабДокументы.ТекущаяСтрока Тогда
			СтандартнаяОбработка = Ложь;
			Сообщить("Данный документ уже выбран в строке "+(ТабДокументы.Индекс(Стр)+1));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ТабДокументыИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = ЭлементыФормы.ТабДокументы.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.ИмяФайла) Тогда
		ЗапуститьПриложение("explorer "+ТекДанные.ИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура ТабДокументыСертификатПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ТабДокументы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Сертификат) Тогда
		Возврат;
	КонецЕсли;
	ТекДокумент = ТекДанные.Документ;
	ТекОрганизация = ТекДокумент.Организация;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Документ,
	|	Таб.Сертификат
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	&ТабДокументы КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Документ Как Документ
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|ГДЕ
	|	ВТ_Документы.Сертификат = &ПустойСертификат
	|	И ВТ_Документы.Документ <> &ТекДокумент
	|	И ВТ_Документы.Документ.Организация = &ТекОрганизация";
	
	Запрос.УстановитьПараметр("ПустойСертификат", Справочники.СертификатыЭЦП.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТекДокумент", ТекДокумент);
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("ТабДокументы", ТабДокументы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Ответ = Вопрос("Заполнить сертификат по данной организации?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Стр = ТабДокументы.Найти(Выборка.Документ, "Документ");
				Стр.Сертификат = ТекДанные.Сертификат;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабДокКонтрагентПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ТабДокКонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Результат1С = API.Search(Текст);
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокКонтрагентов = Новый СписокЗначений;
	Для Индекс = 0 По Результат1С.Количество()-1 Цикл
		НайденныйКонтрагент = Результат1С[Индекс];
		СписокКонтрагентов.Добавить(Индекс, НайденныйКонтрагент.Получить("name")+" ("+НайденныйКонтрагент.Получить("id")+")");
	КонецЦикла;
	Если СписокКонтрагентов.Количество()=0 Тогда
		Сообщить("Контрагент по данному наименованию не найден");
		Возврат;
	ИначеЕсли СписокКонтрагентов.Количество()>1 Тогда	
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокКонтрагентов, Элемент);
	Иначе
		ВыбранныйЭлемент = СписокКонтрагентов.Получить(0);
	КонецЕсли;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		КонтрагентId = Результат1С[ВыбранныйЭлемент.Значение].Получить("id");
		Значение = Результат1С[ВыбранныйЭлемент.Значение].Получить("name")+" ("+КонтрагентId+")";
	КонецЕсли;

КонецПроцедуры







#КонецОбласти


Процедура КоманднаяПанельТабДокументыЗаполнить(Кнопка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Организация КАК Организация,
	|	СертификатыЭЦП.Ссылка КАК Сертификат
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СертификатыЭЦП.ДатаОкончания) КАК ДатаОкончания,
	|		СертификатыЭЦП.Организация КАК Организация
	|	ИЗ
	|		Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|	ГДЕ
	|		НЕ СертификатыЭЦП.ПометкаУдаления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СертификатыЭЦП.Организация) КАК ПоследниеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|		ПО ПоследниеСертификаты.Организация = СертификатыЭЦП.Организация
	|			И ПоследниеСертификаты.ДатаОкончания = СертификатыЭЦП.ДатаОкончания
	|			И (НЕ СертификатыЭЦП.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодзапросДокументы.Ссылка КАК Документ,
	|	ПодзапросДокументы.Контрагент КАК КонтрагентСсылка,
	|	ПодзапросДокументы.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ЗначенияСвойствКонтрагентов.Значение КАК КонтрагентID,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(200)) КАК ИмяФайла,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК Статус,
	|	ЛОЖЬ КАК ФлагОтправлять,
	|	ЛОЖЬ КАК ЗапроситьРешение,
	|	ЕСТЬNULL(ВТ_Сертификаты.Сертификат, ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)) КАК Сертификат,
	|	ЗначенияСвойствДокументов.Значение КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетНаОплатуПокупателю.Контрагент КАК Контрагент,
	|		СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|		СчетНаОплатуПокупателю.Организация КАК Организация
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|	ГДЕ
	|		СчетНаОплатуПокупателю.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И (СчетНаОплатуПокупателю.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И (СчетНаОплатуПокупателю.Контрагент = &Контрагент
	|				ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		И &ФлажокСчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Контрагент,
	|		РеализацияТоваровУслуг.Ссылка,
	|		РеализацияТоваровУслуг.Организация
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.Проведен
	|		И (РеализацияТоваровУслуг.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И (РеализацияТоваровУслуг.Контрагент = &Контрагент
	|				ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		И &ФлажокАкты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетФактураВыданный.Контрагент,
	|		СчетФактураВыданный.Ссылка,
	|		СчетФактураВыданный.Организация
	|	ИЗ
	|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	ГДЕ
	|		СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И СчетФактураВыданный.Проведен
	|		И (СчетФактураВыданный.Организация = &Организация
	|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И (СчетФактураВыданный.Контрагент = &Контрагент
	|				ИЛИ &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		И &ФлажокСчетаФактуры) КАК ПодзапросДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствКонтрагентов
	|		ПО ПодзапросДокументы.Контрагент = ЗначенияСвойствКонтрагентов.Объект
	|			И (ЗначенияСвойствКонтрагентов.Свойство = &Код_АТИ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ПодзапросДокументы.Организация = ВТ_Сертификаты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствДокументов
	|		ПО ПодзапросДокументы.Ссылка = ЗначенияСвойствДокументов.Объект
	|			И (ЗначенияСвойствДокументов.Свойство = &Код_АТИ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодзапросДокументы.Контрагент.Наименование";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДатаНач", НачПериода);
	Запрос.УстановитьПараметр("ДатаКон", ?(КонПериода = '00010101', '39991231', КонецДня(КонПериода)));
	Запрос.УстановитьПараметр("Код_АТИ", ПолучитьСоздатьСвойство(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты, "Код_АТИ", Тип("Число")));
	
	Запрос.УстановитьПараметр("ФлажокСчета", ФлажокСчета);
	Запрос.УстановитьПараметр("ФлажокАкты", ФлажокАкты);
	Запрос.УстановитьПараметр("ФлажокСчетаФактуры", ФлажокСчетаФактуры);
	
	//Запрос.УстановитьПараметр("Сертификаты", СертификатыОрганизаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	//ТабДокументы = РезультатЗапроса.Выгрузить();
	ТабДокументы.Очистить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрДокументы = ТабДокументы.Добавить();
			Если Не ЗначениеЗаполнено(Выборка.КонтрагентID) Тогда
				СтрДокументы.Контрагент = Выборка.КонтрагентНаименование + "(Код в АТИ не заполнен)";
			Иначе
				СтрДокументы.Контрагент = Выборка.КонтрагентНаименование + "("+Выборка.КонтрагентID+")";
			КонецЕсли;
			СтрДокументы.Документ = Выборка.Документ;
			СтрДокументы.Сертификат = Выборка.Сертификат;
			СтрДокументы.КонтрагентID = Выборка.КонтрагентID;
			
			Если НЕ ЗначениеЗаполнено(СтрДокументы.Сертификат) Тогда
				СтрДокументы.Сертификат = ТекущийСертификат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСтатусы();
	
КонецПроцедуры

Процедура ЗаполнитьСтатусы()
	
	Для Каждого СтрТаб Из ТабДокументы Цикл
		СтрТаб.ID = СформироватьIDДокумента(СтрТаб.Документ);
		Результат1С = API.Document(СтрТаб.ID, Ложь);
		Если Результат1С = Неопределено Тогда
			СтрТаб.Статус = "Новый/измененный";
			СтрТаб.ФлагОтправлять = Истина;
		Иначе
			СтрТаб.ИмяФайла = Результат1С["file"]["name"];
			СтрТаб.Статус = Результат1С["status"];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельАктыНайтиКонтрагента(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура КоманднаяПанельТабДокументыСформироватьЭД(Кнопка)
	Для Каждого СтрТаб Из ТабДокументы Цикл
		
		Если XML=0 Тогда
			Если ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				Если ФормироватьЭД Тогда
					СтрТаб.ИмяФайла = ВыгрузитьАкт(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
				Иначе
					СтрТаб.ИмяФайла = ВыгрузитьАкт(СтрТаб.Документ);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
				Если ФормироватьЭД Тогда
					СтрТаб.ИмяФайла = ВыгрузитьСчет(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
				Иначе
					СтрТаб.ИмяФайла = ВыгрузитьСчет(СтрТаб.Документ);
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
				Если ФормироватьЭД Тогда
					СтрТаб.ИмяФайла = ВыгрузитьСчетФактуру(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
				Иначе
					СтрТаб.ИмяФайла = ВыгрузитьСчетФактуру(СтрТаб.Документ);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрТаб.ИмяФайла = ПечатьДокумента(СтрТаб.Документ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура КоманднаяПанельТабДокументыКнопкаОтправитьЧерезАгент(Кнопка)
	Если ВРЕГ(Прав(КаталогАгента, 7))= "\OUTBOX" Тогда
		КаталогДокумента = КаталогАгента;
	Иначе
		КаталогДокумента = КаталогАгента+"\Outbox";
	КонецЕсли;
	Каталог = Новый Файл(КаталогДокумента);
	Если НЕ (Каталог.Существует() И Каталог.ЭтоКаталог()) Тогда
		СоздатьКаталог(КаталогДокумента);
	КонецЕсли;
	
	ФлагОтправка = Ложь;
	Для	Каждого СтрТаб Из ТабДокументы Цикл
		
		Если НЕ СтрТаб.ФлагОтправлять Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрТаб.ИмяФайла) Тогда
			Если XML=0 Тогда
				Если ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					Если ФормироватьЭД Тогда
						СтрТаб.ИмяФайла = ВыгрузитьАкт(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
					Иначе
						СтрТаб.ИмяФайла = ВыгрузитьАкт(СтрТаб.Документ);
					КонецЕсли;
				ИначеЕсли ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
					Если ФормироватьЭД Тогда
						СтрТаб.ИмяФайла = ВыгрузитьСчет(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
					Иначе
						СтрТаб.ИмяФайла = ВыгрузитьСчет(СтрТаб.Документ);
					КонецЕсли;
				ИначеЕсли ТипЗнч(СтрТаб.Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
					Если ФормироватьЭД Тогда
						СтрТаб.ИмяФайла = ВыгрузитьСчетФактуру(СтрТаб.Документ, СтрТаб.ЭлектронныйДокумент);
					Иначе
						СтрТаб.ИмяФайла = ВыгрузитьСчетФактуру(СтрТаб.Документ);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрТаб.ИмяФайла = ПечатьДокумента(СтрТаб.Документ);
			КонецЕсли;
		КонецЕсли;	

		Если ЗначениеЗаполнено(СтрТаб.ИмяФайла) Тогда
			ФлагОтправка = Истина;
			
			Doc_ID = СформироватьIDДокумента(СтрТаб.Документ);
			
	    	СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("doc_id", Doc_ID);
			
			ТипДокумента = ПолучитьТипДокумента(СтрТаб.Документ);
			СтруктураПараметров.Вставить("DocType", ТипДокумента);
			
			СтруктураПараметров.Вставить("doc_recipient_id", Формат(СтрТаб.КонтрагентId, "ЧГ=0"));
			СтруктураПараметров.Вставить("doc_recipient_contact", Формат(СтрТаб.КонтрагентId, "ЧДЦ=1; ЧГ=0"));
			СтруктураПараметров.Вставить("send", Истина);
			СтруктураПараметров.Вставить("date", Формат(СтрТаб.Документ.Дата, "ДФ=yyyy-MM-dd"));
			СтруктураПараметров.Вставить("number", СокрЛП(СтрТаб.Документ.Номер));
			СтруктураПараметров.Вставить("contract_date", Формат(СтрТаб.Документ.ДоговорКонтрагента.Дата, "ДФ=yyyy-MM-dd"));
			СтруктураПараметров.Вставить("contract_number", СокрЛП(СтрТаб.Документ.ДоговорКонтрагента.Номер));
			//СтруктураПараметров.Вставить("signer_certificate_name", СтрТаб.Сертификат.Наименование); //?
			СтруктураПараметров.Вставить("signer_inn", СтрТаб.Документ.Организация.ИНН);
	
			МассивФайлов = Новый Массив;
			
			Если XML = 0 Тогда
				Расширение = ".xml";
			Иначе
				Расширение = ".pdf";
			КонецЕсли;
				
			uid = Строка(Новый УникальныйИдентификатор);
			ПереместитьФайл(СтрТаб.ИмяФайла, КаталогДокумента+"\"+Doc_ID+Расширение);
			СтруктураФайла = Новый Структура;
			СтруктураФайла.Вставить("id", uid);
			СтруктураФайла.Вставить("filename", Doc_ID+Расширение);
			МассивФайлов.Добавить(СтруктураФайла);
			
			СтруктураПараметров.Вставить("files", МассивФайлов);
	 		API.СформироватьКонфигурационныйФайл(СтруктураПараметров, КаталогДокумента+"\"+Doc_ID+".adacom");
			
			СтрТаб.Статус = "Отправлен";
			
		КонецЕсли;
	КонецЦикла;
	Если ФлагОтправка Тогда
		Сообщить("Документы успешно отправлены");
	Иначе
		Сообщить("Нет данных для отправки");
	КонецЕсли;
КонецПроцедуры


Процедура КоманднаяПанельТабДокументыОтправить(Кнопка)
	
	Для Каждого СтрДок Из ТабДокументы Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если СтрДок.ФлагОтправлять И ЗначениеЗаполнено(СтрДок.Сертификат) Тогда
			
			СтрДок.id = СохранитьДокумент(СтрДок);
			
			Если API.SendDocument(СтрДок.id, СтрДок.КонтрагентId) Тогда
				
				Если API.Sign(СтрДок.id, СтрДок.Сертификат) Тогда
					//Закрыть(Истина);
				Иначе
					Сообщить("Документ отправлен, но не подписан");
					//ОбновитьДанныеДокумента();
					//УправлениеВидимостьюДоступностьюЭлементовФормы();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохранитьДокумент(СтрДок)
	
	ФлагНовый = НЕ ЗначениеЗаполнено(СтрДок.id);
	
	Если ЗначениеЗаполнено(СтрДок.Документ) Тогда
		СтрДок.id = СформироватьIDДокумента(СтрДок.Документ);
	КонецЕсли;
		
	СтруктураДокумента = СформироватьСтруктуруДокумента(СтрДок);
	
	СтруктураОтвета = API.PostDocument(СтруктураДокумента);
	
	Если СтруктураОтвета = Неопределено Тогда
		Возврат "";
	Иначе
		ДанныеИзменены = Истина;
		Если ЗначениеЗаполнено(СтрДок.Документ) Тогда
			Сохранить_Код_АТИ_Документа(СтрДок.Документ, СтрДок.id);
		КонецЕсли;
	КонецЕсли;
	
	id = СтруктураОтвета;
	
	Если ЗначениеЗаполнено(СтрДок.Документ) Тогда
		
		ФайлДляВыгрузки = СформироватьДокумент1С(СтрДок.Документ, XML=1);
		
		Файл = Новый Файл(ФайлДляВыгрузки);
		СтрДок.ИмяФайла = Файл.Имя;
		
		Если НЕ ЗначениеЗаполнено(ФайлДляВыгрузки) Тогда
			Возврат "";
		КонецЕсли;
			
		СтруктураОтвета = API.PostAttachment(id, ФайлДляВыгрузки);
		
		УдалитьФайлы(ФайлДляВыгрузки);
		
		Если НЕ СтруктураОтвета = Неопределено Тогда
			Сообщить("Файл "+ФайлДляВыгрузки+" успешно отправлен на сервер");
		КонецЕсли;
	КонецЕсли;
	
 	Возврат ID;
	
КонецФункции

Функция СформироватьСтруктуруДокумента(СтрДок)
	Если ТипЗнч(СтрДок.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТипДокумента = "Акт";
	ИначеЕсли ТипЗнч(СтрДок.Документ) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТипДокумента = "Счет";
	ИначеЕсли ТипЗнч(СтрДок.Документ) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		ТипДокумента = "Счет-фактура";
	Иначе
		//Тип документа не поддерживается
		Возврат "";
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура
	(
	"id,
	|doc_recipient_id,
	|doc_recipient_contact,
	|doctype,
	|doc_request,
	|is_formal,
	|date,
	|number,
	|description"
	,
	СтрДок.id,
	Формат(СтрДок.КонтрагентId, "ЧГ=0"),
	//Формат(СтрДок.КонтактId, "ЧН=0; ЧГ=0"),
	Формат(СтрДок.КонтрагентId, "ЧГ=0")+".0",
	ТипДокумента,
	СтрДок.ЗапроситьРешение,
	Ложь,
	Формат(СтрДок.Документ.Дата, "ДФ=yyyy-MM-dd"),
	СтрДок.Документ.Номер,
	Строка(СтрДок.Документ));

	Если ЗначениеЗаполнено(СтрДок.Документ) Тогда
		СтруктураДокумента.Вставить("contract_number", СтрДок.Документ.ДоговорКонтрагента.Номер);
		СтруктураДокумента.Вставить("contract_date", Формат(СтрДок.Документ.ДоговорКонтрагента.Дата, "ДФ=yyyy-MM-dd"));
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

//служебная функция для автотеста
Процедура ВыполнитьКоманду(ТекстКоманды) Экспорт
	Выполнить(ТекстКоманды);
КонецПроцедуры






API = ВладелецФормы.API;
JSON = ПолучитьФорму("JSON");

ТекущийСертификат = ПолучитьАктивныйСертификат()