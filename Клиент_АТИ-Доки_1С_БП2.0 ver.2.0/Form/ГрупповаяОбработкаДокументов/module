Перем API;
Перем ТипыДокументов;

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельДокументыНайти(Кнопка)
	
	СтруктураПапок = API.MailBox();
	СписокДокументов.Очистить();
	
	Фильтр = Новый Массив;
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		Фильтр.Добавить("""ati_id"":"""+Формат(КонтрагентID, "ЧГ=0")+"""");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипДокумента) Тогда
		Фильтр.Добавить("""doctype"":"""+ЗаменитьКириллицу(ТипДокумента)+"""");
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатусУтверждения) Тогда
		Фильтр.Добавить("""is_approved"":"+?(СтатусУтверждения = "Утвержденные", "true", "false"));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатусПодписи) Тогда
		Фильтр.Добавить("""is_signed"":"+?(СтатусУтверждения = "Подписанные", "true", "false"));
	КонецЕсли;
	
	МассивПапок = Новый Массив;
	
	Если ЗначениеЗаполнено(Папка) Тогда
		МассивПапок.Добавить(Папка);
	Иначе
		МассивПапок.Добавить("documents");
		МассивПапок.Добавить("archive");
		МассивПапок.Добавить("deleted");
	КонецЕсли;
	
	Для Каждого Папка Из МассивПапок Цикл
		КоличествоДокументов = СтруктураПапок[Папка][0];
		Н = 1;
		Пока Н<=КоличествоДокументов Цикл
			ДокументН = API.Documents(Папка, Н-1, 1, Фильтр);
			Если ДокументН <> Неопределено И ДокументН.Количество()=1 Тогда
				date = ДокументН[0].Получить("date");
				Если ЗначениеЗаполнено(date) Тогда
					Если ЗначениеЗаполнено(НачПериода) И date<НачПериода Тогда
						Н = Н+1;
						Продолжить;
					КонецЕсли;
					Если ЗначениеЗаполнено(КонПериода) И date>КонПериода Тогда
						Н = Н+1;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				СтрДок = СписокДокументов.Добавить();
				СтрДок.ID = ДокументН[0].Получить("id");
				Contragent = ДокументН[0].Получить("contragent");
				Если ЗначениеЗаполнено(Contragent) Тогда
					account = contragent.Получить("account");
					Если ЗначениеЗаполнено(account) Тогда
						СтрДок.Контрагент = account.Получить("name");
					КонецЕсли;
				КонецЕсли;
				СтрДок.ФлагОбработать = Истина;
				СтрДок.Документ = ""+ДокументН[0].Получить("doctype")+" № "+ДокументН[0].Получить("number")+" от "+Формат(ДокументН[0].Получить("date"), "ДФ=dd.MM.yyyy");
			КонецЕсли;
			Н = Н+1;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СписокДокументов.Очистить();
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		КонтрагентID = 0;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Результат1С = API.Search(Текст, 50);
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокКонтрагентов = Новый СписокЗначений;
	Для Индекс = 0 По Результат1С.Количество()-1 Цикл
		НайденныйКонтрагент = Результат1С[Индекс];
		СписокКонтрагентов.Добавить(Индекс, НайденныйКонтрагент.Получить("name")+" ("+НайденныйКонтрагент.Получить("id")+")");
	КонецЦикла;
	Если СписокКонтрагентов.Количество()=0 Тогда
		Сообщить("Контрагент по данному наименованию не найден");
		Возврат;
	ИначеЕсли СписокКонтрагентов.Количество()>1 Тогда	
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокКонтрагентов, Элемент);
	Иначе
		ВыбранныйЭлемент = СписокКонтрагентов.Получить(0);
	КонецЕсли;
	Если ВыбранныйЭлемент <> Неопределено Тогда
		КонтрагентID = Результат1С[ВыбранныйЭлемент.Значение].Получить("id");
		Значение = Результат1С[ВыбранныйЭлемент.Значение].Получить("name") + "("+КонтрагентID+")";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Для Каждого Стр Из ТипыДокументов Цикл
		ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить(Стр.Наименование, Стр.Наименование);
	КонецЦикла;
	ЭлементыФормы.ТипДокумента.СписокВыбора.СортироватьПоПредставлению();
	ЭлементыФормы.ТипДокумента.СписокВыбора.Вставить(0, "", "Все");
	ТипДокумента = "";
	
	ЭлементыФормы.Папка.СписокВыбора.Очистить();
	Для Каждого ТекПапка Из ВладелецФормы.ДеревоПапок.Строки Цикл
		ЭлементыФормы.Папка.СписокВыбора.Добавить(ТекПапка.name, ТекПапка.Наименование);
		Для Каждого ВложеннаяПапка Из ТекПапка.Строки Цикл
			ЭлементыФормы.Папка.СписокВыбора.Добавить(ВложеннаяПапка.name, ВложеннаяПапка.Наименование);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	Для Каждого СтрДок Из СписокДокументов Цикл
		Если СтрДок.ФлагОбработать Тогда
			Если Действие = "ОтправитьВАрхив" Тогда
				Попытка
					API.Archive(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" отправлен в архив");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось отправить в архив");
				КонецПопытки;
			ИначеЕсли Действие = "ВернутьИзАрхива" Тогда
				Попытка
					API.Unarchive(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" возвращен из архив");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось вернуть из архива");
				КонецПопытки;
			ИначеЕсли Действие = "ОтправитьВКорзину" Тогда
				Попытка
					API.Delete(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" отправлен в корзину");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось отправить в корзину");
				КонецПопытки;
			ИначеЕсли Действие = "ВернутьИзКорзины" Тогда
				Попытка
					API.Undelete(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" возвращен из корзины");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось вернуть из корзины");
				КонецПопытки;
			ИначеЕсли Действие = "Утвердить" Тогда
				Попытка
					API.Approve(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" утвержден");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось утвердить");
				КонецПопытки;
			ИначеЕсли Действие = "Отклонить" Тогда
				Попытка
					API.Decline(СтрДок.ID);
					Сообщить("Документ "+СтрДок.ID+" отклонен");
				Исключение
					Сообщить("Документ "+СтрДок.ID+" не удалось отклонить");
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЗаменитьКириллицу(ИсходнаяСтрока)
	
	Результат = "";
	Для н = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		Токен = Сред(ИсходнаяСтрока, Н, 1);
		
		КодСимвола = КодСимвола(Токен);
		Если КодСимвола>127 Тогда
			Результат = Результат + "\u04" + ЧислоВШестнадцатеричномПредставлении(КодСимвола, 1);
		Иначе
			Результат = Результат + Токен;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 32)
	Результат = "";
	СтрокаТокенов = "0123456789abcdef";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаТокенов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

//служебная функция для автотеста
Процедура ВыполнитьКоманду(ТекстКоманды) Экспорт
	Выполнить(ТекстКоманды);
КонецПроцедуры

API = ВладелецФормы.API;
ТипыДокументов = ВладелецФормы.ТипыДокументов;