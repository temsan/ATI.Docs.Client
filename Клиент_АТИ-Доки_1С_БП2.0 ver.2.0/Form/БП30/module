/////////////////////////////////////////////////////////////////////////////////
//Замена штатного функционала по выгрузке счетов
Функция УдалитьСформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ЭлектронныеДокументыВнутренний.ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	СтруктураПараметров = СчетНаОплатуСтруктураПараметров();
	ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);

	Если ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки) Тогда
		
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ПолноеИмяФайла",
			АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД));
		
		Если УдалитьСформироватьСчетНаОплатуCML(СтруктураПараметров) И ПризнакЭД Тогда
			СтруктураЭД.Вставить("СуммаДокумента", СтруктураПараметров.Сумма);
			СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);
			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ТекстСообщения);

	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СформироватьСчетНаОплатуПоДокументу(СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	ТекстОшибки = "";
	
	СтруктураЭД = Новый Структура;
	СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	СтруктураЭД.Вставить("ВерсияСхемы", ЭлектронныеДокументыПовтИсп.ВерсияСхемыCML402());
	СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
	СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);
	СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);
	СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));
	СтруктураЭД.Вставить("НомерЭД", ЭлектронныеДокументыВнутренний.ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));
	СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());
	СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);
	СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));
	СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);
	СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);
	СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);
	СтруктураЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.ПрофильНастроекЭДО);
	СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);
	
	ДеревоДокумента = ОбщегоНазначенияЭД.ДеревоДокумента("СчетНаОплату");
	
	//ЭлектронныеДокументыПереопределяемый.ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента);
	
	ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента);

	ТекстОшибки = "";
	//ПроверитьЗаполнениеОбязательныхРеквизитовРекурсивно(ДеревоДокумента, ТекстОшибки);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ДобавитьСлужебныеПоляCML(ДеревоДокумента, СтруктураЭД);
		
			
		АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());
		ПолноеИмяФайла = АдресКаталога + ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект, СтруктураЭД.ДатаЭД);
		
		ВставитьЗначениеВДерево(ДеревоДокумента, "ПолноеИмяФайла", ПолноеИмяФайла);
		ВставитьЗначениеВДерево(ДеревоДокумента, "ХозОперация", "Счет на оплату");
		ВставитьЗначениеВДерево(ДеревоДокумента, "Номер", СтруктураЭД.НомерДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "Дата", СтруктураЭД.ДатаДокументаОтправителя);
		ВставитьЗначениеВДерево(ДеревоДокумента, "Ид", СтруктураЭД.НомерЭД);

		
		Если СформироватьСчетНаОплатуCML(ДеревоДокумента) И ПризнакЭД Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктураЭД",    СтруктураЭД);
			СтруктураПараметров.Вставить("ВидЭД",          СтруктураЭД.ВидЭД);
			СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
			СтруктураПараметров.Вставить("Наименование",   АдресКаталога);
			ВозвращаемоеЗначение = СтруктураПараметров;

			ВозвращаемоеЗначение = СтруктураПараметров;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ТекстСообщения);
	
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает данные для электронного документа типа Счет формата CML 2.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//  Дерево документа - дерево значений - дерево значений, соответствующее макету СчетНаОплату обработки ЭлектронныеДокументы.
//
Процедура ЗаполнитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, ДеревоДокумента)
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений();	
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("ШтрихКод");
	ТаблицаТоваров.Колонки.Добавить("ИдТовараУКонтрагента");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("НДСУчтеноВСумме");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ДанныеСтроки Из ТаблицаДокумента Цикл
		
		СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
		
		СтрокаТаблицыТоваров.Артикул 					= ДанныеСтроки.НоменклатураАртикул;
		СтрокаТаблицыТоваров.Наименование				= ДанныеСтроки.НоменклатураНаименование;
		СтрокаТаблицыТоваров.Описание 					= ДанныеСтроки.Содержание;
		СтрокаТаблицыТоваров.Номенклатура 				= ДанныеСтроки.Номенклатура;
		СтрокаТаблицыТоваров.Упаковка 					= ДанныеСтроки.ЕдиницаИзмерения;
		СтрокаТаблицыТоваров.БазоваяЕдиницаКод 			= СокрЛП(ДанныеСтроки.ЕдиницаИзмеренияКод);
		СтрокаТаблицыТоваров.БазоваяЕдиницаНаименование = ДанныеСтроки.ЕдиницаИзмеренияНаименование;
		СтрокаТаблицыТоваров.Цена 				= ДанныеСтроки.Цена;
		СтрокаТаблицыТоваров.Количество 		= ДанныеСтроки.Количество;
		СтрокаТаблицыТоваров.Сумма 				= ДанныеСтроки.Сумма;
		СтрокаТаблицыТоваров.НДСУчтеноВСумме 	= РеквизитыШапки.СуммаВключаетНДС;
		Если ДанныеСтроки.СуммаНДС = 0 Тогда
			// Обход ошибки
			СтрокаТаблицыТоваров.СуммаНДС = "0";
		Иначе
			СтрокаТаблицыТоваров.СуммаНДС = ДанныеСтроки.СуммаНДС;
		КонецЕсли;
		СтрокаТаблицыТоваров.СтавкаНДС = ДанныеСтроки.СтавкаНДС;
			
	КонецЦикла;
	
	//ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СведенияОПоставщике = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Поставщик, РеквизитыШапки.ДатаДляПолученияСведений);
	СведенияОПокупателе = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(РеквизитыШапки.Покупатель, РеквизитыШапки.ДатаДляПолученияСведений);
	
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПоставщике, "Продавец");
	ЗаполнитьДанныеУчастника(ДеревоДокумента, СведенияОПокупателе, "Покупатель");
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Валюта", РеквизитыШапки.ВалютаКод);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Курс",   РеквизитыШапки.КурсВзаиморасчетов);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "Сумма",  ТаблицаТоваров.Итог("Сумма"));
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "НазначениеПлатежа", "");   
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "СрокПлатежа", '00010101'); 
	
	ОбщегоНазначенияЭД.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТаблицаТоваров, "Товары");
	
	// Расчетный счет
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.НомерСчета", РеквизитыШапки.НомерСчета);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.Наименование", РеквизитыШапки.БанкНаименование);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.БИК", РеквизитыШапки.БИК);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.Банк.СчетКорреспондентский", РеквизитыШапки.КоррСчет);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.Наименование", РеквизитыБанка.Наименование);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.БИК", РеквизитыБанка.Код);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский", РеквизитыБанка.КоррСчет);
	
	КонецЕсли;
	
	// Итоги по документу
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.Сумма", ТаблицаТоваров.Итог("Сумма"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаСкидки", 0);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаБезСкидки",  ТаблицаТоваров.Итог("Сумма"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.СуммаНДС",        ТаблицаТоваров.Итог("СуммаНДС"));
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогоПоДокументу.ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	
	// Отвественные лица
	ЗаполнитьДанныеФизическогоЛица(ДеревоДокумента, "Продавец.Руководитель", РеквизитыШапки.РуководительСтруктураФИО, РеквизитыШапки.РуководительДолжностьНаименование);
	
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("Сумма");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначения.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДокумента, "ИтогиПрописью", ИтоговаяСтрока);
	
КонецПроцедуры

Процедура ДобавитьСлужебныеПоляCML(ДеревоДанных, СтруктураЭД)
	
	ВставитьЗначениеВДерево(ДеревоДанных, "ДатаФормирования", СтруктураЭД.ДатаЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВерсияСхемы", СтруктураЭД.ВерсияСхемы);
	ВставитьЗначениеВДерево(ДеревоДанных, "Ид", СтруктураЭД.НомерЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "ВидЭД", СтруктураЭД.ВидЭД);
	ВставитьЗначениеВДерево(ДеревоДанных, "НаправлениеЭД", СтруктураЭД.НаправлениеЭД);
	
	ВставитьЗначениеВДерево(ДеревоДанных, "Исполнитель", СтруктураЭД.Отправитель);
	
КонецПроцедуры

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита)
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ОбщегоНазначенияЭД.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

// Определяет имя файла электронного документа.
//
// Параметры:
//  ВидЭД - Вид электронного документа, перечисление.
//
Функция ОпределитьИмяФайлаЭД(ВидЭД, СсылкаНаОбъект, Знач ВерсияЭД = Неопределено)
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
		ИЛИ ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		
		ШаблонПредставленияЭД = НСтр("ru = '%1 %2 %3%4.xml'");
		
		// Получим версию ЭД и ее строковое предствление.
		ВерсияЭД = ?(ВерсияЭД = Неопределено, ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект), ВерсияЭД);
		Если ТипЗнч(ВерсияЭД) = Тип("Дата") Тогда
			ВерсияЭД = Формат(ВерсияЭД, "ДЛФ=DT; ДП=-");
		КонецЕсли;
		
		ПредставлениеВерсии = "";
		Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
			И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
			И ВидЭД <> Перечисления.ВидыЭД.ПлатежноеПоручение И ВидЭД <> Перечисления.ВидыЭД.Квитанция
			И ВидЭД <> Перечисления.ВидыЭД.ЗапросВыписки И ЗначениеЗаполнено(ВерсияЭД) Тогда
			
			ШаблонПредставлениеВерсии = НСтр("ru = ' (ver. %1)'");
			ПредставлениеВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставлениеВерсии, ВерсияЭД);
		КонецЕсли;
		
		Если ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Организация, СсылкаНаОбъект.Контрагент, ПредставлениеВерсии);
		Иначе
			СтрокаИмениФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставленияЭД,
				ВидЭД, СсылкаНаОбъект.Номер, Формат(СсылкаНаОбъект.Дата, "ДФ=dd.MM.yyyy; ДЛФ=D"), ПредставлениеВерсии);
		КонецЕсли;


		СтрокаИмениФайла = ЭлектронныеДокументыСлужебный.СтрокаЛатиницей(СтрокаИмениФайла);
	Иначе
		СтрокаИмениФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	КонецЕсли;
	СтрокаИмениФайла = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(СтрокаИмениФайла, Истина);
	
	Возврат СтрокаИмениФайла;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция СформироватьСчетНаОплатуCML(ДеревоДанных)
	
	ТекстОшибки = "";
	ПространствоИменСхемы = ЭлектронныеДокументыПовтИсп.ПространствоИменCML();
	
	Попытка
		КоммерческаяИнформация = ПолучитьОбъектТипаCML("КоммерческаяИнформация", ПространствоИменСхемы);
		
		ВерсияСхемы = СокрЛП(СтрЗаменить(ЗначениеРеквизитаВДереве(ДеревоДанных, "ВерсияСхемы"), "CML", ""));
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ВерсияСхемы", ВерсияСхемы, Истина, ТекстОшибки);
		
		ДатаФормирования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаФормирования");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(КоммерческаяИнформация, "ДатаФормирования", ДатаФормирования, Истина, ТекстОшибки);
		
		ДокументЭО = ПолучитьОбъектТипаCML("Документ", ПространствоИменСхемы);
		
		ХозОперация = ЗначениеРеквизитаВДереве(ДеревоДанных, "ХозОперация");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ХозОперация", ХозОперация, Истина, ТекстОшибки);
		
		Ид = ЗначениеРеквизитаВДереве(ДеревоДанных, "Ид");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", Ид, Истина, ТекстОшибки);
		
		НомерДок = ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", НомерДок, Истина, ТекстОшибки);
		
		ДатаДок = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", ДатаДок, Истина, ТекстОшибки);
		
		СрокПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "СрокПлатежа");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "СрокПлатежа", СрокПлатежа, Истина, ТекстОшибки);
		
		Валюта = ЗначениеРеквизитаВДереве(ДеревоДанных, "Валюта");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, Истина, ТекстОшибки);
		
		Курс = ЗначениеРеквизитаВДереве(ДеревоДанных, "Курс");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Курс", Курс, Истина, ТекстОшибки);
		
		СуммаДок = ЗначениеРеквизитаВДереве(ДеревоДанных, "Сумма");
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Сумма", СуммаДок, Истина, ТекстОшибки);
		
		
		НалогоОбложениеНДС = ЗначениеРеквизитаВДереве(ДеревоДанных, "НалогообложениеНДС");
		Если ЗначениеЗаполнено(НалогоОбложениеНДС) Тогда
			ДобавитьВЗначенияРеквизитовДокумента("НалогообложениеНДС", НалогоОбложениеНДС, ДокументЭО, ПространствоИменСхемы)
		КонецЕсли;
		
		НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "НазначениеПлатежа");
		// Назначение платежа поместим в ЗначенияРеквизитов документа
		Если ЗначениеЗаполнено(НазначениеПлатежа) Тогда
			ДобавитьВЗначенияРеквизитовДокумента("НазначениеПлатежа", НазначениеПлатежа, ДокументЭО, ПространствоИменСхемы)
		КонецЕсли;
		
		// заполняем расчетный счет
		РасчетныйСчетКонтрагента = Неопределено;
		
		НомерСчета = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.НомерСчета");
		
		СтруктураСчет = Новый Структура("НомерСчета, БИК, СчетКорреспондентский, НаименованиеБанка, БикКорр,
										|СчетКорр, НаименованиеКорр");
		
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			
			// заполняем расчетный счет
			СтруктураСчет.НомерСчета = НомерСчета;
			
			// заполняем банк
			
			БикБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.БИК", Ложь);
			Если ЗначениеЗаполнено(БикБанка) Тогда
				СтруктураСчет.БИК = БикБанка;
			КонецЕсли;
			
			СчетКорреспондентский = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.СчетКорреспондентский", Ложь);
			Если ЗначениеЗаполнено(СчетКорреспондентский) Тогда	
				СтруктураСчет.СчетКорреспондентский = СчетКорреспондентский;
			КонецЕсли;

			НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.Банк.Наименование", Ложь);
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
				СтруктураСчет.НаименованиеБанка = НаименованиеБанка;
			КонецЕсли;
				
			// заполняем банк корреспондент
				
			БикКорБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.БИК");
			
			Если ЗначениеЗаполнено(БикКорБанка) Тогда
				СтруктураСчет.БикКорр = БикКорБанка;
			КонецЕсли;
			
			КорСчетКорреспондентский = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.СчетКорреспондентский");
			Если ЗначениеЗаполнено(КорСчетКорреспондентский) Тогда
				СтруктураСчет.СчетКорр = КорСчетКорреспондентский;
			КонецЕсли;
			
			НаименованиеКорБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РасчетныйСчет.БанкКорреспондент.Наименование");
			Если ЗначениеЗаполнено(НаименованиеКорБанка) Тогда
				СтруктураСчет.НаименованиеКорр =  НаименованиеКорБанка;
			КонецЕсли;
			
		КонецЕсли;
		
		ПоместитьСтруктуруВЗначениеРеквизита("РасчетныйСчет", СтруктураСчет, ДокументЭО, ПространствоИменСхемы);
		
		// заполняем контрагентов
		М_Контрагенты = ПолучитьОбъектТипаCML("Документ.Контрагенты", ПространствоИменСхемы);
		
		// Добавим в контрагенты Продавца
		Поставщик = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Поставщик, ДеревоДанных, "Продавец", ПространствоИменСхемы, ТекстОшибки);
		
		М_Контрагенты.Контрагент.Добавить(Поставщик);
		
		// добавим в контрагенты Покупателя
		Покупатель = ПолучитьОбъектТипаCML("Документ.Контрагенты.Контрагент", ПространствоИменСхемы);
		ЗаполнитьДанныеУчастникаCML(Покупатель, ДеревоДанных, "Покупатель", ПространствоИменСхемы, ТекстОшибки);
				
		М_Контрагенты.Контрагент.Добавить(Покупатель);
		
		ДокументЭО.Контрагенты = М_Контрагенты;
		ДокументЭО.Роль = "Продавец";
		
		СуммаИтог = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.Сумма");
		ДобавитьВЗначенияРеквизитовДокумента("СуммаИтог", СуммаИтог, ДокументЭО, ПространствоИменСхемы);
		
		СуммаСкидки = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаСкидки");
		ДобавитьВЗначенияРеквизитовДокумента("СуммаСкидки", СуммаСкидки, ДокументЭО, ПространствоИменСхемы);
		
		СуммаБезСкидки = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаБезСкидки");
		ДобавитьВЗначенияРеквизитовДокумента("СуммаБезСкидки", СуммаБезСкидки, ДокументЭО, ПространствоИменСхемы);
		
		
		НДСИтог = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.СуммаНДС");
		НДСВходитВСтоимость = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогоПоДокументу.ЦенаВключаетНДС");
		
		Налог = ПолучитьОбъектТипаCML("Документ.Налоги.Налог", ПространствоИменСхемы);
		Налог.Наименование = "НДС";
		Налог.УчтеноВСумме = НДСВходитВСтоимость;
		Налог.Сумма = НДСИтог;
		
		ДокументЭОНалоги = ПолучитьОбъектТипаCML("Документ.Налоги", ПространствоИменСхемы);
		ДокументЭОНалоги.Налог.Добавить(Налог);
		
		ДокументЭО.Налоги = ДокументЭОНалоги;
		
		ИтогиПрописью = ЗначениеРеквизитаВДереве(ДеревоДанных, "ИтогиПрописью");
		ДобавитьВЗначенияРеквизитовДокумента("ИтогиПрописью", ИтогиПрописью, ДокументЭО, ПространствоИменСхемы);
		
		НомерДокументаОснования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НомерДокументаОснования");
		ДатаДокументаОснования = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.ДатаДокументаОснования");
		Если ЗначениеЗаполнено(НомерДокументаОснования) И ЗначениеЗаполнено(ДатаДокументаОснования) Тогда
			
			ДобавитьВЗначенияРеквизитовДокумента("НомерДокументаОснования", НомерДокументаОснования, ДокументЭО, ПространствоИменСхемы);
			ДобавитьВЗначенияРеквизитовДокумента("ДатаДокументаОснования", ДатаДокументаОснования, ДокументЭО, ПространствоИменСхемы);
			
			НаименованиеДокументаОснование = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.НаименованиеДокументаОснования");
			КомментарийДокументаОснование = ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументОснования.Комментарий");
			
			ДобавитьВЗначенияРеквизитовДокумента("НаименованиеДокументаОснование", НаименованиеДокументаОснование, ДокументЭО, ПространствоИменСхемы);
			ДобавитьВЗначенияРеквизитовДокумента("КомментарийДокументаОснование", КомментарийДокументаОснование, ДокументЭО, ПространствоИменСхемы);
			
		КонецЕсли;
		
		ЧастичнаяОплата = ЗначениеРеквизитаВДереве(ДеревоДанных, "ЧастичнаяОплата");
		Если Не ЗначениеЗаполнено(ЧастичнаяОплата) Тогда
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		Если Не ЧастичнаяОплата Тогда
			Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
			
			СтрокаТаблицаТоваров = ДеревоДанных.Строки.Найти("Товары", "ПолныйПуть");
			
			Если СтрокаТаблицаТоваров.Строки.Количество() > 0 Тогда
				Товары = ПолучитьОбъектТипаCML("Документ.Товары", ПространствоИменСхемы);
				Для Каждого ТекущийТовар Из СтрокаТаблицаТоваров.Строки Цикл
					Товар = ПолучитьОбъектТипаCML("Документ.Товары.Товар", ПространствоИменСхемы);
					// заполняем ИД товара, базовую единицу, шрихкод
					// т.е. те свойства которые относятся непосредственно к каталога товаров
					СформироватьДанныеПоТоваруCML_206(Товар, ТекущийТовар, ПространствоИменСхемы, ТекстОшибки);
									
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, Истина, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаГрафикОплаты = ВеткаТаблицыВДереве(ДеревоДанных, "ГрафикОплаты");
		Если Не СтрокаГрафикОплаты = Неопределено Тогда
			Если СтрокаГрафикОплаты.Строки.Количество() > 0 Тогда
				
				ПоместитьТаблицуВЗначениеРеквизита("ГрафикОплаты", СтрокаГрафикОплаты, ДокументЭО, ПространствоИменСхемы);
			КонецЕсли;
		КонецЕсли;
		
		// Добавим заготовку Подписанта для заполнения при подписи
		Подписанты = ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
		Подписант = ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", "-", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", "-", Истина, ТекстОшибки);
		Подписанты.Подписант.Добавить(Подписант);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписанты", Подписанты, Ложь, ТекстОшибки);
		
		КоммерческаяИнформация.Документ.Добавить(ДокументЭО);
		КоммерческаяИнформация.Проверить();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(КоммерческаяИнформация, ЗначениеРеквизитаВДереве(ДеревоДанных, "ПолноеИмяФайла"));
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

// Возвращает результат успеха формирования файла ЭД Счет на оплату.
//
// Параметры
//  СтруктураПараметров – структура параметров для формирования,
//
// Возвращаемое значение:
//  Булево - признак успеха формирования
//
Функция УдалитьСформироватьСчетНаОплатуCML(СтруктураПараметров)
	
	ТекстОшибки = "";
	
	Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);
		
		// Коммерческая информация
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);
		
		РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", СтруктураПараметров.РасчетныйСчет.КоррСчет, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "Наименование", СтруктураПараметров.РасчетныйСчет.Банк, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "БИК", СтруктураПараметров.РасчетныйСчет.БИК, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);
		
		// БанкКорреспондент
		Если СтруктураПараметров.Свойство("БанкКорреспондент") Тогда
			БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураПараметров.БанкКорреспондент.КоррСчет, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураПараметров.БанкКорреспондент.Банк, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураПараметров.БанкКорреспондент.БИК, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "БанкКорреспондент", БанкКорреспондент, Истина, ТекстОшибки);
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, Истина, ТекстОшибки);
		
		Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);
		
		Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);
		СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);
		
		ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);
		
		Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Руководитель,
							  "ПолноеНаименование", 
							  ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СтруктураПараметров.Руководитель),
							  Истина,
							  ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);
		
		Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Бухгалтер, "ПолноеНаименование",
			ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СтруктураПараметров.Бухгалтер), Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);
		
		Если СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
			И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента) Тогда
			
			ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", СтруктураПараметров.ДокументОснование, Истина, ТекстОшибки);
			ДокументЭО.ДокументОснования.Добавить(ДокументОснования);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта) Тогда
			Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);
			КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ЧастичнаяОплата") Тогда
			ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		
		Если СтруктураПараметров.Свойство("ТаблицаТоваров") Тогда
			ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;
		КонецЕсли;
		
		Если НЕ ЧастичнаяОплата Тогда
			Если ТаблицаТоваров.Количество() > 0 Тогда
				
				Товары = ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);
				Для Каждого ТекТовар Из ТаблицаТоваров Цикл
					
					Товар = ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоТоваруCML(Товар, ТекТовар, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);
					
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Количество", ТекТовар.Количество, Истина, ТекстОшибки);
					
					ЕдиницаИзмерения = ПолучитьОбъектТипаCML("ЕдиницаИзмерения", СтруктураПараметров.ВерсияСхемы);
					
					СтруктураЕдИзм = Новый Структура();
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияКод", ТекТовар.УпаковкаКод);
					СтруктураЕдИзм.Вставить("ЕдиницаИзмеренияНаименование", ТекТовар.УпаковкаНаименование);
					СтруктураЕдИзм.Вставить("Коэффициент", ТекТовар.Коэффициент);
					СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураЕдИзм, ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ЕдиницаИзмерения", ЕдиницаИзмерения, Истина, ТекстОшибки);
					
					Если СтруктураПараметров.ЦенаВключаетНДС Тогда
						СуммаБезНДС = ТекТовар.Сумма - ТекТовар.СуммаНДС;
					Иначе
						СуммаБезНДС = ТекТовар.Сумма;
					КонецЕсли;
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Цена", ТекТовар.Цена, , ТекстОшибки);
					
					Стоимость = ПолучитьОбъектТипаCML("Стоимость", СтруктураПараметров.ВерсияСхемы);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Стоимость, "СуммаБезНалога", СуммаБезНДС, , ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Стоимость, "СуммаНалога", ТекТовар.СуммаНДС, , ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Стоимость, "СуммаОбщая", ТекТовар.СуммаСНДС, Истина, ТекстОшибки);
					
					// Заполняем налог в любом случае: и при СтавкеНДС = "БезНДС", и при СтавкеНДС = "0%".
					НалогПоСтроке = ПолучитьОбъектТипаCML("Налог", СтруктураПараметров.ВерсияСхемы);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога", "НДС", Истина, ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", ТекТовар.СуммаНДС, , ТекстОшибки, Истина);
					
					СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(ТекТовар.СтавкаНДС);
					Если СтавкаНДСЧислом <> Неопределено Тогда
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки, Истина);
					КонецЕсли;
					Стоимость.Налог.Добавить(НалогПоСтроке);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "СуммыПоТовару", Стоимость, Истина, ТекстОшибки);
					
					Если НЕ ТаблицаТоваров.Колонки.Найти("СуммаСкидки") = Неопределено И ЗначениеЗаполнено(ТекТовар.СуммаСкидки) Тогда
						СкидкиПоСтроке =  ПолучитьОбъектТипаCML("СчетНаОплату.Товары.Товар.Скидки", СтруктураПараметров.ВерсияСхемы);
						СкидкаПоСтроке =  ПолучитьОбъектТипаCML("Скидка", СтруктураПараметров.ВерсияСхемы);
						
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Наименование", "ОбщаяСкидка", Истина, ТекстОшибки);
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СкидкаПоСтроке, "Сумма", ТекТовар.СуммаСкидки, Истина, ТекстОшибки);
						
						СкидкиПоСтроке.Скидка.Добавить(СкидкаПоСтроке);
						
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаСкидок", ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СкидкиПоСтроке, "СуммаБезСкидок", ТекТовар.Сумма - ТекТовар.СуммаСкидки, , ТекстОшибки);
						ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Скидки", СкидкиПоСтроке, , ТекстОшибки);
					КонецЕсли;
					
					Товары.Товар.Добавить(Товар);
				КонецЦикла;
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты") ТОгда
			ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;
			Если ТаблицаЭтаповГрафикаОплаты.Количество() > 0 Тогда
				
				МассивКолонок = Новый Массив();
				Для каждого Колонка из ТаблицаЭтаповГрафикаОплаты.Колонки Цикл
					МассивКолонок.Добавить(Колонка.Имя);
				КонецЦикла;
				
				Для Каждого ТекЭтап Из ТаблицаЭтаповГрафикаОплаты Цикл
					ЭтапГрафикаОплаты = ПолучитьОбъектТипаCML("ГрафикОплаты", СтруктураПараметров.ВерсияСхемы);
					СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, ТекЭтап, ТекстОшибки, МассивКолонок);
					ДокументЭО.ЭтапОплаты.Добавить(ЭтапГрафикаОплаты);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДокументЭО.Проверить();
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ФайлСформирован = Ложь;
		Иначе
			ЭлектронныеДокументыВнутренний.ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);
			ФайлСформирован = Истина;
		КонецЕсли;
		
	Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
		
		ФайлСформирован = Ложь;
	КонецПопытки;
	
	Возврат ФайлСформирован;
	
КонецФункции

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника)
	
	Если СведенияОбУчастнике.ТипЮрФизЛица = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СведенияОбУчастнике.ПолноеНаименование);
		КонецЕсли;
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		Фамилия = ""; Имя = ""; Отчество = "";
		ЭлектронныеДокументы.ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ВидАдреса = ?(ВидУчастника = "Продавец" ИЛИ ВидУчастника = "Поставщик" ИЛИ ВидУчастника = "Плательщик", "Юр", "Факт");
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.ЮрФизЛицоСсылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		Банк = "";
		БИК = "";
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк.Наименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество);
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеФизическогоЛица(ДеревоДанных, ТипЛица, СтруктураФИО, НаименованиеДолжности = "")
	
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Фамилия", СтруктураФИО.Фамилия);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Имя", СтруктураФИО.Имя);
	ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Отчество", СтруктураФИО.Отчество);
	Если ЗначениеЗаполнено(НаименованиеДолжности) Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Должность", НаименованиеДолжности);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОбъектТипаCML(Тип, ВерсияСхемы = "4.01")
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);
	Иначе
		ТипОбъекта = Тип;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	
	Возврат НовыйОбъект;
	
КонецФункции

Функция ПолучитьТипОбъектаCML(Тип, ВерсияСхемы)
	
	МассивПути = СтрРазделить(Тип, ".");
	
	ПервыйЭлемент = МассивПути[0];
	Если Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}" Тогда
		ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);
		Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;
	ИначеЕсли ВерсияСхемы <> "4.02" Тогда
		ТипОбъекта = ФабрикаXDTO.Тип(ВерсияСхемы, ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	Иначе
		ТипОбъекта = ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd", ПервыйЭлемент);
		Коллекция = ТипОбъекта.Свойства;
	КонецЕсли;
	
	МассивПути.Удалить(0);
	Пока МассивПути.Количество() > 0 Цикл
		
		Если Коллекция = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойство = Коллекция.Получить(МассивПути[0]);
		Если Свойство = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъекта = Свойство.Тип;
		МассивПути.Удалить(0);
		Попытка
			Коллекция = ТипОбъекта.Свойства;
		Исключение
			Коллекция = Неопределено;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина)
	
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	ИначеЕсли СообщатьОбОшибке Тогда
		ТекстСообщения = Нстр("ru = 'Не найдено поле в дереве данных по полному пути <%1>'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПолныйПуть);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьВЗначенияРеквизитовДокумента(НаименованиеРеквизита, ДобавляемоеЗначение, ДокументXDTO, ПространствоИменСхемы)
	
	ЗначенияРеквизитаДокумента = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
	ЗначенияРеквизитаДокумента.Наименование = НаименованиеРеквизита;
	Если ТипЗнч(ДобавляемоеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ДобавляемоеЗначение Цикл
			ЗначенияРеквизитаДокумента.Значение.Добавить(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли Найти(НаименованиеРеквизита, "СтавкаНДС") > 0 Тогда
		ЗначенияРеквизитаДокумента.Значение.Добавить(ЭлектронныеДокументыПовтИсп.СтавкаНДСИзСоответствия(, ДобавляемоеЗначение));
	Иначе
		ЗначенияРеквизитаДокумента.Значение.Добавить(ДобавляемоеЗначение)
	КонецЕсли;
	
	Если ДокументXDTO.ЗначенияРеквизитов = Неопределено Тогда
		
		ДокументXDTOЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.ЗначенияРеквизитов", ПространствоИменСхемы);
		ДокументXDTOЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
		
		ДокументXDTO.ЗначенияРеквизитов = ДокументXDTOЗначенияРеквизитов;
	Иначе
		
		ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначенияРеквизитаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьСтруктуруВЗначениеРеквизита(ИмяРеквизита, СтруктураЗначений, ДокументПродажи, ПространствоИменСхемы)
	
	// в массив будем помещать строковое значение вида "Ключ&Значение#"
	ЗначениеРеквизита = "";
	Для Каждого КлючЗначение Из СтруктураЗначений Цикл
		
		ЗначениеРеквизита = ЗначениеРеквизита + КлючЗначение.Ключ + "&" + КлючЗначение.Значение + "#";
		
	КонецЦикла;
	
	ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизита, ЗначениеРеквизита, ДокументПродажи, ПространствоИменСхемы);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаCML(Контрагент, СтрокаДереваДанных, ВидКонтрагента, ПространствоИменСхемы, ТекстОшибки)
	
	Если Контрагент.Свойства().Получить("Роль") <> Неопределено Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Роль", ВидКонтрагента, Истина, ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника")) Тогда
		
		Если ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника") = "ФЛ" Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "ПолноеНаименование",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ПолноеНаименование"),
				Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "ИНН",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.ИНН"), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Фамилия",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Фамилия"), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Имя",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Имя"), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Отчество", 
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ФЛ.Отчество"), , ТекстОшибки);
		Иначе
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "ОфициальноеНаименование",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.НаименованиеОрганизации"),
				Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "ИНН",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.ИНН"), Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "КПП",
				ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".ТипУчастника.ЮЛ.КПП"), , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Адрес")) Тогда
		Адрес = СтрокаДереваДанных.Строки.Найти(ВидКонтрагента + ".Адрес", "ПолныйПуть", Истина);
		Если ЗначениеЗаполнено(Адрес.Значение) Тогда
			АдресТип = ПолучитьОбъектТипаCML("Адрес", ПространствоИменСхемы);
			// Если адрес структуриванный заполняем Адресное поле
			// если нет - только представление.
			Если Адрес.Значение = "Структурированный" Тогда
				Представление = "";
				Для Каждого СтрокаСАдресом Из Адрес.Строки[0].Строки Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСАдресом.Значение) Тогда
						Продолжить;
					КонецЕсли;
					
					АдресноеПоле = ПолучитьОбъектТипаCML("Адрес.АдресноеПоле", ПространствоИменСхемы);
					НормТип = СтрокаСАдресом.Уровень4;
					Если НормТип = "Индекс" Тогда
						НормТип = "Почтовый индекс";
					ИначеЕсли НормТип = "КодРегион" Тогда
						НормТип = "Регион";
					ИначеЕсли НормТип = "НаселПункт" Тогда
						НормТип = "Населенный пункт";
					ИначеЕсли НормТип = "Кварт" Тогда
						НормТип = "Квартира";
					КонецЕсли;
					АдресноеПоле.Тип = НормТип;
					АдресноеПоле.Значение = СтрокаСАдресом.Значение;
					АдресТип.АдресноеПоле.Добавить(АдресноеПоле);
					
					Представление = Представление + ?(Представление = "","",", ") + СтрокаСАдресом.Значение;
					
				КонецЦикла;
				
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресТип, "Представление", Представление, Истина, ТекстОшибки);
			Иначе
				СтрокаАдреса = Адрес.Строки.Найти(Адрес.Значение, "Уровень3");
				Если Адрес.Значение = "Иностранный" Тогда
					СтрокаАдреса = СтрокаАдреса.Строки[1];
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресТип, "Представление", СтрокаАдреса.Значение, Истина, ТекстОшибки);
			КонецЕсли;
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьДанныеКЗаполнению = Ложь;
	Контакты = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ПространствоИменСхемы);
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Телефон рабочий", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Телефон"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс")) Тогда
		Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация.Контакт", ПространствоИменСхемы);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Тип", "Факс", Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Значение",
			ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".Контакт.Факс"), Истина, ТекстОшибки);
		ЕстьДанныеКЗаполнению = Истина;
		Контакты.Контакт.Добавить(Контакт);
	КонецЕсли;
	Если ЕстьДанныеКЗаполнению Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Контакты", Контакты, , ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет")) Тогда
		РеквизитыБанка = "НомерСчета, НаимБанк, БИК";
		БанковскиеРеквизиты = ПолучитьОбъектТипаCML("РасчетныйСчет", ПространствоИменСхемы);
		СвБанк = ПолучитьОбъектТипаCML("Банк", ПространствоИменСхемы);
		
		НомерСчета = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НомерСчета");
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "НомерСчета", НомерСчета, Истина,ТекстОшибки);
		КонецЕсли;
		
		НаимБанк = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.НаимБанк");
		БИК = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, ВидКонтрагента + ".БанковскийСчет.БИК");
		Если ЗначениеЗаполнено(НаимБанк) ИЛИ ЗначениеЗаполнено(БИК) Тогда
			Если ЗначениеЗаполнено(НаимБанк) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвБанк, "Наименование", НаимБанк, ,ТекстОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(БИК) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(СвБанк, "БИК", БИК, ,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "Банк", СвБанк, Истина, ТекстОшибки);
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ПространствоИменСхемы);
		РасчетныеСчета.РасчетныйСчет.Добавить(БанковскиеРеквизиты);
		
		Если Контрагент.Свойства().Получить("РасчетныйСчет") <> Неопределено Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныйСчет", БанковскиеРеквизиты, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML_206(Товар, СтрокаДереваДанных, ПространствоИменСхемы, ТекстОшибки, МассивФайлов = Неопределено)
	
	// Формируем ИД товара.
	ИдТовара = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдТовараУКонтрагента", Ложь);
	Если Не ЗначениеЗаполнено(ИдТовара) Тогда
		Номенклатура = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Номенклатура");
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		Характеристика = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Характеристика");
		ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		Упаковка = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Упаковка");
		ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, , ТекстОшибки);
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Наименование",
		ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Наименование"), , ТекстОшибки);
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ШтрихКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Артикул");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Артикул", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Страна");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Страна", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ТорговаяМарка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ТорговаяМарка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Описание");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Описание", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Картинка");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Картинка", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполним тег БазоваяЕдиница.
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ПространствоИменСхемы);
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаКод");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименование");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеКраткое", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаНаименованиеПолное");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.БазоваяЕдиницаМеждународноеСокращение");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ") Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			Пересчет = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница.Пересчет", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Пересчет, "Единица", Реквизит, , ТекстОшибки);
		
			Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент") Тогда
				Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаХраненияОстатковКоэффициент");
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Пересчет, "Коэффициент", Реквизит, , ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			БазоваяЕдиница.Пересчет.Добавить(Пересчет);
		КонецЕсли;
	КонецЕсли;
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ")
		И Товар.Свойства().Получить("Единица") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКодПоОКЕИ");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Единица", Реквизит, , ТекстОшибки);
			
			Коэффициент = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЕдиницаИзмеренияКоэффициент");
			Если ЗначениеЗаполнено(Коэффициент) Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Коэффициент", Коэффициент, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога")
		И Товар.Свойства().Получить("ИдКаталога") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКаталога");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ИдКаталога", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора")
		И Товар.Свойства().Получить("ИдКлассификатора") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ИдКлассификатора");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ИдКлассификатора", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("ЦенаЗаЕдиницу") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ЦенаЗаЕдиницу", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена")
		И Товар.Свойства().Получить("Цена") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Цена");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Цена", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество")
		И Товар.Свойства().Получить("Количество") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Количество");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Количество", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма")
		И Товар.Свойства().Получить("Сумма") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Сумма");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Сумма", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Товар.Свойства().Получить("Налоги") <> Неопределено И Товар.Свойства().Получить("Налоги") <> Неопределено Тогда
		Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС") Тогда
			Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СуммаНДС");
			Если ЗначениеЗаполнено(Реквизит) Тогда
				Налоги = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги", ПространствоИменСхемы);
				Налог = ПолучитьОбъектТипаCML("Документ.Товары.Товар.Налоги.Налог", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Налог, "Наименование", "НДС", Истина, ТекстОшибки);
				
				УчтеноВСумме = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.НДСУчтеноВСумме", Ложь);
				Если ЗначениеЗаполнено(УчтеноВСумме) Тогда
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Налог, "УчтеноВСумме", УчтеноВСумме, , ТекстОшибки);
				КонецЕсли;
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Налог, "Сумма", Реквизит, Истина, ТекстОшибки);
				
				СтавкаНДС = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтавкаНДС");
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда
					СтрокаСтавкаНДС = ЭлектронныеДокументыПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Налог, "Ставка", СтрокаСтавкаНДС, , ТекстОшибки);
				КонецЕсли;
				Налоги.Налог.Добавить(Налог);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Налоги", Налоги, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения")
		И Товар.Свойства().Получить("СтранаПроисхождения") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.СтранаПроисхождения");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "СтранаПроисхождения", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД")
		И Товар.Свойства().Получить("ГТД") <> Неопределено Тогда
		Реквизит = ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ГТД");
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ГТД", Реквизит, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСвойства = Ложь;
	ЗначенияСвойств = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияСвойств", ПространствоИменСхемы);
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")
			И ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Штрихкоды")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыШтрихкодов = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Штрихкоды", "ПолныйПуть", Истина);
		Для Каждого СтрокаДанных ИЗ СтрокаТаблицыШтрихкодов.Строки Цикл
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Штрихкод", Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", СтрокаДанных.Строки[1].Значение, , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(СтрокаДанных.Строки[0].Значение);
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")
			И ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.Свойства")) Тогда
		ЕстьСвойства = Истина;
		СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.Свойства", "ПолныйПуть", Истина);
		Индекс = 0;
		Для Каждого СтрокаДанных ИЗ СтрокаТаблицыСвойств.Строки Цикл
			Индекс = Индекс + 1;
			ЗначенияСвойства = ПолучитьОбъектТипаCML("ЗначенияСвойства", ПространствоИменСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Ид", "Свойство" + Индекс, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначенияСвойства, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), , ТекстОшибки);
			ЗначенияСвойства.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
			ЗначенияСвойств.ЗначенияСвойства.Добавить(ЗначенияСвойства);
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ЗначенияСвойств", ЗначенияСвойств, , ТекстОшибки);
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов") Тогда
		ЗначенияРеквизитов = ПолучитьОбъектТипаCML("Документ.Товары.Товар.ЗначенияРеквизитов", ПространствоИменСхемы);
		Если ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ЗначенияРеквизитов")) Тогда
			СтрокаТаблицыСвойств = СтрокаДереваДанных.Строки.Найти("Товары.НомерСтроки.ЗначенияРеквизитов", "ПолныйПуть", Истина);
			Индекс = 0;
			Для Каждого СтрокаДанных ИЗ СтрокаТаблицыСвойств.Строки Цикл
				Индекс = Индекс + 1;
				ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ПространствоИменСхемы);
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Строка(СтрокаДанных.Строки[0].Значение), Истина, ТекстОшибки);
				ЗначениеРеквизита.Значение.Добавить(Строка(СтрокаДанных.Строки[1].Значение));
				ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(ЗначениеРеквизита);
			КонецЦикла;
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ЗначенияРеквизитов", ЗначенияРеквизитов, , ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияЭД.СуществуетРеквизитВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")
			И ЗначениеЗаполнено(ЗначениеРеквизитаВДереве(СтрокаДереваДанных, "Товары.НомерСтроки.ПрисоединенныеФайлы")) Тогда
		
		СтрокаТаблицыФайлов = СтрокаДереваДанных.Строки.Найти(
														"Товары.НомерСтроки.ПрисоединенныеФайлы",
														"ПолныйПуть",
														Истина);
		Для Каждого СтрокаДанных ИЗ СтрокаТаблицыФайлов.Строки Цикл
			Товар.Картинка.Добавить(СтрокаДанных.Строки[1].Значение);
			Если Не МассивФайлов = Неопределено Тогда
				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("АдресВременногоХранилища", СтрокаДанных.Строки[0].Значение);
				СтруктураДанных.Вставить("ИмяФайла",                 СтрокаДанных.Строки[1].Значение);
				СтруктураДанных.Вставить("ИдТовара",                 ИдТовара);
				МассивФайлов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВеткаТаблицыВДереве(СтрокаДерева, ИмяРеквизита)
	
	НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита,"ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Возврат НайденнаяСтрока;
	КонецЕсли;

КонецФункции

Процедура ПоместитьТаблицуВЗначениеРеквизита(ИмяРеквизита, СтрокаДереваЗначений, ДокументПродажи, ПространствоИменСхемы)
	
	// в массив будет складывать строковые значение вида "НомерСтроки_ИмяКолонки&Значение#"
	ЗначенияТаблицы = Новый Массив;
	Для Каждого СтрокаДерева Из СтрокаДереваЗначений.Строки Цикл
		НомерСтроки = СтрокаДерева.Значение;
		
		СтрокаТаблицы = "";
		
		Для Каждого ТекСтрока Из СтрокаДерева.Строки Цикл
			ИмяКолонки = ТекСтрока.Уровень3;
			ЗначениеКолонки = ТекСтрока.Значение;
			
			СтрокаТаблицы = СтрокаТаблицы + ИмяКолонки + "&" + ЗначениеКолонки+"#";
			
		КонецЦикла;
		ЗначенияТаблицы.Добавить(СтрокаТаблицы);

	КонецЦикла;
	
	ДобавитьВЗначенияРеквизитовДокумента(ИмяРеквизита, ЗначенияТаблицы, ДокументПродажи, ПространствоИменСхемы);
	
КонецПроцедуры

Функция СтрРазделить(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Если ПустаяСтрока(Строка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачПозицияПервогоЭлемента = Найти(Строка, "{");
	КонПозицияПервогоЭлемента = Найти(Строка, "}");
	Если НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0 Тогда
		ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);
		Результат.Добавить(СокрЛП(ПервыйЭлемент));
		Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));
	КонецЕсли;
	
	Пока Истина Цикл
		Позиция = Найти(Строка,Разделитель);
		Если Позиция = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));
		Строка = СокрЛП(Сред(Строка,Позиция + 1));
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(Строка));
	
	Возврат Результат;
	
КонецФункции 

Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника)
	
	Если ТипАдреса = "Произвольный" Тогда
		ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Кварт");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ОбщегоНазначенияЭД.ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуСведенийСчетаНаОплату(Знач МассивДокументов)
	
	ТаблицаСведений = ПолучитьОписаниеСчетаНаОплату();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить());
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату();
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[1].Выбрать();
	СтрокиДокументов = РезультатЗапроса[2].Выгрузить();
	СтрокиДокументов.Индексы.Добавить("Документ");
	
	Пока Выборка.Следующий() Цикл
		
		СведенияОДокументе = ТаблицаСведений.Добавить();
		ЗаполнитьЗначенияСвойств(СведенияОДокументе, Выборка);
		
		ТаблицаДокумента = ПолучитьОписаниеТаблицыСчетаНаОплату();
		
		Отбор = Новый Структура("Документ", Выборка.Документ);
		СтрокиДокумента = СтрокиДокументов.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из СтрокиДокумента Цикл
			
			СтрокаТаблицыДокумента = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДокумента, Строка);
			
		КонецЦикла;
		
		СведенияОДокументе.ТаблицаДокумента = ТаблицаДокумента;
		
		
		ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера");
		ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения);
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьОписаниеСчетаНаОплату()
	
	ТипОрганизацияКонтрагент = Новый Массив();
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипОрганизацияКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	
	ОписаниеДаты = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Документ");
	
	Таблица.Колонки.Добавить("ДатаДляПолученияСведений",    ОписаниеДаты);
	Таблица.Колонки.Добавить("НомерДокумента", 			Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДатаДокумента", 			ОписаниеДаты);
	
	Таблица.Колонки.Добавить("Валюта", 					Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Таблица.Колонки.Добавить("ВалютаКод", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВалютаНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КурсВзаиморасчетов", 		ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 4));
	Таблица.Колонки.Добавить("КратностьВзаиморасчетов",	ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	
	Таблица.Колонки.Добавить("СуммаВключаетНДС", 		Новый ОписаниеТипов("Булево"));

	Таблица.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Подразделение",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("Поставщик", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Покупатель", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	Таблица.Колонки.Добавить("Получатель", 				Новый ОписаниеТипов(ТипОрганизацияКонтрагент));
	
	Таблица.Колонки.Добавить("БанковскийСчетПродавца",	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	Таблица.Колонки.Добавить("ТекстКорреспондента",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НаименованиеБанкаПолучателя",Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкПолучателя",			Новый ОписаниеТипов("СправочникСсылка.Банки"));
	Таблица.Колонки.Добавить("БикБанкаПолучателя",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СчетБанкаПолучателя",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГородБанкаПолучателя",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НомерСчетаПолучателя",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкТекстКорресподента",	Новый ОписаниеТипов("Строка"));
	
	Таблица.Колонки.Добавить("НомерСчета", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БИК",						Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкНаименование",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("КоррСчет", 				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("БанкДляРасчетов", 		Новый ОписаниеТипов("СправочникСсылка.Банки"));
		
	Таблица.Колонки.Добавить("Руководитель",                      		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("РуководительФИО",                   		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительСтруктураФИО",          		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаРуководителяПоПриказу",           		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжностьНаименование", 		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РуководительДолжность",             		Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтер",                  		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерФИО",               		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерСтруктураФИО",     		Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ЗаГлавногоБухгалтераПоПриказу",      		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжностьНаименование", 	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ГлавныйБухгалтерДолжность",             	Новый ОписаниеТипов("СправочникСсылка.ДолжностиОрганизаций"));
	
	Таблица.Колонки.Добавить("ТаблицаДокумента");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьОписаниеТаблицыСчетаНаОплату()
	
	ОписаниеТиповЧисло15_2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2);
	ОписаниеТиповЧисло15_3 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3);
	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТабличнаяЧасть", 					ОписаниеТиповСтрока100);
	Таблица.Колонки.Добавить("НомерСтроки", 					ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 2));
	Таблица.Колонки.Добавить("Номенклатура", 					Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Таблица.Колонки.Добавить("НоменклатураАртикул",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("НоменклатураНаименование",		Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Содержание",						Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмерения",				Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияКод",				Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименование",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПолное",	Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Коэффициент",						ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Количество", 						ОписаниеТиповЧисло15_3);
	Таблица.Колонки.Добавить("Цена", 							ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("Сумма", 							ОписаниеТиповЧисло15_2);
	Таблица.Колонки.Добавить("СтавкаНДС", 						Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("СуммаНДС", 						ОписаниеТиповЧисло15_2);
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьДанныеОтветственныхЛиц(СведенияОДокументе, ПорядокЗаполнения)
	
	ОтветственныеЛицаОрганизации = ОбщегоНазначения.ОтветственныеЛица(СведенияОДокументе.Организация, СведенияОДокументе.ДатаДляПолученияСведений, СведенияОДокументе.Подразделение);
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьРуководителя") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.Руководитель)
			ИЛИ СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель Тогда
			СведенияОДокументе.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
			СведенияОДокументе.РуководительФИО = ОтветственныеЛицаОрганизации.РуководительПредставление;
			СведенияОДокументе.РуководительСтруктураФИО = ОтветственныеЛицаОрганизации.РуководительФИО;
			СведенияОДокументе.РуководительДолжность = ОтветственныеЛицаОрганизации.РуководительДолжность;
			СведенияОДокументе.РуководительДолжностьНаименование = Строка(ОтветственныеЛицаОрганизации.РуководительДолжность);
			СведенияОДокументе.ЗаРуководителяПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Руководитель, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.РуководительФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.РуководительСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.РуководительДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжность) Тогда
				СведенияОДокументе.РуководительДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.РуководительДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьГлавногоБухгалтера") Тогда
		Если НЕ ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтер)
			ИЛИ СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер Тогда
			СведенияОДокументе.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
			СведенияОДокументе.ГлавныйБухгалтерФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность;
			СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = Строка(ОтветственныеЛицаОрганизации.ГлавныйБухгалтерДолжность);
			СведенияОДокументе.ЗаГлавногоБухгалтераПоПриказу = "";
		Иначе
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.ГлавныйБухгалтер, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.ГлавныйБухгалтерФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.ГлавныйБухгалтерСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.ГлавныйБухгалтерДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.ГлавныйБухгалтерДолжность) Тогда
				СведенияОДокументе.ГлавныйБухгалтерДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.ГлавныйБухгалтерДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПорядокЗаполнения.Свойство("ЗаполнятьКладовщика") Тогда
		Если ЗначениеЗаполнено(СведенияОДокументе.Кладовщик) Тогда
			ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(СведенияОДокументе.Организация, СведенияОДокументе.Кладовщик, СведенияОДокументе.ДатаДляПолученияСведений);
			СведенияОДокументе.КладовщикФИО = ДанныеОтветственногоЛица.Представление;
			СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество, Представление");
			ЗаполнитьЗначенияСвойств(СтруктураФИО, ДанныеОтветственногоЛица);
			СведенияОДокументе.КладовщикСтруктураФИО = СтруктураФИО;
			СведенияОДокументе.КладовщикДолжность = ДанныеОтветственногоЛица.Должность;
			Если ЗначениеЗаполнено(СведенияОДокументе.КладовщикДолжность) Тогда
				СведенияОДокументе.КладовщикДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОДокументе.КладовщикДолжность, "Наименование");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить текст запроса для формирования таблицы сведений счета на оплату
// Возвращаемое значение:
// Текст пакетного запроса
Функция ПолучитьТекстЗапросаДляФормированияТаблицыСведенийСчетаНаОплату()
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("СчетНаОплату");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	МАКСИМУМ(Руководители.Период) КАК РуководителиПериод,
	|	МАКСИМУМ(Бухгалтеры.Период) КАК БухгалтерыПериод,
	|	СчетНаОплату.Организация
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК Руководители
	|		ПО СчетНаОплату.Организация = Руководители.СтруктурнаяЕдиница
	|			И СчетНаОплату.Дата >= Руководители.Период
	|			И (Руководители.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК Бухгалтеры
	|		ПО СчетНаОплату.Организация = Бухгалтеры.СтруктурнаяЕдиница
	|			И (СчетНаОплату.Дата >= Руководители.Период)
	|			И (Руководители.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплату.Ссылка,
	|	СчетНаОплату.Дата,
	|	СчетНаОплату.СуммаВключаетНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	СчетНаОплату.Дата КАК ДатаДляПолученияСведений,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	СчетНаОплату.ВалютаДокумента КАК Валюта,
	|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаКод,
	|	СчетНаОплату.ВалютаДокумента.Наименование КАК ВалютаНаименование,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	СчетНаОплату.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	СчетНаОплату.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.СтруктурнаяЕдиница КАК Подразделение,
	|	СчетНаОплату.Организация КАК Поставщик,
	|	СчетНаОплату.Организация КАК Руководители,
	|	СчетНаОплату.ОрганизацияПолучатель КАК Получатель,
	|	СчетНаОплату.Контрагент КАК Покупатель,
	|	СчетНаОплату.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СчетНаОплату.СтруктурнаяЕдиница КАК БанковскийСчетПродавца,
	|	СчетНаОплату.СтруктурнаяЕдиница.ТекстКорреспондента КАК ТекстКорреспондента,
	|	СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов КАК БанкДляРасчетов,
	|	Руководители.ФизическоеЛицо КАК Руководитель,
	|	Бухгалтеры.ФизическоеЛицо КАК ГлавныйБухгалтер,
	|	"""" КАК ЗаРуководителяПоПриказу,
	|	"""" КАК ЗаГлавногоБухгалтераПоПриказу,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК НаименованиеБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк
	|	КОНЕЦ КАК БанкПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Код
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Код
	|	КОНЕЦ КАК БикБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.КоррСчет
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет
	|	КОНЕЦ КАК СчетБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов.Город
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК ГородБанкаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет
	|		ИНАЧЕ СчетНаОплату.СтруктурнаяЕдиница.НомерСчета
	|	КОНЕЦ КАК НомерСчетаПолучателя,
	|	ВЫБОР
	|		КОГДА СчетНаОплату.СтруктурнаяЕдиница.БанкДляРасчетов <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|			ТОГДА "" р/с "" + СчетНаОплату.СтруктурнаяЕдиница.НомерСчета + "" в "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование + "" "" + СчетНаОплату.СтруктурнаяЕдиница.Банк.Город
	|	КОНЕЦ КАК БанкТекстКорресподента,
	|	СчетНаОплату.СтруктурнаяЕдиница.НомерСчета КАК НомерСчета,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.Наименование КАК БанкНаименование,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.Код КАК БИК,
	|	СчетНаОплату.СтруктурнаяЕдиница.Банк.КоррСчет КАК КоррСчет
	|ИЗ
	|	ДокументыДляПечати КАК ДокументыДляПечати
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплату
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|			ПО СчетНаОплату.Ссылка = ДанныеПервичныхДокументов.Документ
	|				И СчетНаОплату.Организация = ДанныеПервичныхДокументов.Организация
	|		ПО ДокументыДляПечати.Ссылка = СчетНаОплату.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК Руководители
	|		ПО (Руководители.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель))
	|			И ДокументыДляПечати.Организация = Руководители.СтруктурнаяЕдиница
	|			И ДокументыДляПечати.РуководителиПериод = Руководители.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК Бухгалтеры
	|		ПО (Бухгалтеры.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер))
	|			И ДокументыДляПечати.Организация = Бухгалтеры.СтруктурнаяЕдиница
	|			И ДокументыДляПечати.БухгалтерыПериод = Бухгалтеры.Период"+";"+
	
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Документ,
	|	ДокументыДляПечати.ДатаДокумента КАК ДатаДокумента,
	|	""Товары"" КАК ТабличнаяЧасть,
	|	1 КАК ПорядокТабличнойЧасти,
	|	СчетНаОплату.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплату.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА СчетНаОплату.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА СчетНаОплату.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураАртикул,
	|	СчетНаОплату.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	"""" КАК Содержание,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.Наименование, """") КАК ЕдиницаИзмеренияНаименование,
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	СчетНаОплату.Количество КАК Количество,
	|	СчетНаОплату.Цена КАК Цена,
	|	СчетНаОплату.Сумма КАК Сумма,
	|	СчетНаОплату.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплату.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПечати КАК ДокументыДляПечати
	|		ПО СчетНаОплату.Ссылка = ДокументыДляПечати.Ссылка"+
	
	"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплату.Ссылка,
	|	ДокументыДляПечати.ДатаДокумента,
	|	""Услуги"",
	|	2,
	|	СчетНаОплату.НомерСтроки,
	|	СчетНаОплату.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА СчетНаОплату.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА СчетНаОплату.Номенклатура.Артикул
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.Код, """"),
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.Наименование, """"),
	|	ЕСТЬNULL(СчетНаОплату.Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное, """"),
	|	СчетНаОплату.Количество,
	|	СчетНаОплату.Цена,
	|	СчетНаОплату.Сумма,
	|	СчетНаОплату.СтавкаНДС,
	|	СчетНаОплату.СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплату
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПечати КАК ДокументыДляПечати
	|		ПО СчетНаОплату.Ссылка = ДокументыДляПечати.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Документ,
	|	ПорядокТабличнойЧасти,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяСвойства) Тогда
		ИмяСвойства = ВидКонтрагента;
	КонецЕсли;
	
	ДанныеКонтрагента = Неопределено;
	Если НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);
	ИдКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);
	
	// Заполнение реквизитов юридического или физического лица.
	ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);
	
	ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");
	ПолноеНаименование = "";
	ДанныеЮрФизЛица.Свойство(ПолноеНаименованиеИмя, ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ПолноеНаименование) Тогда
		ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
			ДанныеЮрФизЛица.Представление);
	КонецЕсли;
	
	РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");
	РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);
	
	Если НЕ ЭтоФизЛицо Тогда
		// КПП есть только в реквизитах ЮрЛица
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);
	КонецЕсли;
	
	// Юр.адрес или адрес регистрации.
	Если ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес) Тогда
		
		ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");
		ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);
		
	КонецЕсли;
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);
	
	// РасчетныеСчета.
	РасчСчет = Неопределено;
	Если ((ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет) Тогда
		
		РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);
		РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);
		
		// Банк
		Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);
		
		// Банк корреспондент
		Если ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов) Тогда
			БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);
		КонецЕсли;
		
		РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);
	КонецЕсли;
	
	// Адрес
	Если ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес) Тогда
		
		АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);
	КонецЕсли;
	
	// Контакты организации
	Если (ВидКонтрагента = "Организация") Тогда
		ТаблицаКонтактов = ЭлектронныеДокументыПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);
		Если ТаблицаКонтактов.Количество()>0 Тогда
			Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);
			ЕстьКонтакты = Ложь;
			Для Каждого СтрокаКонтакта из ТаблицаКонтактов Цикл
				Контакт = ПолучитьОбъектТипаCML("КонтактнаяИнформация", ВерсияСхемы);
				ТекстОшибки = "";
				Если СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"EmailОрганизации") Тогда
						
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Почта");
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Тип", Тип, Истина, ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ТелефонОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Телефон рабочий");
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
				ИначеЕсли СтрокаКонтакта.Вид = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации",
					"ФаксОрганизации") Тогда
					
					Тип = ПолучитьЗначениеТипаCML("КонтактТип", "Факс");
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Тип",Тип,Истина, ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Комментарий", СтрокаКонтакта.Комментарий, , ТекстОшибки);
					ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контакт, "Значение", СтрокаКонтакта.Значение, Истина, ТекстОшибки);
					
				КонецЕсли;
				Если ТекстОшибки="" Тогда
					Контакты.Контакт.Добавить(Контакт);
					ЕстьКонтакты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьКонтакты Тогда
				ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

Процедура СформироватьДанныеПоТоваруCML(Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01")
	
	// Формируем ИД товара.
	Если ЗначениеЗаполнено(СтруктураПараметров.Ид) Тогда
		ИДТовара = СтруктураПараметров.Ид;
	Иначе
		Номенклатура = СтруктураПараметров.Номенклатура;
		ИДНоменклатуры = Номенклатура.УникальныйИдентификатор();
		
		ИДХарактеристики = ""; ИДУпаковки = "";
		Если СтруктураПараметров.Владелец().Колонки.Найти("Характеристика") <> Неопределено Тогда
			Характеристика = СтруктураПараметров.Характеристика;
			ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
		КонецЕсли;
		Если СтруктураПараметров.Владелец().Колонки.Найти("Упаковка") <> Неопределено Тогда
			Упаковка = СтруктураПараметров.Упаковка;
			ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
		КонецЕсли;
		
		ИДТовара = Строка(ИДНоменклатуры) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	КонецЕсли;
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Ид", ИДТовара, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара, , ТекстОшибки);
	КонецЕсли;
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина, ТекстОшибки);
	
	БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено Тогда
		ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);
	КонецЕсли;
	
	Если СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено
		И СтруктураПараметров.ДополнительныеРеквизиты <> Неопределено Тогда
		
		Для Каждого Элемент Из СтруктураПараметров.ДополнительныеРеквизиты Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЗначениеРеквизита, "Наименование", Элемент.Ключ, Истина, ТекстОшибки);
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива ИЗ Элемент.Значение Цикл
					// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
					Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
						Если ТипЗнч(ЭлементМассива) = Тип("СписокЗначений") Тогда
							ЗаполненныйТип = Неопределено;
							Для Каждого Элемент Из ЭлементМассива Цикл
								Если Элемент.Пометка Тогда
									ЗаполненныйТип = Элемент;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
								Адрес = ЗаполненныйТип.Значение;
								Если ЗаполненныйТип.Представление = "Структурированный" Тогда
									ЭлементМассива = СобратьАдрес(Адрес);
								Иначе
									ЭлементМассива = Адрес.АдресСтрокой;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					ЗначениеРеквизита.Значение.Добавить(ЭлементМассива)
				КонецЦикла;
			Иначе
				// Для корректной передачи адресов покупателя соберем структура адреса ФНС в строку.
				Если Элемент.Ключ = "ПокупательФактАдрес" ИЛИ Элемент.Ключ = "ПокупательЮрАдрес" Тогда
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
						ЗаполненныйТип = Неопределено;
						Для Каждого Элемент Из Элемент.Значение Цикл
							Если Элемент.Пометка Тогда
								ЗаполненныйТип = Элемент;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура") Тогда
							Адрес = ЗаполненныйТип.Значение;
							Если ЗаполненныйТип.Представление = "Структурированный" Тогда
								Элемент.Значение = СобратьАдрес(Адрес);
							Иначе
								Элемент.Значение = Адрес.АдресСтрокой;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗначениеРеквизита.Значение.Добавить(Элемент.Значение)
			КонецЕсли;
			
			Товар.ДополнительныеРеквизиты.Добавить(ЗначениеРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПоЕдиницеИзмеренияCML(ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки)
	
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СтруктураПараметров.ЕдиницаИзмеренияКод, , ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);
	ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);
	
КонецПроцедуры

Процедура СформироватьДанныеПоЭтапамГрафикаОплатыCML(ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок)
	
	Для каждого Колонка из МассивКолонок Цикл
		Если Колонка = "ВидОплаты" ТОгда
			
			Если СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Аванс (до обеспечения)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Аванс (до подтверждения)") Тогда
				ВариантОплаты = "Аванс";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Кредит (после отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Кредит (после поступления)") Тогда
				ВариантОплаты = "Кредит";
			ИначеЕсли СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыКлиентом", "Предоплата (до отгрузки)")
				ИЛИ СтруктураПараметров.ВидОплаты = ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ВариантыОплатыПоставщику", "Предоплата (до поступления)") Тогда
				ВариантОплаты = "Предоплата";
			КонецЕсли;
			
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ВидОплаты", ВариантОплаты, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ДатаПлатежа" ТОгда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ДатаПлатежа", XMLДата(СтруктураПараметров.ДатаПлатежа), Истина, ТекстОшибки);
		ИначеЕсли Колонка = "ПроцентПлатежа" ТОгда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"ПроцентПлатежа", СтруктураПараметров.ПроцентПлатежа, Истина, ТекстОшибки);
		ИначеЕсли Колонка = "СуммаПлатежа" ТОгда
			ЭлектронныеДокументыВнутренний.ЗаполнитьСвойствоXDTO(ЭтапГрафикаОплаты,"СуммаПлатежа", СтруктураПараметров.СуммаПлатежа, Истина, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция XMLЧисло(Значение)
	
	Возврат Формат(Значение, "ЧРД=.; ЧН=0; ЧГ=");
	
КонецФункции

Функция XMLДатаВремя(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd'T'ЧЧ:мм:сс");
	КонецЕсли;
	
	Возврат "0001-01-01T00:00:00";
	
КонецФункции

Функция XMLДата(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Возврат "0001-01-01";
	
КонецФункции

Функция ПолучитьЗначениеТипаCML(Тип, Значение)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		ТипЗначения = ЭлектронныеДокументыВнутренний.ПолучитьТипЗначенияCML(Тип);
	Иначе
		ТипЗначения = Тип;
	КонецЕсли;
	
	Если ТипЗначения = Неопределено Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);
	
	Возврат НовоеЗначение;
	
КонецФункции

//Собирает из элементов структуры адреса строку записи адреса в формате 8 запятых
Функция СобратьАдрес(Знач СтруктураАдрес)
	
	Возврат "" + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.КодРегион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Кварт
	
КонецФункции

Функция СчетНаОплатуСтруктураПараметров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаПоОКЕИ");
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель");
	СтруктураПараметров.Вставить("ВерсияСхемы");
	СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Контрагент");
	СтруктураПараметров.Вставить("Ид");
	СтруктураПараметров.Вставить("ДатаФормирования");
	СтруктураПараметров.Вставить("Номер");
	СтруктураПараметров.Вставить("Дата");
	СтруктураПараметров.Вставить("Валюта");
	СтруктураПараметров.Вставить("Курс");
	СтруктураПараметров.Вставить("Сумма");
	СтруктураПараметров.Вставить("ЦенаВключаетНДС");
	СтруктураПараметров.Вставить("СуммаНДС");
	СтруктураПараметров.Вставить("ВидЭД");
	СтруктураПараметров.Вставить("НаправлениеЭД");
	
	СтруктураПараметров.Вставить("СрокПлатежа");
	СтруктураПараметров.Вставить("РасчетныйСчетОрганизации");
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
	|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
	Возврат СтруктураПараметров;

КонецФункции

// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
// обязательного поля является вложенная структура, то она рекурсивно проверяется
// в этой же функции, если значением обязательного поля является вложенная таблица
// значений, то она передается на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
// Список обязательных полей проверяемой структуры, берется из значения элемента
// структуры с ключем "ОбязательныеПоля"
// Список обязательных колонок таблицы значений, берется из значения элемента структуры
// с ключом "ОбязательныеПоляТаблицыЗначений".
//
// Параметры:
//  Источник             - ссылка - ссылка на объект информационной базы.
//  СтруктураПараметров  - структура - проверяемая структура с данными.
//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
//
// Возвращаемое значение:
//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
//
Функция ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПараметров, ТекстОшибки = "")
	
	ОбязательныеПоля = "";
	ЗначениеПараметра = "";
	ДанныеПодготовлены = Ложь;
	
	Если СтруктураПараметров.Свойство("ДанныеПодготовлены", ДанныеПодготовлены) И НЕ ДанныеПодготовлены Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СообщениеОбОшибке = Неопределено;
	Если СтруктураПараметров.Свойство("ТекстОшибки", СообщениеОбОшибке) И ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ТекстОшибки = СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураОбязательныхПолей = СтруктураПараметров;
	Если СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля) Тогда
		СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураОбязательныхПолей Цикл
		Если СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеПараметра) Тогда
			Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
				ПроверитьЗаполнениеОбязательныхПолей(Источник, ЗначениеПараметра, ТекстОшибки);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
				ПоляТЗ = "";
				ПользовательскоеПредставлениеТЗ = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
					Элемент.Ключ);
				Если СтруктураПараметров.Свойство("ОбязательныеПоляТаблицыЗначений", ПоляТЗ) Тогда
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ЗначениеПараметра, ПоляТЗ, ПользовательскоеПредставлениеТЗ,
						ТекстОшибки);
				Иначе
					ШаблонОшибки = НСтр("ru = 'Не заполнен перечень обязательных полей таблицы: ""%1"".'");
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставлениеТЗ) + Символы.ПС;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСЗ Из ЗначениеПараметра Цикл
					Если ЭлементСЗ.Пометка Тогда
						СтруктураПроверки = Новый Структура("Элемент", ЭлементСЗ.Значение);
						ПроверитьЗаполнениеОбязательныхПолей(Источник, СтруктураПроверки, ТекстОшибки);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
					ШаблонОшибки = НСтр("ru = 'Не заполнено обязательное поле структуры параметров: ""%1"".'");
					
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
						Элемент.Ключ);
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						ПользовательскоеПредставление) + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ШаблонОшибки = НСтр("ru = 'Отсутствует обязательное поле в структуре параметров: ""%1"".'");
			ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				Элемент.Ключ) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

Функция ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки)
	
	Если ТЗ.Количество() > 0 Тогда
		//СтруктураОбязательныхКолонок = Новый Структура(ПоляТЗ);
		МассивОбязательныхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляТЗ);
		КоличествоКолонок = МассивОбязательныхКолонок.Количество();
		Для Индекс = 1 По КоличествоКолонок Цикл
			Элемент = СокрЛП(МассивОбязательныхКолонок[КоличествоКолонок - Индекс]);
			// Доп. проверка наличия обязательных колонок во вложенных таблицах см. функцию Акт501СтруктураПараметров.
			Если Найти(Элемент, ".") = 0 И ТЗ.Колонки.Найти(Элемент) = Неопределено Тогда
					ШаблонОшибки = НСтр("ru = 'В таблице ""%1"" отсутствует обязательная к заполнению колонка: ""%2.""'");
					ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(
																												Источник,
																												Элемент);
					ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																	ШаблонОшибки,
																	ИмяТЗ,
																	ПользовательскоеПредставление);
					ТекстОшибки = ТекстОшибки + ТекстТекущейОшибки + Символы.ПС;
					МассивОбязательныхКолонок.Удалить(КоличествоКолонок - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого Строка Из ТЗ Цикл
			Для Каждого Элемент Из МассивОбязательныхКолонок Цикл
				Элемент = СокрЛП(Элемент);
				// Проверка заполненности обязательных полей во вложенных таблицах см. функцию Акт501СтруктураПараметров.
				Если Найти(Элемент, ".") <> 0 Тогда
					ВложеннаяТаблица = Лев(Элемент, Найти(Элемент, ".") - 1);
					ОбязательныйПараметрВложеннойТаблицы = Сред(Элемент, Найти(Элемент, ".") + 1);
					
					ПользовательскоеПредставлениеТЗ = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(
						Источник, ВложеннаяТаблица);
					ПроверитьЗаполнениеОбязательныхПолейТЗ(Источник, Строка[ВложеннаяТаблица], ОбязательныйПараметрВложеннойТаблицы,
						ПользовательскоеПредставлениеТЗ, ТекстОшибки);
				Иначе
					ЗначениеПараметра = Строка[Элемент];
					Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
						ПроверитьЗаполнениеОбязательныхПолей(ЗначениеПараметра, ТекстОшибки);
						
					ИначеЕсли Не ЗначениеЗаполнено(ЗначениеПараметра) И Не ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
						ШаблонОшибки = НСтр("ru = 'В строке №%1 таблицы ""%2"" не заполнено значение ""%3.""'");
						
						ПользовательскоеПредставление = ЭлектронныеДокументыПовтИсп.ПолучитьПользовательскоеПредставление(Источник,
							Элемент);
						ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
							ТЗ.Индекс(Строка) + 1, ИмяТЗ, ПользовательскоеПредставление) + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не заполнена обязательная таблица: ""%1.""'");
		ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяТЗ) + Символы.ПС;
	КонецЕсли;
	ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат ПараметрыЗаполнены;
	
КонецФункции

Процедура ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(СсылкаНаОбъект);
	
	ДанныеДляФормированияЭД = ПолучитьТаблицуСведенийСчетаНаОплату(МассивДокументов);
	
	РеквизитыШапки   = ДанныеДляФормированияЭД[0];
	ТаблицаДокумента = ДанныеДляФормированияЭД[0].ТаблицаДокумента;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("Ид");
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("Описание");
	ТаблицаТоваров.Колонки.Добавить("Артикул");
	ТаблицаТоваров.Колонки.Добавить("Характеристика");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиница");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименование");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное");
	ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Коэффициент");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаСкидки");
	
	ТаблицаТоваров.Колонки.Добавить("Упаковка");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаКод");
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование");
	
	ТаблицаТоваров.Колонки.Добавить("ДополнительныеРеквизиты");
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.Номенклатура 	= Строка.Номенклатура;
		НоваяСтрока.Описание 		= Строка.Содержание;
		НоваяСтрока.Артикул 		= Строка.НоменклатураАртикул;
		НоваяСтрока.БазоваяЕдиница 				= Строка.ЕдиницаИзмерения;
		НоваяСтрока.БазоваяЕдиницаКод 			= СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.БазоваяЕдиницаНаименование 	= Строка.ЕдиницаИзмеренияНаименование;
		НоваяСтрока.БазоваяЕдиницаНаименованиеПолное 	= Строка.ЕдиницаИзмеренияНаименованиеПолное;
		НоваяСтрока.Количество 	= Строка.Количество;
		НоваяСтрока.Коэффициент = 1;
		НоваяСтрока.Цена 		= Строка.Цена;
		НоваяСтрока.Сумма 		= Строка.Сумма;
		НоваяСтрока.СтавкаНДС 	= Строка.СтавкаНДС;
		НоваяСтрока.СуммаНДС 	= Строка.СуммаНДС;
		
		НоваяСтрока.СуммаСНДС   = ?(РеквизитыШапки.СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
		НоваяСтрока.СуммаСкидки = 0;
		
		НоваяСтрока.Упаковка 			 = Строка.ЕдиницаИзмерения;
		НоваяСтрока.УпаковкаКод 		 = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.УпаковкаНаименование = Строка.ЕдиницаИзмеренияНаименование;
		
		НоваяСтрока.Наименование = ПолучитьНаименованиеНоменклатуры(Строка.НоменклатураНаименование, Строка.ЕдиницаИзмеренияНаименование);
		НоваяСтрока.Ид = ПолучитьИДНоменклатуры(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика, НоваяСтрока.Упаковка);
		
	КонецЦикла;
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Номер", 			СокрЛП(СтруктураЭД.НомерДокументаОтправителя));
	СтруктураПараметров.Вставить("Дата", 			СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			РеквизитыШапки.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Сумма", 			ТаблицаТоваров.Итог("СуммаСНДС"));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", РеквизитыШапки.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 		ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("НазначениеПлатежа", "");
	СтруктураПараметров.Вставить("СрокПлатежа", '00010101');
	
	// Расчетный счет
	РасчетныйСчет = Новый Структура;
	РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
	РасчетныйСчет.Вставить("Банк", РеквизитыШапки.БанкНаименование);
	РасчетныйСчет.Вставить("КоррСчет", РеквизитыШапки.КоррСчет);
	РасчетныйСчет.Вставить("БИК", РеквизитыШапки.БИК);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		
		РеквизитыБанка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыШапки.БанкДляРасчетов, "Наименование,КоррСчет,Код");
		
		БанкКорреспондент = Новый Структура;
		БанкКорреспондент.Вставить("Банк", РеквизитыБанка.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанка.КоррСчет);
		БанкКорреспондент.Вставить("БИК", РеквизитыБанка.Код);
		
		РасчетныйСчет.Вставить("БанкКорреспондент", БанкКорреспондент);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	
	// Отвественные лица
	СтруктураПараметров.Вставить("Руководитель", РеквизитыШапки.Руководитель);
	СтруктураПараметров.Вставить("Бухгалтер", РеквизитыШапки.ГлавныйБухгалтер);
				
	// Итоговая строка
	СуммаКПрописи = ТаблицаТоваров.Итог("СуммаСНДС");
	
	ШаблонСтроки =	НСтр("ru = 'Всего наименований %1, на сумму %2'");
		
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		ТаблицаТоваров.Количество(),
		ОбщегоНазначения.ФорматСумм(СуммаКПрописи, РеквизитыШапки.Валюта));
		
	ИтоговаяСтрока = ИтоговаяСтрока +  Символы.ПС + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования, Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, Количество, БазоваяЕдиницаКод, СуммаНДС, СуммаСНДС");
	
КонецПроцедуры

Функция ПолучитьНаименованиеНоменклатуры(Наименование, БазоваяЕдиницаНаименование)
	
	Возврат Наименование
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), "  (", "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), БазоваяЕдиницаНаименование, "")
			+ ?(ЗначениеЗаполнено(БазоваяЕдиницаНаименование), ")", "");
	
КонецФункции

Функция ПолучитьИДНоменклатуры(Номенклатура, Характеристика, Упаковка)
	
	ИДТовара = Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");;
	
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	
КонецФункции

Процедура ПроверитьЗаполнениеТабличнойЧасти(ТабличнаяЧасть)
	
	КолонкиЕдиницИзмеренияСтрокой = ВРег(",БазоваяЕдиницаКод,ЕдиницаИзмеренияКодДо,ЕдиницаИзмеренияКод,УпаковкаКод,");
	
	КолонкиЕдиницИзмерения = Новый Структура;
	Для Каждого Колонка Из ТабличнаяЧасть.Колонки Цикл
		Если Найти(КолонкиЕдиницИзмеренияСтрокой, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			КолонкиЕдиницИзмерения.Вставить(Колонка.Имя);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		// Проверим длину кода единицы измерения  
		Для Каждого КлючЗначение Из КолонкиЕдиницИзмерения Цикл
			ИмяКолонки = КлючЗначение.Ключ;
			Если СтрДлина(Строка[ИмяКолонки]) = 4 Тогда
				ВызватьИсключение "Документ содержит 4-х значные коды ОКЕИ, отправка таких документов не поддерживается.";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
