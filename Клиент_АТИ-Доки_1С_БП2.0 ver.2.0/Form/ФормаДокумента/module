
Перем Контакты;
Перем ФлагОтправка;
Перем ДанныеИзменены;
Перем API;

Перем СоответствиеСтатусов;
Перем МапЭДИНашихДокументов;

Перем СтруктураРазбора;

Перем Меню;
Перем КонстЗагрузитьФайл;
Перем КонстЗагрузитьАрхив;

Перем ПревьюЗагружено;

#Область КлиентскаяЛогика

Процедура ИнициализацияПеременных()
	
	ФлагОтправка = Ложь;
	API = ВладелецФормы.API;
	ДанныеИзменены = Ложь;
	//ТипыТранспорта = Новый СписокЗначений;
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("UnknownInvoiceStatus",                 "(неизвестный статус; может выдаваться лишь в случае, когда клиент использует устаревшую версию SDK и не может интерпретировать статус документа, переданный сервером)");
	СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceipt",     "(СФ исходящий, ожидается извещение о получении СФ от покупателя)");
	СоответствиеСтатусов.Вставить("OutboundNotFinished",                  "(СФ исходящий, извещение о получении СФ от покупателя уже есть, но документооборот еще не завершен, например еще не отправлены все необходимые ответные сервисные сообщения)");
	СоответствиеСтатусов.Вставить("OutboundFinished",                     "(СФ исходящий, документооборот завершен)");
	СоответствиеСтатусов.Вставить("OutboundWaitingForSenderSignature",    "(СФ исходящий, документ не отправлен, поскольку не подписан отправителем)");
	СоответствиеСтатусов.Вставить("OutboundInvalidSenderSignature",       "(СФ исходящий, документ не отправлен, поскольку подпись отправителя не является корректной)");
	СоответствиеСтатусов.Вставить("InboundNotFinished",                   "(СФ входящий, документооборот не завершен)");
	СоответствиеСтатусов.Вставить("InboundFinished",                      "(СФ входящий, документооборот завершен)");
	
	МапЭДИНашихДокументов = Новый Соответствие;
	МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель"), "ПоступлениеТоваровУслуг");
	МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.ТОРГ12Продавец"), "ПоступлениеТоваровУслуг");
	МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура"), "СчетФактураПолученный");
	МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату"), "СчетНаОплатуПоставщика");
	
	КонстЗагрузитьФайл = "Загрузить файл";
	КонстЗагрузитьАрхив = "Загрузить весь документооборот";
	
	Меню = Новый СписокЗначений;
	Меню.Добавить(КонстЗагрузитьФайл);
	Меню.Добавить(КонстЗагрузитьАрхив);
	
КонецПроцедуры


Процедура ЗаполнитьСписокВыбора(ПолеФормы, ТабЧасть)
	
	Для каждого Стр Из ТабЧасть Цикл
		ПолеФормы.СписокВыбора.Добавить(Стр.Наименование, Стр.Наименование);
	КонецЦикла;
	
КонецПроцедуры

Функция СгенерироватьИД()
	
	Перем Id;
	Id = "";
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Если ТипДокумента = "Акт" Тогда
			Префикс = "Act_";
		ИначеЕсли ТипДокумента = "Счет" Тогда
			Префикс = "Bill_";
		ИначеЕсли ТипДокумента = "Счет-фактура" Тогда
			Префикс = "Invoice_";
		Иначе	
			Префикс = "";
		КонецЕсли;
		
		Id = Префикс + Строка(ДокументСсылка.УникальныйИдентификатор())+"_" + ПреобразоватьАлфавит(ДокументСсылка.ВерсияДанных);
		
	КонецЕсли;
	
	Возврат Id;
	
КонецФункции

Функция СформироватьСтруктуруДокумента()
	
	Новый_ID = ID;
	Если ПустаяСтрока(Новый_ID) Тогда
		Новый_ID = СгенерироватьИД();
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура
	(
	"id,
	|doc_recipient_id,
	|doc_recipient_contact,
	|doctype,
	|doc_request,
	|is_formal,
	|date,
	|number,
	|description,
	|body"
	,
	Новый_ID,
	Формат(КонтрагентId, "ЧГ=0"),
	Формат(КонтактId, "ЧН=0; ЧГ=0"),
	ТипДокумента,
	ТребуетсяЗапросРешения,
	Формализованный И Ложь, //отладка
	//?(ТипДокумента="Договор-заявка", Истина, Ложь), //отладка
	Формат(Дата, "ДФ=yyyy-MM-dd"),
	Номер,
	Описание,
	Тело
	);
	
	Если Формализованный И Ложь Тогда //отладка
		СтруктураДокумента.Удалить("number");
		СтруктураДокумента.Удалить("date");
		СтруктураДокумента.Удалить("description");
	Иначе
		СтруктураДокумента.Удалить("body");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) И ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", ДокументСсылка.Метаданные()) Тогда
		СтруктураДокумента.Вставить("contract_number", ДокументСсылка.ДоговорКонтрагента.Номер);
		СтруктураДокумента.Вставить("contract_date", Формат(ДокументСсылка.ДоговорКонтрагента.Дата, "ДФ=yyyy-MM-dd"));
	КонецЕсли;
		
	Возврат СтруктураДокумента;
	
КонецФункции

Процедура СохранитьДокумент(ОтпечатокДиадок = Неопределено, ДопПараметры = Неопределено)
	
	Перем Результат;
	
	СтруктураДокумента = СформироватьСтруктуруДокумента();
	
	Если ПустаяСтрока(ID) Тогда
		
		Результат = API.Document(СтруктураДокумента.id, Ложь);
		Если Результат <> Неопределено Тогда
			
			СписокКнопок = Новый СписокЗначений();
			
			Если Результат["is_draft"] = Истина Тогда
				СписокКнопок.Добавить("ПерезаписатьЧерновик", "Перезаписать документ");
			КонецЕсли;
			
			СписокКнопок.Добавить("ОткрытьСтарый", "Открыть старый документ");
			СписокКнопок.Добавить("Закрыть", "Закрыть");
			
			Ответ = Вопрос("Документ с таким вложением уже существует!
			|Вы можете:", СписокКнопок);
			
			Если Ответ = "ПерезаписатьЧерновик" Тогда
				
				 ФайлИмя = Результат["file"]["name"];
				
			ИначеЕсли Ответ = "ОткрытьСтарый" Тогда
				
				 ID = Результат["id"];
				 ОбновитьДанныеДокумента();
				 УправлениеВидимостьюДоступностьюЭлементовФормы();
				 Возврат;
				
			ИначеЕсли Ответ = "Закрыть" Тогда	
				
				Возврат;
				
			КонецЕсли;			
						
		КонецЕсли;
				
	КонецЕсли;
	
	Если ПустаяСтрока(ID) ИЛИ ЭтоЧерновик Тогда
		
		СтруктураОтвета = API.PostDocument(СтруктураДокумента);
		
		Если СтруктураОтвета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ID = СтруктураОтвета;
		
	КонецЕсли;
	
	//Если НРег(ТипДокумента) = "счет-фактура" Тогда
	//	
	//	МассивСтрок = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ОтпечатокДиадок));
	//	
	//	Если МассивСтрок.Количество() > 0 Тогда
	//		
	//		Если ПустаяСтрока(МассивСтрок[0].КодСтатуса <> "active") Тогда
	//			ВызватьИсключение "Кабинет для отправки не настроен должным образом";
	//		КонецЕсли;
	//		
	//		Если ПустаяСтрока(МассивСтрок[0].edo_id) Тогда
	//			ВызватьИсключение "Не задано ФНС ИД отправителя!";
	//		КонецЕсли;
	//		
	//		Если ПустаяСтрока(edo_id) Тогда
	//			ВызватьИсключение "Не задано ФНС ИД получателя!
	//			|Выберите аккаунт получетеля из списка";
	//		КонецЕсли;
	//		
	//		ДопПараметры.Вставить("ТокенДиадок", МассивСтрок[0].token);
	//		ДопПараметры.Вставить("ИдентификаторОрганизации", МассивСтрок[0].edo_id);
	//		ДопПараметры.Вставить("ИдентификаторКонтрагента", edo_id);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

	Если (ЗначениеЗаполнено(ФайлИмя) ИЛИ ЗначениеЗаполнено(ДокументСсылка)) И НЕ ЕстьВложение
		ИЛИ НЕ ПустаяСтрока(ФайлИмя) Тогда
		
		Если ПустаяСтрока(ФайлИмя) Тогда
			
			Если Формализованный Тогда
				
				Если ЭтоЗаявка Тогда
					
					СтруктураДанных = СформироватьФайлЗаявки(ДокументСсылка);
					ФайлДляВыгрузки = СтруктураДанных.ИмяФайла;
					Описание = СтруктураДанных.Описание;
					
				Иначе
					
					Если ЗначениеЗаполнено(ДокументСсылка) Тогда
						
						Если НЕ(НРег(ТипДокумента) = "счет-фактура" И НЕ ДопПараметры.ПодписыватьДокумент И НЕ ДопПараметры.Отправлять) Тогда
							// Не стоит формировать счет-фактуру без подписи и отправки
							ФайлДляВыгрузки = СформироватьДокумент1С(ДокументСсылка, Не Формализованный, ДопПараметры);
							Если ФайлДляВыгрузки = Неопределено Тогда
								Возврат;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						ФайлДляВыгрузки = ФайлИмя;
						ФлагУдаление = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				ФлагУдаление = Истина;
			Иначе
				ФайлДляВыгрузки = ПечатьДокумента(ДокументСсылка, ID);
			КонецЕсли;
			
		Иначе
			
			//ФайлДляВыгрузки = API.GetAttachment(ID, ФайлID, РасширениеФайла, ФайлИмя);
			
		КонецЕсли;
		
		КонтрагентСвойствоId = Получить_Код_АТИ(Контрагент);
		
		Если КонтрагентСвойствоId = 0 Тогда
			Сохранить_Код_АТИ_Контрагента(Контрагент, КонтрагентID);
		КонецЕсли;
		
		//ДопПараметры.Вставить("ЗакрытьФорму", ДопПараметры.ПодписыватьДокумент);
		
		//Если ПустаяСтрока(ФайлДляВыгрузки) Тогда
		//	Возврат;
		//КонецЕсли;
		
		ДопПараметры.Вставить("ИмяФайла", ФайлДляВыгрузки);
		ДопПараметры.Вставить("ФлагУдаление", ФлагУдаление);
		
		// Здесь нужен выбор сертификата
		Если ДопПараметры.ПодписыватьДокумент Тогда
			
			СертификатСсылка = ВладелецФормы.ПолучитьАктивныйСертификат();
			Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыЭЦП") И НЕ СертификатСсылка.Пустая() Тогда
				ПодписатьДокументЗавершение(СертификатСсылка, ДопПараметры);
			Иначе
				ПодписатьДокумент(ДопПараметры);
			КонецЕсли;
			
		Иначе	
			ПодписатьДокументЗавершение(Неопределено, ДопПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьДокумент(ДопПараметры = Неопределено)
	
	ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаВыбора",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтаФорма, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

Процедура ПодписатьДокументЗавершение(ВыбранныйСертификат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйСертификат) И ДопПараметры.ПодписыватьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ПодписыватьДокумент И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыЭЦП")
		И НЕ ВыбранныйСертификат.Пустая() Тогда
		
		ДействителенДо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранныйСертификат, "ДатаОкончания");
		Если ДействителенДо < НачалоДня(ТекущаяДата()) Тогда
			Сообщить("Сертификат " + ВыбранныйСертификат + " просрочен!");
			Возврат;
		КонецЕсли;  
		
	КонецЕсли;
	
	//Если НЕ ДопПараметры.Свойство("ИмяФайла") Тогда
	//	ДопПараметры.Вставить("ИмяФайла", API.GetAttachment(id, ФайлID, РасширениеФайла, ФайлИмя));
	//КонецЕсли;
	
	Если НРег(ТипДокумента) = "счет-фактура" И ДопПараметры.Свойство("ИмяФайла") И НЕ ПустаяСтрока(ДопПараметры.ИмяФайла) Тогда
		
		Массив = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
		Если Массив.Количество() > 0 Тогда
			СтрокаСертификата = Массив[0];
		КонецЕсли;
		
		ДополнитьФайлПодписантом(ДопПараметры.ИмяФайла, ВыбранныйСертификат, Организация, СтрокаСертификата.ИНН);
		
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ИмяФайла") И ЗначениеЗаполнено(ДопПараметры.ИмяФайла) Тогда
		
		СтруктураОтвета = API.PostAttachment(id, ДопПараметры.ИмяФайла);
		
		ФлагУдаление = Ложь;
		ДопПараметры.Свойство("ФлагУдаление", ФлагУдаление);
		Если ФлагУдаление = Истина Тогда
			УдалитьФайлы(ДопПараметры.ИмяФайла);
		КонецЕсли;
		
		Если НЕ СтруктураОтвета = Неопределено Тогда
			Сообщить("Файл "+ФайлИмя+" успешно отправлен на сервер");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Отправлять") И ДопПараметры.Отправлять = Истина И НЕ API.SendDocument(id, КонтрагентId, КонтактId) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры.ПодписыватьДокумент Тогда
		Подписан = API.Sign(id, ВыбранныйСертификат);
	КонецЕсли;
	
	ТокенДиадок = "";
	Если НРег(ТипДокумента) = "счет-фактура" И ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ТокенДиадок", ТокенДиадок) Тогда
			
		ОтправитьВФНС(ВладелецФормы.АктивныйСертификат, ДопПараметры.ТокенДиадок);
		
	КонецЕсли;
	
	ОбновитьДанныеДокумента();
		
	НеобходимоОбновитьСписок = Истина;

	Если ДопПараметры.Свойство("ЗакрытьФорму") И ДопПараметры.ЗакрытьФорму Тогда
		Закрыть(Истина);
	Иначе
		УправлениеВидимостьюДоступностьюЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьДокумент(ПодписыватьДокумент)

	ОчиститьСообщения();
	
 	ДопПараметры = Новый Структура("ПодписыватьДокумент, Отправлять, ТипДокумента", ПодписыватьДокумент, Истина, НРег(ТипДокумента));
	ДопПараметры.Вставить("ЗакрытьФорму", ПодписыватьДокумент);

	ФлагОтправка = Истина;
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьДокумент И ОтправлятьЧерезАгента И НЕ ПустаяСтрока(КаталогАгента) Тогда
		
		ОтправитьЧерезАгента();
		
	Иначе 
		
		Если НРег(ТипДокумента) = "счет-фактура" Тогда
			
			МассивСтрок = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				Если МассивСтрок[0].КодСтатуса <> "active" И НЕ МассивСтрок[0].Тестовый Тогда
					ВызватьИсключение "Кабинет для отправки не настроен должным образом";
				КонецЕсли;
				
				Если ПустаяСтрока(МассивСтрок[0].edo_id) Тогда
					ВызватьИсключение "Не задано ФНС ИД отправителя!";
				КонецЕсли;

				Если ПустаяСтрока(МассивСтрок[0].token) Тогда
					ВызватьИсключение "Не удалось залогинится в кабинет ФНС";
				КонецЕсли;
				
				Если ПустаяСтрока(edo_id) Тогда
					ВызватьИсключение "Не задано ФНС ИД получателя!
					|Выберите аккаунт получетеля из списка";
				КонецЕсли;
				
				ДопПараметры.Вставить("ТокенДиадок", МассивСтрок[0].token);
				ДопПараметры.Вставить("ИдентификаторОрганизации", МассивСтрок[0].edo_id);
				ДопПараметры.Вставить("ИдентификаторКонтрагента", edo_id);
				
			КонецЕсли;
			
			СохранитьДокумент(АктивныйСертификат, ДопПараметры);
			
		Иначе
			
			СохранитьДокумент(, ДопПараметры);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьВФНС(Отпечаток, ТокенДиадок)

	Если ТокенДиадок = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ТокенДиадок) = Тип("ЭлементСпискаЗначений") Тогда
		ТокенДиадок = ТокенДиадок.Значение;
	КонецЕсли;
	
	API.SendInvoice(id, Box_id, Отпечаток, ТокенДиадок);

КонецПроцедуры

Функция ПолучитьНаименованиеКонтрагента(Контрагент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(ПустаяСтрока(Контрагент.НаименованиеПолное), Контрагент.Наименование, Контрагент.НаименованиеПолное);
	
	Поз = Найти(Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Наименование = СокрП(Сред(Наименование, Поз));
		Наименование = СтрЗаменить(Наименование, """", "");
	КонецЕсли;
	
	Возврат Наименование
	
КонецФункции

Процедура ПриИзмененииКонтрагента() Экспорт
	
	Если НЕ ЭтаФорма.ТолькоПросмотр И ЗначениеЗаполнено(Контрагент) Тогда
		
		КонтрагентСсылкаId = Получить_Код_АТИ(Контрагент);
		Если КонтрагентСсылкаId > 0 Тогда
			
			КонтрагентId = КонтрагентСсылкаId;
			ПриИзмененииКонтрагентID();
			
		Иначе
			
			КонтрагентНаименованиеОкончаниеВводаТекста(ЭлементыФормы.КонтрагентНаименование, ПолучитьНаименованиеКонтрагента(Контрагент), Неопределено, Ложь);
			
			ТекущийЭлемент = ЭлементыФормы.КонтрагентНаименование;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагентID() Экспорт	
	
	Если КонтрагентId > 0 Тогда
		
		Результат1С = API.Account(КонтрагентId);
		Если Результат1С = Неопределено Тогда
			
			КонтрагентId = 0;
			КонтрагентНаименование = "";
			Возврат;
			
		Иначе
			
			КонтрагентНаименование = Результат1С["name"]+" ("+Результат1С["ati_id"]+")";
		
			КонтрагентИНН = Формат(Результат1С["inn"], "ЧГ=0");
			КонтрагентКПП = Формат(Результат1С["kpp"], "ЧГ=0");
			
		КонецЕсли;
		
		ЗаполнитьКонтактыКонтрагента();
		ЗаполнитьСертификатыКонтрагента();
		
	Иначе
		
		КонтрагентНаименование = "";
		КонтактId = 0;
		КонтактНаименование = "";
		ЭлементыФормы.КонтактНаименование.СписокВыбора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактыКонтрагента()
	
	Если КонтрагентId > 0 Тогда
		
		Результат1С = API.Account(КонтрагентId);
		Если Результат1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Контакты = Результат1С["contacts"];
		ЭлементыФормы.КонтактНаименование.СписокВыбора.Очистить();
		
		Для Каждого Контакт Из Контакты Цикл
			ЭлементыФормы.КонтактНаименование.СписокВыбора.Добавить(Контакт["ati_id"], Контакт["name"]);
		КонецЦикла;
		
		Если ЭлементыФормы.КонтактНаименование.СписокВыбора.Количество()=1 Тогда
			КонтактНаименование = ЭлементыФормы.КонтактНаименование.СписокВыбора[0].Представление;
			ЭлементыФормы.КонтактНаименование.Значение = ЭлементыФормы.КонтактНаименование.СписокВыбора[0].Представление;
			КонтактId = ЭлементыФормы.КонтактНаименование.СписокВыбора[0].Значение;
		Иначе
			КонтактНаименование = "";
			КонтактId = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура НайтиВыбратьКонтрагента(КонтрId, КонтрИНН, КонтрНаименование)
	
	ТЗКонтрагентов = НайтиКонтрагента(КонтрId, КонтрИНН, КонтрНаименование);
	Если ТЗКонтрагентов = Неопределено ИЛИ ТЗКонтрагентов.Количество()=0 Тогда
		Возврат;
	ИначеЕсли ТЗКонтрагентов.Количество()>1 Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		Для Каждого СтрТЗ Из ТЗКонтрагентов Цикл
			СписокКонтрагентов.Добавить(СтрТЗ.Контрагент);
		КонецЦикла;
		ВыбранныйКонтрагент = ВыбратьИзСписка(СписокКонтрагентов, ЭлементыФормы.Контрагент, СписокКонтрагентов.НайтиПоЗначению(Контрагент));
		Если ВыбранныйКонтрагент <> Неопределено Тогда
			Контрагент = ВыбранныйКонтрагент.Значение;
		КонецЕсли;
	Иначе
		Контрагент = ТЗКонтрагентов[0].Контрагент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДокумента(ОбновлятьКЛ = Истина)
	
	Контакты = Новый Массив;
	Исходящий = Истина;
	
	Если ЗначениеЗаполнено(id) Тогда
		
		Если ОбновлятьКЛ Тогда
			ЗаполнитьКонтактыКонтрагента();
		КонецЕсли;
		
		СтруктураДокумента1С = API.Document(id);
		Если СтруктураДокумента1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		contragent = СтруктураДокумента1С["contragent"];
		Если ЗначениеЗаполнено(contragent) Тогда
			
			account = contragent["account"];
			КонтрагентНаименование = account["name"]+" ("+Формат(account["id"], "ЧГ=0")+")";
			КонтрагентId = account["id"];
			
			contact = contragent["contact"];
			Если ЗначениеЗаполнено(contact) И ОбновлятьКЛ Тогда
				КонтактID = contact["ati_id"];
				КонтактНаименование = contact["name"];
			КонецЕсли;
		КонецЕсли;
		
		ТипДокумента = СтруктураДокумента1С["doctype"];
		Описание = СтруктураДокумента1С["description"];
		
		Согласован			= СтруктураДокумента1С["is_approved"];
		Отклонен			= СтруктураДокумента1С["is_declined"];
		СтатусДокумента		= ?(СтруктураДокумента1С["is_asked_resolution"] = Истина, "Требует решения", "");
		МожетБытьОдобрен	= СтруктураДокумента1С["can_be_approved"];
		МожетБытьОтклонен	= СтруктураДокумента1С["can_be_declined"];
		ЕстьВложение		= СтруктураДокумента1С["has_attachments"];
		ЭтоЧерновик			= СтруктураДокумента1С["is_draft"];
		
		ПравоПодписи = СтруктураДокумента1С["can_be_signed"];
		
		МожетБытьОтправлен = СтруктураДокумента1С["can_be_sent"];

		Если ТипДокумента =	"Заказ услуги по оформлению пропусков в г. Москва" Тогда
			body = СтруктураДокумента1С["body"];
			Если ЗначениеЗаполнено(body) Тогда
				pass = body["pass"];
				Если ЗначениеЗаполнено(pass) Тогда
					СрокДействияПропуска = pass["duration"];
					ТипПропуска = pass["passtype"];
					ФормаОплаты = pass["paymentmethod"];
					ВладелецТС = pass["vehicleowner"];
				КонецЕсли;
				
				summary = body["summary"];
				Если ЗначениеЗаполнено(summary) Тогда
					customer = summary["customer"];
					Если ЗначениеЗаполнено(customer) Тогда
						РеквизитыЗаказчика = customer["accountdetails"];
						ДействуетНаОсновании = customer["actson"];
						НаименованиеЗаказчика = customer["companyname"];
						ОПФЗаказчика = customer["legalForm"];
						ПредставительЗаказчика = customer["representedby"];
						КонтактноеЛицоЗаказчика = customer["contactname"];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СтруктураДокумента1С["can_be_edited"]=Истина Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
		
		// Получим статус, если документа типа счет-фактура
		// Реализовано будет по-другому
		Если НРег(ТипДокумента) = "счет-фактура" Тогда
			
			Если ТипЗнч(АктивныйСертификатСтрока) = Тип("СтрокаТаблицыЗначений")
				И НЕ ПустаяСтрока(АктивныйСертификатСтрока.token) Тогда
				
				МассивID = Новый Массив;
				МассивID.Добавить(ID);
				
				Результат = API.DocumentStatus_Get(АктивныйСертификат, АктивныйСертификатСтрока.token, МассивID);
				Если Результат <> Неопределено Тогда
					Для каждого Элем Из Результат["statuses"] Цикл
						СтатусОбменаСчетамиФактурами = Элем.Значение["status_ru"];
						Прервать;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
				
		Подписанты = СтруктураДокумента1С["signers"];
		
		КомментарииМассив = СтруктураДокумента1С["comments"];
		Комментарии.Очистить();
		Для Каждого Коммент Из КомментарииМассив Цикл
			СтрКомментарий = Комментарии.Добавить();
			СтрКомментарий.Автор = Коммент["user"]["name"];
			
			СтрКомментарий.Дата = СтрокаВДату(Коммент["timestamp"]);
			Если Найти(СтрКомментарий.Комментарий, "{decline}") Тогда
				СтрКомментарий.Комментарий = СтрЗаменить(СтрКомментарий.Комментарий, "{decline}", "");
				СтрКомментарий.ПричинаОтклонения = Истина;
			КонецЕсли;
			attachment = Коммент["attachment"];
			Если ЗначениеЗаполнено(attachment) Тогда
				СтрКомментарий.Вложение = attachment["name"];
				СтрКомментарий.ФайлИмя = attachment["id"];
				СтрКомментарий.Комментарий = "Вложение";
			Иначе
				СтрКомментарий.Комментарий = Коммент["text"];
			КонецЕсли;
		КонецЦикла;
		Комментарии.Сортировать("Дата");
		
		Если Не ЕстьВложение Тогда
			API.ExportDoc(id);
			СтруктураДокумента1С = API.Document(id);
			Если СтруктураДокумента1С = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЕстьВложение = СтруктураДокумента1С["has_attachments"];
		КонецЕсли;
		
		Если ЕстьВложение Тогда
			file = СтруктураДокумента1С["file"];
			Если ЗначениеЗаполнено(file) Тогда
				ФайлID = file["id"];
				ФайлИмя = file["name"];
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлИмя) Тогда
			РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(ФайлИмя);
			Если ВРЕГ(РасширениеФайла)="XML" Тогда
				Формализованный = Истина;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ФайлИмя) Тогда
								
				Если НРег(РасширениеФайла) = "xml" ИЛИ НРег(РасширениеФайла) = "zip" Тогда
					
					АдресФайла = API.GetAttachment(id, ФайлID, РасширениеФайла, ФайлИмя);
					
					Если ПустаяСтрока(АдресФайла) Тогда
						Возврат;
					КонецЕсли;
					
					ОбъектФайл = Новый Файл(АдресФайла);
					Если НЕ ОбъектФайл.Существует() Тогда
						Возврат;
					КонецЕсли;
					
					//АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор);
					
					СтруктураРазбора = ВыполнитьРазборФайла(АдресФайла);
					
					Если СтруктураРазбора = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
					ЭлементыФормы.ДеревоРазбора.СоздатьКолонки();
					
					СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
					
					ОбработатьНенайденныеОбъекты()
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Исходящий = СтруктураДокумента1С["is_owner"];
		
		Если Исходящий Тогда
			ЭлементыФормы.НадписьДокумент.Заголовок = "Исходный документ";
		Иначе
			ЭлементыФормы.НадписьДокумент.Заголовок = "Загруженный документ";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлID) Тогда
			
			СписокПодписей = СтруктураДокумента1С["file"]["signs"];
			
			Если СписокПодписей <> Неопределено Тогда
				Для Каждого Элемент Из СписокПодписей Цикл
					
					Подписант = Элемент.Ключ;
					
					ПодписантID = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Подписант, ".")[0];
					
					ТекущаяПодпись = Элемент.Значение;
					ТекущийСертификат = Элемент.Значение["certificate"];
					
					components = ТекущийСертификат["components"];
					Если components <> Неопределено Тогда
						inn = components["inn"];
						Если ЗначениеЗаполнено(inn) Тогда
							ИННСертификата = inn;
						Иначе
							ИННСертификата = "";
						КонецЕсли;
					КонецЕсли;
					
					ИнфоОСертификате = 
					"Отпечаток: "+ТекущийСертификат["id"]+Символы.ПС+
					"Наименование: "+ТекущийСертификат["title"]+Символы.ПС+
					"Начало действия: "+ТекущийСертификат["valid_from"]+Символы.ПС+
					"Окончание действия: "+ТекущийСертификат["valid_until"]+Символы.ПС+
					?(ЗначениеЗаполнено(ИННСертификата), "ИНН: "+ИННСертификата+Символы.ПС,"")+
					"*************************************************************";
					
					Если Найти(ТекущаяПодпись["contact_id"], Формат(UserID, "ЧГ=0")) Тогда //наша подпись
						
						Если СтруктураДокумента1С["is_owner"] Тогда
							ПодписьОтправителяId = ПодписантID;
							ИнформацияОСертификатеОтправителя = ИнфоОСертификате;
						Иначе
							ПодписьПолучателяId = ПодписантID;
							ИнформацияОСертификатеПолучателя = ИнфоОСертификате;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИННСертификата) Тогда
							Организация = НайтиОрганизациюПоИНН(ИННСертификата);
						КонецЕсли;
						
					Иначе
						
						СертификатКонтрагента = ТекущийСертификат;
						
						Если НЕ СтруктураДокумента1С["is_owner"] Тогда
							ПодписьОтправителяId = ПодписантID;
							ИнформацияОСертификатеОтправителя = ИнфоОСертификате;
						Иначе
							ПодписьПолучателяId = ПодписантID;
							ИнформацияОСертификатеПолучателя = ИнфоОСертификате;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ИННСертификата) Тогда
							Контрагент = НайтиКонтрагентаПоИНН(ИННСертификата);
						КонецЕсли;
						
					КонецЕсли;
						
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ПревьюЗагружено = Ложь;
		
	Иначе
		
		Формализованный = Истина;
		МожетБытьОтправлен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТипДокумента1С()
	
	ЭтоСчетФактура = НРег(ТипДокумента) = "счет-фактура";
	ЭтоБухДокумент = ЭтоСчетФактура ИЛИ НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" ИЛИ НРег(ТипДокумента) = "счет";
	
	Если ЭтоСчетФактура Тогда
		
		ОписаниеТипа = ?(Исходящий, Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"),
			Новый ОписаниеТипов("ДокументСсылка.СчетФактураПолученный"));
		
	ИначеЕсли НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" Тогда
		
		ОписаниеТипа = ?(Исходящий, Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"),
			Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
		
	ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
		
		ОписаниеТипа = ?(Исходящий, Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"),
			Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
		
	КонецЕсли;
	
	Если ОписаниеТипа <> Неопределено Тогда
		ЭлементыФормы.ДокументСсылка.Значение = ОписаниеТипа.ПривестиЗначение(ДокументСсылка);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ФлагОтправка Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентId) Тогда
			Сообщить("Поле ""Контрагент ID"" не заполнено");
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтактId) Тогда
			Сообщить("Поле ""Контакт ID"" не заполнено");
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Описание) Тогда
			Сообщить("Поле ""Описание"" не заполнено");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаОбъекты()
	
	Если ЗначениеЗаполнено(Id) Тогда
		
		СтруктураИдентификатора = ПолучитьСтруктуруИдентификатора(ID);		
		
		Если Исходящий Тогда
			
			Если НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" Тогда
				
				ДокументСсылка = НайтиДокументПоДокИД("ПоступлениеТоваровУслуг", СтруктураИдентификатора.id);
				
			ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
				
				ДокументСсылка = НайтиДокументПоДокИД("СчетНаОплатуПокупателю", СтруктураИдентификатора.id);
				
			ИначеЕсли ЭтоСчетФактура Тогда	
				
				ДокументСсылка = НайтиДокументПоДокИД("СчетФактураВыданный", СтруктураИдентификатора.id);
				
			КонецЕсли;
			
		Иначе // Входящий
			
			Если НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" Тогда
				
				ДокументСсылка = НайтиДокументПоДокИД("ПоступлениеТоваровУслуг", СтруктураИдентификатора.id);
				
			ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
				
				ДокументСсылка = НайтиДокументПоДокИД("ПлатежноеПоручение", СтруктураИдентификатора.id);
				
			ИначеЕсли ЭтоСчетФактура Тогда	
				
				ДокументСсылка = НайтиДокументПоДокИД("СчетФактураПолученный", СтруктураИдентификатора.id);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СертификатКонтрагента) Тогда
			
			title = СертификатКонтрагента["title"];
			Если ЗначениеЗаполнено(title) Тогда
				НаименованиеПоСертификату = СтрЗаменить(СтрЗаменить(title, "“", """"), "”","""");
				Если ЗначениеЗаполнено(НаименованиеПоСертификату) Тогда
					НайденныеКонтрагенты = НайтиКонтрагента(НаименованиеПоСертификату);
					
					НайденныеКонтрагенты = НайтиКонтрагента(НаименованиеПоСертификату);
					Если ЗначениеЗаполнено(НайденныеКонтрагенты) И НайденныеКонтрагенты.Количество()=1 Тогда
						Контрагент = НайденныеКонтрагенты[0].Контрагент;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(КонтрагентId) Тогда
			
			НайденныеКонтрагенты = НайтиКонтрагента(КонтрагентId);
			Если НайденныеКонтрагенты <> Неопределено И НайденныеКонтрагенты.Количество()=1 Тогда
				Контрагент = НайденныеКонтрагенты[0].Контрагент;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураРазбора <> Неопределено Тогда
		
		Если Организация.Пустая() Тогда
			Организация = ПолучитьСсылкуРеквизита(ДеревоРазбора, СтруктураРазбора.СтрокаОбъекта, "Организация")
		КонецЕсли;
		
		Если Контрагент.Пустая() Тогда
			Контрагент = ПолучитьСсылкуРеквизита(ДеревоРазбора, СтруктураРазбора.СтрокаОбъекта, "Контрагент")
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Массив = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
		Если Массив.Количество() > 0 Тогда
			Организация = Массив[0].ОрганизацияСсылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоДокументу()
	
	Номер = ДокументСсылка.Номер;
	Дата = ДокументСсылка.Дата;
	Описание = Строка(ДокументСсылка)+" (версия от "+ТекущаяДатаСеанса()+")";
	
	Если Контрагент <> ДокументСсылка.Контрагент Тогда
		
		Контрагент = ДокументСсылка.Контрагент;
		ПриИзмененииКонтрагента();
		
	КонецЕсли;
	
	Организация = ДокументСсылка.Организация;
	
КонецПроцедуры

//Изменено: artem.b 15.07.2015
//Функция ОбработатьНенайденныеОбъекты(ДеревоРазбора, СтрокаОбъекта, Отказ)
//---- Заменено на: ----
Функция ОбработатьНенайденныеОбъекты()
/// artem.b 15.07.2015
	
	ИнициализироватьДеревоНенайденных(ДеревоНенайденных);
	
	Если НенайденныеОбъекты.Колонки.Найти("Реквизиты") = Неопределено Тогда
		НенайденныеОбъекты.Колонки.Добавить("Реквизиты");		
	КонецЕсли;                              
	
	
	Для Каждого СтрТип Из ДеревоРазбора.Строки Цикл
		
		Если СтрТип.ТипОбъекта = "ЭлектронныеДокументы"
			ИЛИ СтрТип.ТипОбъекта = "СписокОписаний" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТипНовая = Неопределено;
		
		Для Каждого СтрОбъект Из СтрТип.Строки Цикл
			
			Если СтрТип.ТипОбъекта = "НоменклатураПоставщиков" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрТип.ТипОбъекта = "БанковскиеСчетаКонтрагентов" ИЛИ СтрТип.ТипОбъекта = "БанковскиеСчетаОрганизаций" Тогда
				
				СтрОбъект.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета",
					"НомерСчета", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "НомерСчета"),
					ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "Владелец"));
					
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрОбъект.СсылкаНаОбъект) И					
					СтрТип.ТипОбъекта = "ЕдиницыИзмерения" Тогда
				
				СтрОбъект.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторЕдиницИзмерения",
					"Наименование", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "Наименование"));		
					
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрОбъект.СсылкаНаОбъект) И					
					СтрТип.ТипОбъекта = "Номенклатура" Тогда
				
				СтрОбъект.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъектПоРеквизиту("Номенклатура",
					"Наименование", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "Наименование"));		
					
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрОбъект.СсылкаНаОбъект) И					
					СтрТип.ТипОбъекта = "НоменклатураПоставщиков" Тогда
				
				СтрОбъект.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъектПоРеквизиту("НоменклатураПоставщиков",
					"Наименование", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "Наименование"));		
					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрОбъект.СсылкаНаОбъект) Тогда
				
				Если СтрТип.ТипОбъекта = "БанковскиеСчетаКонтрагентов" Тогда
					
					СтрОбъект.СсылкаНаОбъект = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъектПоРеквизиту("БанковскиеСчета",
					"НомерСчета", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "НомерСчета"),
					ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрОбъект, "Владелец"));		
					
				КонецЕсли;	
				
				Если СтрТипНовая = Неопределено Тогда
					СтрТипНовая = ДеревоНенайденных.Строки.Добавить();
					СтрТипНовая.Представление = СтрТип.ТипОбъекта;
					СтрТипНовая.ТипЗначения = СтрОбъект.ОписаниеТипа;
				КонецЕсли;
				
				СтрОбъектНовая = СтрТипНовая.Строки.Добавить();
				СтрОбъектНовая.Представление = СтрОбъект.ОписаниеОбъекта;
				СтрОбъектНовая.Индекс = СтрОбъект.ИндексСтроки;
				СтрОбъектНовая.ТипЗначения = СтрОбъект.ОписаниеТипа;
				
				РеквизитыОбъекта = Новый Структура;
				Для Каждого СтрРеквизит Из СтрОбъект.Строки Цикл
					
					ЗначениеРеквизита = СтрРеквизит.ЗначениеРеквизита;
					
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") И Найти(СтрРеквизит.ЗначениеРеквизита, "_") Тогда
						Строка = ДеревоРазбора.Строки.Найти(СтрРеквизит.ЗначениеРеквизита, "ИндексСтроки", Истина);
						Если Строка <> Неопределено Тогда
							
							Ссылка = Строка.СсылкаНаОбъект;
							
							Если ЗначениеЗаполнено(Ссылка) Тогда
								ЗначениеРеквизита = Ссылка;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					РеквизитыОбъекта.Вставить(СтрРеквизит.Реквизит, ЗначениеРеквизита);
					
					Если СтрРеквизит.Реквизит = "Владелец" Тогда
						СтрОбъектНовая.Владелец = ЗначениеРеквизита;
					КонецЕсли;
					
					Если СтрРеквизит.Реквизит = "ПолноеНаименование" Тогда
						СтрОбъектНовая.Представление = СтрРеквизит.ЗначениеРеквизита;
					КонецЕсли;
					
				КонецЦикла;
				
				СтрОбъектНовая.Реквизиты = РеквизитыОбъекта;
				СтрОбъектНовая.РеквизитыСтрокой = ПредставлениеСтруктуры(РеквизитыОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//ЭлементыФормы.ДеревоНенайденных.СоздатьКолонки();
	//Для Каждого Колонка Из ЭлементыФормы.ДеревоНенайденных.Колонки Цикл
	//	Колонка.ЭлементУправления.КнопкаОткрытия = Истина;
	//КонецЦикла;
	
КонецФункции

Процедура СформироватьДокументВБазе()
	
	Отказ = Ложь;
	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	
	//ОбработатьНенайденныеОбъекты(ДеревоРазбора, СтрокаОбъекта, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИдентификатора = ПолучитьСтруктуруИдентификатора(ID);
	
	Если Исходящий Тогда
		//Для исходящих ничего не нужно
	Иначе
		
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			СтруктураРазбора.Вставить("id", id);
			ДокументСсылка = СформироватьПлатежноеПоручение(СтруктураРазбора);
			Сохранить_Код_АТИ_Документа(ДокументСсылка, СтруктураИдентификатора.id);
			
		Иначе
			
			ИмяТаблицы = МапЭДИНашихДокументов.Получить(СтрокаОбъекта.ВидЭД);
			
			Если ИмяТаблицы = Неопределено Тогда
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный вид ЭД %1 не поддерживается, документ не сформирован", СтрокаОбъекта.ВидЭД));
				Возврат;
			КонецЕсли;
			
			НайденныйДокумент = НайтиДокументПоДокИД(ИмяТаблицы, СтруктураИдентификатора.id);
			
			ДокументСсылка = СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, НайденныйДокумент);
			
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				ДокументСсылка = НайденныйДокумент;
			Иначе
				Сохранить_Код_АТИ_Документа(ДокументСсылка, СтруктураИдентификатора.id);
			КонецЕсли;

		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			ДокументСсылка.ПолучитьФорму().Открыть();		
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеВидимостьюДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ДобавитьКомментарий(Комментарий = "")
	
	ФормаКомментария = ПолучитьФорму("ФормаКомментария", ЭтаФорма);
	ФормаКомментария.Комментарий = Комментарий;
	СтруктураВозврата = ФормаКомментария.ОткрытьМодально();
	Если СтруктураВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Комментарий = СтруктураВозврата.Комментарий;
	Если СтруктураВозврата.Свойство("ФайлИмя") Тогда
		КомментарийФайл = СтруктураВозврата.ФайлИмя;
	Иначе
		КомментарийФайл = "";
	КонецЕсли;
	Если (ЗначениеЗаполнено(Комментарий) ИЛИ ЗначениеЗаполнено(КомментарийФайл)) И ЗначениеЗаполнено(id) Тогда
		API.Comment(id, Комментарий, КомментарийФайл);
		ОбновитьДанныеДокумента();
	ИначеЕсли ЗначениеЗаполнено(Комментарий) Тогда
		СтрКомментарий = Комментарии.Добавить();
		СтрКомментарий.Комментарий = Комментарий;
		СтрКомментарий.ФайлИмя = КомментарийФайл;
		СтрКомментарий.Автор = ВладелецФормы.КонтактныеЛица[0].Наименование;
		СтрКомментарий.Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуКонтрагента(КонтрагентId)
	
	ФормаКонтрагента = ПолучитьФорму("ФормаКонтрагента", ВладелецФормы);
	ФормаКонтрагента.ID = КонтрагентId;
	ФормаКонтрагента.ОткрытьМодально();

КонецПроцедуры

//служебная функция для автотеста
Процедура ВыполнитьКоманду(ТекстКоманды) Экспорт
	Выполнить(ТекстКоманды);
КонецПроцедуры

Функция ЗаполнитьСтруктуруОтправкиДляАгента()
	
	Doc_ID = СгенерироватьИД();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("doc_id", Doc_ID);
	
	СтруктураПараметров.Вставить("doc_recipient_id", Формат(КонтрагентId, "ЧГ=0"));
	СтруктураПараметров.Вставить("doc_recipient_contact", КонтактId);
	СтруктураПараметров.Вставить("doc_recipient_inn", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Контрагент, "ИНН"));
	
	СтруктураПараметров.Вставить("signer_inn", ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИНН"));
	
	СтруктураПараметров.Вставить("send", Истина);
	СтруктураПараметров.Вставить("is_waiting", Истина);
	СтруктураПараметров.Вставить("is_invoice", ЭтоСчетФактура);
	
	СтруктураПараметров.Вставить("description", Описание);
	СтруктураПараметров.Вставить("doctype", ТипДокумента);
	
	СтруктураПараметров.Вставить("date", Формат(Дата, "ДФ=yyyy-MM-dd"));
	СтруктураПараметров.Вставить("number", СокрЛП(Номер));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ОтправитьЧерезАгента()
	
	Если Ложь И ЭтоЗаявка Тогда
		СтруктураДанных = СформироватьФайлЗаявки(ДокументСсылка);
		ФайлИмя = СтруктураДанных.ИмяФайла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) ИЛИ ЗначениеЗаполнено(ФайлИмя) Тогда
		
		Если ПустаяСтрока(КаталогАгента) Тогда
			Сообщить("Не заполнен ""Каталог агента""");
			Возврат;
		КонецЕсли;
		
		ОбъектКаталог = Новый Файл(КаталогАгента);
		Если НЕ ОбъектКаталог.Существует() Тогда
			Сообщить("Неверное задан каталог АТИ-Доки Агента");
			Возврат;
		КонецЕсли;
		
		КаталогДокумента = КаталогАгента;//+"\"+Doc_ID;
		Каталог = Новый Файл(КаталогДокумента);
		Если Каталог.Имя <> "Outbox" Тогда
			КаталогДокумента = КаталогДокумента + "\" + "Outbox";
		КонецЕсли;
		
		СоздатьКаталог(КаталогДокумента);
		
    	СтруктураПараметров = ЗаполнитьСтруктуруОтправкиДляАгента();
		Doc_ID = СтруктураПараметров.Doc_ID;
		
		МассивФайлов = Новый Массив;
		
		Если ЭтоСчетФактура Тогда
			
			МассивСтрок = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ТокенДиадок", МассивСтрок[0].token);
				ДопПараметры.Вставить("ИдентификаторОрганизации", МассивСтрок[0].edo_id);
				ДопПараметры.Вставить("ИдентификаторКонтрагента", edo_id);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоБухДокумент И ЗначениеЗаполнено(ДокументСсылка) И ПустаяСтрока(ФайлИмя) Тогда
			
			Если Формализованный Тогда // XML
				
				ФайлXML = СформироватьДокумент1С(ДокументСсылка, Ложь, ДопПараметры);
				
				Если ФайлXML = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				uid = Строка(Новый УникальныйИдентификатор);
				
				Файл = Новый Файл(ФайлXML);
				ПутьКФайлу = КаталогДокумента+"\"+Файл.Имя;
				
				ПереместитьФайл(ФайлXML, ПутьКФайлу);
				
				СтруктураXML = Новый Структура;
				СтруктураXML.Вставить("id", uid);
				СтруктураXML.Вставить("filename", Файл.Имя);
				МассивФайлов.Добавить(СтруктураXML);
				
			Иначе // Печатная форма в PDF
				
				ФайлPDF = ПечатьДокумента(ДокументСсылка, ID);
				uid = Строка(Новый УникальныйИдентификатор);
				
				ПутьКФайлу = КаталогДокумента+"\"+uid+".pdf";
				
				ПереместитьФайл(ФайлPDF, ПутьКФайлу);
				СтруктураPDF = Новый Структура;
				СтруктураPDF.Вставить("id", uid);
				СтруктураPDF.Вставить("filename", uid+".pdf");
				МассивФайлов.Добавить(СтруктураPDF);
				
			КонецЕсли;
		
		Иначе
			
			uid = Строка(Новый УникальныйИдентификатор);
			
			ФайлРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлИмя);
			ПутьКФайлу = КаталогДокумента+"\"+uid+"."+ФайлРасширение;
			
			КопироватьФайл(ФайлИмя, ПутьКФайлу);
			
			Структура = Новый Структура;
			Структура.Вставить("id", uid);
			Структура.Вставить("filename", uid+"."+ФайлРасширение);
			МассивФайлов.Добавить(Структура);
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("files", МассивФайлов);
						
		Файл = Новый Файл(ПутьКФайлу);
		
		API.СформироватьКонфигурационныйФайл(СтруктураПараметров, КаталогДокумента+"\"+Файл.ИмяБезРасширения+".adacom");
		
		Сообщить("Отправлен документ "+ПутьКФайлу);
		
		Закрыть(Истина);

	Иначе
		
		Сообщить("Не выбран документ 1С");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСертификатыКонтрагента()

	Если КонтрагентID = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСертификатов = API.Certificates(КонтрагентId);
	
	Если КоллекцияСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатыПолучателя.Очистить();
	ЭлементыФормы.BoxID.СписокВыбора.Очистить();
	
	СтатусКабинетаДиадок = "";
	
	Для каждого ЭлемСертификат Из КоллекцияСертификатов Цикл
		
		Если Истина ИЛИ ЭлемСертификат["integrator"]["status_code"] = "active" Тогда
			
			Если ПустаяСтрока(ЭлемСертификат["integrator"]["box_id"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлемСертификат["valid_until"]) = Тип("Дата") И ЭлемСертификат["valid_until"] < НачалоДня(ТекущаяДата()) Тогда
				Продолжить;
			КонецЕсли;
			
			Стр = СертификатыПолучателя.Добавить();
			Стр.Отпечаток = ЭлемСертификат["id"];
			Стр.box_id = ЭлемСертификат["integrator"]["box_id"];
			Стр.edo_id = ЭлемСертификат["integrator"]["edo_id"];
			
			ЭлементыФормы.BoxID.СписокВыбора.Добавить(Стр.box_id, ЭлемСертификат["title"]);
			
			СтатусКабинетаДиадок = "Есть кабинет в ФНС";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СертификатыПолучателя.Количество() = 0 Тогда	
		
		МассивСтрок = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Если ПустаяСтрока(КонтрагентИНН) Тогда
				Структура = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент, "ИНН, КПП");
				КонтрагентИНН = Структура.ИНН;
				КонтрагентКПП = Структура.КПП;
			КонецЕсли;
			
			Если ПустаяСтрока(КонтрагентИНН) Тогда
				Возврат;
			КонецЕсли;
			
			Ответ = API.Counteragents_Search(КонтрагентИНН, КонтрагентКПП, МассивСтрок[0].token, ВладелецФормы.АктивныйСертификат);
			
			Если Ответ = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ЭлементыФормы.BoxID.СписокВыбора.Очистить();
			
			Для Каждого ЭлемКонтрагент Из Ответ Цикл
				
				Для Каждого Ящик Из ЭлемКонтрагент["Boxes"] Цикл
					
					Стр = СертификатыПолучателя.Добавить();
					Стр.Отпечаток = Ящик["BoxId"];
					Стр.box_id = Ящик["BoxId"];
					Стр.edo_id = ЭлемКонтрагент["FnsParticipantId"];
					
					ЭлементыФормы.BoxID.СписокВыбора.Добавить(Ящик["BoxId"], Ящик["Title"])
					
				КонецЦикла;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СертификатыПолучателя.Количество() = 1 Тогда
		
		Стр = СертификатыПолучателя[0];
		
		Box_id = Стр.box_id;
		edo_id = Стр.edo_id;
		
		УправлениеВидимостьюДоступностьюЭлементовФормы();
		
	КонецЕсли
		
КонецПроцедуры 

Функция УстановитьФлажки(Коллекция, Флаг)
	
	Для Каждого Стр Из Коллекция.Строки Цикл
		Стр.Активно = Флаг;
		УстановитьФлажки(Стр, Флаг)
	КонецЦикла;
	
КонецФункции

Процедура ОтобразитьПревью()
	
	Файл = Новый Файл(АдресФайла);
	Если ПустаяСтрока(АдресФайла) ИЛИ НЕ Файл.Существует() Тогда
		АдресФайла = API.GetAttachment(id, ФайлID, ФайлИмя);
		РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(АдресФайла);
	КонецЕсли;
	
	Если НРег(РасширениеФайла) = "zip" Тогда
		
		МаксРазмер = 0;
		#Если Клиент Тогда
			ИмяВременногоКаталога = РабочийКаталогДанныхПользователя()+Строка(Новый УникальныйИдентификатор);
			СоздатьКаталог(ИмяВременногоКаталога);
			РаспаковатьАрхивРекурсивно(Файл, ИмяВременногоКаталога);
			МассивФайлов = НайтиФайлы(ИмяВременногоКаталога, "*.*");
			Для Каждого НайденныйФайл Из МассивФайлов Цикл
				//пока тупо по размеру ищем
				Если НайденныйФайл.Размер()>МаксРазмер Тогда
					Файл = НайденныйФайл.ПолноеИмя;
					МаксРазмер = НайденныйФайл.Размер();
				КонецЕсли;
			КонецЦикла;
		#КонецЕсли
		
		Если МаксРазмер=0 Тогда
			//видимо ничего путного не нашли или не искали
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	ЭлементыФормы.ПревьюPDF.Видимость = Ложь;
	ЭлементыФормы.ПолеHTMLДокументаXML.Видимость = Ложь;
	
	Если НРег(РасширениеФайла) = "xls" ИЛИ НРег(РасширениеФайла) = "xlsx" Тогда
		
		ЭлементыФормы.ПревьюPDF.Видимость = Истина;
		ЭлементыФормы.ПревьюPDF.Прочитать(АдресФайла);
		
	ИначеЕсли НРег(РасширениеФайла) = "xml" Тогда
		
		ЭлементыФормы.ПолеHTMLДокументаXML.Видимость = Истина;
		ЭлементыФормы.ПолеHTMLДокументаXML.Перейти(АдресФайла);
		
	ИначеЕсли НРег(РасширениеФайла) = "txt" Тогда
		
		ЗапуститьПриложение("notepad.exe " + АдресФайла,, Истина);
		
	ИначеЕсли НРег(РасширениеФайла) = "bmp" ИЛИ РасширениеФайла = "png" ИЛИ РасширениеФайла = "jpg" ИЛИ РасширениеФайла = "gif" Тогда
		
		ЗапуститьПриложение(АдресФайла,, Истина);
		
	ИначеЕсли НРег(РасширениеФайла) = "doc" ИЛИ РасширениеФайла = "docx" ИЛИ РасширениеФайла = "rtf" Тогда
		
		Попытка
			ЗапуститьПриложение(АдресФайла,, Истина)  
		Исключение
			Сообщить("Не удалось отобразить документ. Возможно, в системе не установлено приложение для открытие файлов данного типа.");
		КонецПопытки;
		
	Иначе
		
		ЗапуститьПриложение("explorer.exe " + АдресФайла,,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область УправлениеВнешнимВидом

Процедура УстановитьЗаголовокФормы()
	Если ЗначениеЗаполнено(id) Тогда
		//Заголовок = "Документ № "+id;
		//Заголовок = Описание;
		Заголовок = ТипДокумента+" №"+Номер+" от "+Формат(Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Заголовок = "Отправка документа";
	КонецЕсли;
	Если Подписан Тогда
		Заголовок = Заголовок + " (подписан)";
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеВидимостьюДоступностьюЭлементовФормы()
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(id);
	
	Если Подписан Тогда
		ЭлементыФормы.ДокументСсылка.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.СформироватьДокументВБазе.Видимость = Ложь;
	
	ЭлементыФормы.КнопкаСоздатьКонтрагент.Доступность = НЕ Подписан И НЕ ЗначениеЗаполнено(Контрагент);
	ЭлементыФормы.КнопкаСохранитьID.Доступность = НЕ Подписан;
			
	Если Исходящий Тогда
		
		ЭлементыФормы.НадписьКонтрагентATI.Заголовок = "Получатель (код АТИ):";
		Если ОтправлятьЧерезАгента И НЕ ПустаяСтрока(КаталогАгента) Тогда 
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодписатьИОтправить.Текст = "Подписать и отправить через Агент";
		Иначе
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодписатьИОтправить.Текст = "Подписать и отправить";
		КонецЕсли;
		
		Если (НРег(ТипДокумента) = "счет" ИЛИ НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" ИЛИ ЭтоСчетФактура) Тогда
			ЭлементыФормы.НадписьДокумент.Заголовок = "Документ 1С";
			ЭлементыФормы.ДокументСсылка.Видимость = Истина;
			ЭлементыФормы.ФайлИмя.Видимость = Ложь;
			
			Если МожетБытьОтправлен Тогда
				ЭлементыФормы.pdf.Видимость = Истина;
				ЭлементыФормы.xml.Видимость = Истина;
			Иначе 
				 ЭлементыФормы.Pdf.Видимость = Ложь; 
				 ЭлементыФормы.xml.Видимость = Ложь;
			КонецЕсли;
			
		Иначе
			ДокументСсылка = Неопределено;
			ЭлементыФормы.НадписьДокумент.Заголовок = "Файл";
			ЭлементыФормы.ДокументСсылка.Видимость = Ложь;
			ЭлементыФормы.ФайлИмя.Видимость = Истина;
			ЭлементыФормы.Pdf.Видимость = Ложь;
			ЭлементыФормы.xml.Видимость = Ложь;
			
			Формализованный = Ложь;
		КонецЕсли;
	
	Иначе //входящий
		
		ЭлементыФормы.ЗапроситьРешениеПоДокументу.Видимость = Ложь;
		
		ЭлементыФормы.НадписьКонтрагентATI.Заголовок = "Отправитель (код АТИ):";
				
		ЭлементыФормы.Pdf.Видимость = Ложь;
		ЭлементыФормы.xml.Видимость = Ложь;
		
		Если (НРег(ТипДокумента) = "счет" ИЛИ НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" ИЛИ ЭтоСчетФактура) И Формализованный Тогда
			
			ЭлементыФормы.НадписьДокумент.Заголовок = "Документ 1С";
			ЭлементыФормы.ДокументСсылка.Видимость = Истина;
			ЭлементыФормы.ФайлИмя.Видимость = Ложь;
			
			ЭлементыФормы.СформироватьДокументВБазе.Видимость = Истина;
			
		Иначе
	
			ЭлементыФормы.ДокументСсылка.Видимость = Ложь;
			ЭлементыФормы.НадписьДокумент.Заголовок = "Файл:";
			ЭлементыФормы.ФайлИмя.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Печать.Доступность = Формализованный;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Утвердить.Доступность = МожетБытьОдобрен;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Отклонить.Доступность = МожетБытьОтклонен;
	ЭлементыФормы.КоманднаяПанельКомментарии.Кнопки.Добавить.Доступность = ЭтоНовый;
	
	Если НЕ ПравоПодписи ИЛИ Подписан ИЛИ Отклонен Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Подписать.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Подписать.Доступность = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность = МожетБытьОтправлен ИЛИ ЭтоНовый;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Отправить.Доступность = МожетБытьОтправлен ИЛИ ЭтоНовый;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодписатьИОтправить.Доступность = МожетБытьОтправлен ИЛИ ЭтоНовый;

	Если НЕ ЗначениеЗаполнено(ПодписьОтправителяId) Тогда
		ЭлементыФормы.НадписьПодписьОтправителя.Видимость = Ложь;
		ЭлементыФормы.КнопкаСкачатьПодписьОтправителя.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодписьПолучателяId) Тогда
		ЭлементыФормы.НадписьПодписьПолучателя.Видимость = Ложь;
		ЭлементыФормы.КнопкаСкачатьПодписьПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	СписокРасширений = Новый Массив();
	//СписокРасширений.Добавить("pdf");//Удалено: нативно читать PDF не умеем
	СписокРасширений.Добавить("xml");
	СписокРасширений.Добавить("zip");
	СписокРасширений.Добавить("txt");
	СписокРасширений.Добавить("png");
	СписокРасширений.Добавить("jpg");
	СписокРасширений.Добавить("bmp");
    СписокРасширений.Добавить("gif");
	СписокРасширений.Добавить("doc");
	СписокРасширений.Добавить("docx");
	СписокРасширений.Добавить("xls");
	СписокРасширений.Добавить("xlsx");
	СписокРасширений.Добавить("rtf");
	
	Если ЗначениеЗаполнено(ФайлИмя) Тогда
		Для Каждого Элемент Из СписокРасширений Цикл 
			Если СписокРасширений.Найти(РасширениеФайла)= Неопределено Тогда
				ЭлементыФормы.ОсновнаяПанель.Страницы.Просмотр.Видимость = Ложь;
			Иначе  
				ЭлементыФормы.ОсновнаяПанель.Страницы.Просмотр.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтоСчетФактура И Исходящий Тогда
		
		ЭлементыФормы.ПанельBoxID.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Сохранить.Доступность = Ложь;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Отправить.Доступность = НЕ ПустаяСтрока(Box_id);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодписатьИОтправить.Доступность = НЕ ПустаяСтрока(Box_id);
		
	Иначе
		
		ЭлементыФормы.ПанельBoxID.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	КонецЕсли;

	ЭлементыФормы.НадписьСтатусОбменаСчетамиФактурами.Видимость = ЭтоСчетФактура;
	ЭлементыФормы.СтатусОбменаСчетамиФактурами.Видимость = ЭтоСчетФактура;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДеревоНенайденных.Видимость = НЕ Исходящий И ТипЗнч(ДеревоРазбора) = Тип("ДеревоЗначений");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормыКлиент

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбновитьДанныеДокумента();
	ЗаполнитьСертификатыКонтрагента();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ПустаяСтрока(ВерсияФормата) Тогда
		ВерсияФормата = "1";
	КонецЕсли;
	
	Если Дата = '00010101' Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	ЭтоЗаявка = (НРег(ТипДокумента) = "договор-заявка"
		ИЛИ НРег(ТипДокумента) = "заявка"
		ИЛИ НРег(ТипДокумента) = "заказ"
		ИЛИ НРег(ТипДокумента) = "заказ (договор-заявка)");

	Для каждого Стр Из ТипыДокументов Цикл
		ЭлементыФормы.ТипДокумента.СписокВыбора.Добавить(Стр.Наименование, Стр.Наименование);
	КонецЦикла;
	ЭлементыФормы.ТипДокумента.СписокВыбора.СортироватьПоПредставлению();
	
	УстановитьТипДокумента1С();

	УправлениеВидимостьюДоступностьюЭлементовФормы();		
	УстановитьЗаголовокФормы();
		
	ЗаполнитьСсылкиНаОбъекты();
	
	ДанныеИзменены = Истина;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Закрыть(ДанныеИзменены);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

Процедура КомандаСохранить(Кнопка)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьДокумент(, Новый Структура("ПодписыватьДокумент, Отправлять, ТипДокумента", Ложь, Ложь, НРег(ТипДокумента)));
	МожетБытьОтправлен = Истина;
	ОбновитьДанныеДокумента(Ложь);
	Модифицированность = Ложь;
	УправлениеВидимостьюДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура КомандаОтправить(Кнопка)
	
	ОтправитьДокумент(Ложь);
	
КонецПроцедуры

Процедура КомандаПодписатьИОтправить(Кнопка)
	
	ОтправитьДокумент(Истина);
	
КонецПроцедуры

Процедура КомандаУтвердить(Кнопка)
	API.Approve(id);
	ОбновитьДанныеДокумента();
КонецПроцедуры

Процедура КомандаОтклонить(Кнопка)
	Причина = "";
	ВвестиСтроку(Причина, "Укажите причину отклонения");
	Если ЗначениеЗаполнено(Причина) Тогда
		Причина = Причина + Символы.ПС + "{Decline}";
		Если API.Decline(id, Причина) Тогда
			Закрыть(Истина);
		КонецЕсли;
	КонецЕсли;
	ОбновитьДанныеДокумента();
	УправлениеВидимостьюДоступностьюЭлементовФормы();
КонецПроцедуры

Процедура КомандаПодписать(Кнопка)
	
	ДопПараметры = Новый Структура("ЗакрытьФорму, ПодписыватьДокумент, ТипДокумента", Ложь, Истина, НРег(ТипДокумента));
	
	СертификатСсылка = ВладелецФормы.ПолучитьАктивныйСертификат();
	Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыЭЦП") И НЕ СертификатСсылка.Пустая() Тогда
		ПодписатьДокументЗавершение(СертификатСсылка, ДопПараметры);
	Иначе
		ПодписатьДокумент(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандаСформироватьДокументВБазе(Кнопка)
	
	СформироватьДокументВБазе();
	
КонецПроцедуры

Процедура КомандаПечать(Кнопка)
	
	Файл = Новый Файл(АдресФайла);
	Если ПустаяСтрока(АдресФайла) ИЛИ НЕ Файл.Существует() Тогда
		АдресФайла = API.GetAttachment(id, ФайлID, ФайлИмя);
		РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(АдресФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресФайла) Тогда
		
		Если ВРЕГ(РасширениеФайла) = "XML" Тогда
			
			Попытка
				
				СтруктураРазбора = ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(АдресФайла);
				Если ЗначениеЗаполнено(СтруктураРазбора) Тогда
					
					Если НРег(ТипДокумента) = "акт" Тогда
						
						ТабличныйДокумент = СформироватьАктАТИ(СтруктураРазбора, id, ИнформацияОСертификатеОтправителя, ИнформацияОСертификатеПолучателя);					
						
					ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
						
						ТабличныйДокумент = СформироватьСчетАТИ(СтруктураРазбора, id, ИнформацияОСертификатеОтправителя, ИнформацияОСертификатеПолучателя);
						
					Иначе
						
						ТабличныйДокумент = ЭлектронныеДокументыВнутренний.ПечатнаяФормаЭД(СтруктураРазбора, ?(Исходящий, Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий));						
					КонецЕсли;
					
					УниверсальныеМеханизмы.НапечататьДокумент(ТабличныйДокумент);   
						
				КонецЕсли;
					
			Исключение
				Сообщить("Не удалось напечатать файл: "+АдресФайла);
			КонецПопытки;
		Иначе
		    Сообщить("Функция печати поддерживается только для документов типа 1С");
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

Процедура КомандаДобавитьКомментарий(Кнопка)
	
	ДобавитьКомментарий();
	
КонецПроцедуры

Процедура КомандаОтветитьНаКомментарий(Кнопка)
	
	ТекДанные = ЭлементыФормы.ТабличноеПолеКомментарии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДобавитьКомментарий("[i]"+ТекДанные.Комментарий+"[/i]"+Символы.ПС);
	Иначе
		Сообщить("Не выбран комментарий для ответа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементов

Процедура ФормализованныйПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюЭлементовФормы();
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	ПриИзмененииКонтрагента();
КонецПроцедуры

Процедура КонтрагентНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КонтрагентId = ВыбранноеЗначение["id"];
		Элемент.Значение = ВыбранноеЗначение["name"]+" ("+ВыбранноеЗначение["id"]+")";
		
		Результат1С = API.Account(КонтрагентId);
		КонтрагентИНН = Формат(Результат1С["inn"], "ЧГ=0");
		КонтрагентКПП = Формат(Результат1С["kpp"], "ЧГ=0");

		ЗаполнитьКонтактыКонтрагента();
		
		Если ЭтоСчетФактура Тогда
			ЗаполнитьСертификатыКонтрагента();
		КонецЕсли;
		
	КонецЕсли;
	
	НайтиВыбратьКонтрагента(КонтрагентId, КонтрагентИНН, КонтрагентНаименование);	
	
КонецПроцедуры

Процедура КонтрагентНаименованиеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат
	КонецЕсли;
	
	//СтандартнаяОбработка = Ложь;
	
	Результат1С = API.Search(Текст);
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Новый СписокЗначений;
	Для каждого НайденныйКонтрагент Из Результат1С Цикл
		
		СтатусКабинетаДиадок = "";
		
		Добавлять = Истина;
		Если ТипДокумента = "Счет-фактура" Тогда
	        Добавлять = Истина ИЛИ (НайденныйКонтрагент["has_diadoc_cabinet"] = Истина);
		КонецЕсли;
		
		Если Добавлять Тогда
			Значение.Добавить(НайденныйКонтрагент, НайденныйКонтрагент["name"]+" (Код: "+НайденныйКонтрагент["id"]+")");
		КонецЕсли;
		
		Если Результат1С.Количество() = 1 Тогда
			КонтрагентНаименованиеОбработкаВыбора(ЭлементыФормы.КонтрагентНаименование, НайденныйКонтрагент, Истина);
		КонецЕсли;

	КонецЦикла;
	
	Элемент.СписокВыбора.Очистить();
	Для каждого Элем Из Значение Цикл
		Элемент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
	КонецЦикла;
	
КонецПроцедуры



Процедура КонтрагентНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
 	СтандартнаяОбработка = Ложь;
	Если КонтрагентId>0 Тогда
		ОткрытьФормуКонтрагента(КонтрагентId);
	КонецЕсли;
КонецПроцедуры

Процедура КонтрагентIdПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентID();
	
КонецПроцедуры

Процедура КнопкаСохранитьIDНажатие(Элемент)
	Если ЗначениеЗаполнено(Контрагент) И КонтрагентId>0 Тогда
		Сохранить_Код_АТИ_Контрагента(Контрагент, КонтрагентID);
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаСоздатьКонтрагентНажатие(Элемент)
	Контрагент = СоздатьКонтрагента(КонтрагентID, API);
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Просмотр Тогда
		
		Если НЕ ПревьюЗагружено Тогда
			ОтобразитьПревью();
			ПревьюЗагружено = Истина;
		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтактНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеВыбора = ЭлементыФормы.КонтактНаименование.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеВыбора <> Неопределено Тогда
		КонтактНаименование = ЗначениеВыбора.Представление;
		КонтактId = ЗначениеВыбора.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ПанельСвойствПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
КонецПроцедуры

Процедура ТипДокументаПриИзменении(Элемент)
	
	УстановитьТипДокумента1С();
	
	УправлениеВидимостьюДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ИмяФайлаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ВыбранныйФайл = Новый Файл(Текст);
	Если ВыбранныйФайл.Существует() Тогда
		Если ВыбранныйФайл.Размер()/1024/1024 > МаксимальныйРазмерФайла Тогда
			Сообщить("Выбранный файл превышает максимальный размер");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		Сообщить("Файл не найден");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ДокументСсылкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ДокументСсылка <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Документы[ДокументСсылка.Метаданные().Имя].ПолучитьФормуВыбора(,Элемент);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		
		ФормаВыбора.Открыть();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСсылкаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ЗаполнитьРеквизитыПоДокументу();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентIdОткрытие(Элемент, СтандартнаяОбработка)
 	СтандартнаяОбработка = Ложь;
	Если КонтрагентId>0 Тогда
		ОткрытьФормуКонтрагента(КонтрагентId);
	КонецЕсли;
КонецПроцедуры

Процедура ФайлИмяНажатие(Элемент)
	
	Файл = Новый Файл(АдресФайла);
	Если ПустаяСтрока(АдресФайла) ИЛИ НЕ Файл.Существует() Тогда
		АдресФайла = API.GetAttachment(id, ФайлID, ФайлИмя);
		РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(АдресФайла);
	КонецЕсли;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.РасширениеФайла = РасширениеФайла;
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.ПолноеИмяФайла = ФайлИмя;
	ВыборФайла.Фильтр = "Все файлы (*"+РасширениеФайла+")|*"+РасширениеФайла;
	Если ВыборФайла.Выбрать() Тогда
		КопироватьФайл(АдресФайла, ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандаСкачатьПодпись(Элемент)

	Если Найти(Элемент.Имя, "ПодписьОтправителя") Тогда
		
		ПодписантID = ПодписьОтправителяId;
		ПрефиксФайла = "подпись_отправителя_";
		
	ИначеЕсли Найти(Элемент.Имя, "ПодписьПолучателя") Тогда
		
		ПодписантID = ПодписьПолучателяId;
		ПрефиксФайла = "подпись_получателя_";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодписантID) Тогда
		
		РасширениеФайла = ".sig";
		ИмяВремФайла = API.GetSign(id, ФайлID, ПодписантID);
		
		Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.РасширениеФайла = РасширениеФайла;
			ВыборФайла.МножественныйВыбор = Ложь;
			
			ВыборФайла.ПолноеИмяФайла = ПрефиксФайла + id + ".sig";
			
			ВыборФайла.Фильтр = "Все файлы (*"+РасширениеФайла+")|*"+РасширениеФайла;
			
			Если ВыборФайла.Выбрать() Тогда
				ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФайлИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.ПолноеИмяФайла = ФайлИмя;
	
	Если Диалог.Выбрать() Тогда
		ВыбранныйФайл = Новый Файл(Диалог.ПолноеИмяФайла);
		Если ВыбранныйФайл.Размер()/1024/1024 > МаксимальныйРазмерФайла Тогда
			Сообщить("Выбранный файл превышает максимальный размер");
			Возврат;
		КонецЕсли;
		ФайлИмя = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеКомментарииВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(id) Тогда
		
		ТекДанные = ЭлементыФормы.ТабличноеПолеКомментарии.ТекущиеДанные;
		Если Колонка = ЭлементыФормы.ТабличноеПолеКомментарии.Колонки.Вложение И ЗначениеЗаполнено(ТекДанные.Вложение) Тогда
			
			РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(ТекДанные.Вложение);
			ИмяВремФайла = API.GetAttachment(id, ТекДанные.ФайлИмя, РасширениеФайла, ТекДанные.Вложение);
			
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.РасширениеФайла = РасширениеФайла;
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ТекДанные.Вложение;
			ВыборФайла.Фильтр = "Все файлы (*"+РасширениеФайла+")|*"+РасширениеФайла;
			Если ВыборФайла.Выбрать() Тогда
				ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
		ИначеЕсли Колонка = ЭлементыФормы.ТабличноеПолеКомментарии.Колонки.Комментарий Тогда	
			СтандартнаяОбработка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеКомментарииПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
	ДобавитьКомментарий();
КонецПроцедуры

Процедура ТабличноеПолеКомментарииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ТабличноеПолеКомментарииПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если Строка.ДанныеСтроки.ПричинаОтклонения Тогда
			Строка.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ФайлГиперссылкаНажатие(Элемент)
	
	Выбор = ВыбратьИзМеню(Меню, ЭлементыФормы.ФайлСсылка);
	Если Выбор <> Неопределено Тогда
		
		Если ТипЗнч(Выбор) <> Тип("ЭлементСпискаЗначений") Тогда
			Возврат;
		КонецЕсли;

		Если Выбор.Значение = КонстЗагрузитьФайл Тогда
			
			Файл = Новый Файл(АдресФайла);
			Если ПустаяСтрока(АдресФайла) ИЛИ НЕ Файл.Существует() Тогда
				АдресФайла = API.GetAttachment(id, ФайлID, ФайлИмя);
				РасширениеФайла = РаботаСФайлами.ПолучитьРасширениеФайла(АдресФайла);
			КонецЕсли;
			
			ИмяВремФайла = АдресФайла;
			ПолноеИмяФайла = ФайлИмя;
			
		ИначеЕсли Выбор.Значение = КонстЗагрузитьАрхив Тогда
			
			РасширениеФайла = "zip";
			ИмяВремФайла = API.GetZip_Archive(id);
			ПолноеИмяФайла = ФайлИмя+".zip";
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.Расширение = РасширениеФайла;
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ПолноеИмяФайла;
		ВыборФайла.Фильтр = "Все файлы (*."+РасширениеФайла+")|*."+РасширениеФайла;
		Если ВыборФайла.Выбрать() Тогда
			ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура КонтактНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат1С = API.Account(КонтрагентId);
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Контакты = Результат1С["contacts"];
	//придется тупо перебором
	Для Каждого Контакт Из Контакты Цикл
		Если Контакт["ati_id"] = КонтактID Тогда
			ФормаКонтакта = ПолучитьФорму("ФормаКонтакта");
			ФормаКонтакта.Наименование = Контакт["Name"];
			ФормаКонтакта.Телефон = Контакт["phone"];
			ФормаКонтакта.email = Контакт["email"];
			ФормаКонтакта.ОткрытьМодально();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументСсылкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокументСсылка = Неопределено;
	УстановитьТипДокумента1С();
КонецПроцедуры

Процедура ТочкиМаршрутаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и НЕ ОтменаРедактирования Тогда
		ТекДанные = ЭлементыФормы.ТочкиМаршрута.ТекущиеДанные;
		ТекДанные.uid = Строка(Новый УникальныйИдентификатор);
		ЭлементыФормы.Грузы.ОтборСтрок.uid_ТочкиМаршрута.Установить(ТекДанные.uid);
	КонецЕсли;
КонецПроцедуры

Процедура ТочкиМаршрутаПриАктивизацииСтроки(Элемент)
	ТекДанные = ЭлементыФормы.ТочкиМаршрута.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.uid) Тогда
		ЭлементыФормы.Грузы.ОтборСтрок.uid_ТочкиМаршрута.Установить(ТекДанные.uid);
	КонецЕсли;
КонецПроцедуры

Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекТочкаМаршрута = ЭлементыФормы.ТочкиМаршрута.ТекущиеДанные;
		ЭлементыФормы.Грузы.ТекущиеДанные.uid_ТочкиМаршрута = ТекТочкаМаршрута.uid;
	КонецЕсли;
КонецПроцедуры

Процедура BoxIDОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Box_id = ВыбранноеЗначение;
	
	Если ПустаяСтрока(Box_id) Тогда
		Возврат;
	КонецЕсли;
	
	Массив = СертификатыПолучателя.НайтиСтроки(Новый Структура("Box_id", Box_id));
	Если Массив.Количество() > 0 Тогда
		edo_id = Массив[0].edo_id;
	КонецЕсли;
	
	УправлениеВидимостьюДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ДеревоНенайденныхСсылкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ДеревоНенайденных.ТекущиеДанные;
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(ТекДанные.ТипЗначения);
	Элемент.Значение = Элемент.ОграничениеТипа.ПривестиЗначение(Элемент.Значение);
	
КонецПроцедуры

Процедура ДеревоНенайденныхПриИзмененииФлажка(Элемент, Колонка)
	
	ТекДанные = ЭлементыФормы.ДеревоНенайденных.ТекущиеДанные;
	
	Если Колонка.Имя = "Активно" Тогда
		УстановитьФлажки(ТекДанные, ТекДанные.Активно);
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандаСоздатьНенайденное(Кнопка)

	СоздатьНенайденныеОбъекты(ДеревоРазбора, ДеревоНенайденных, СтруктураРазбора.СтрокаОбъекта);
	
КонецПроцедуры

Процедура КомандаУстановитьФлажки(Кнопка)

	УстановитьФлажки(ДеревоНенайденных, Истина);
	
КонецПроцедуры

Процедура КомандаСнятьФлажки(Кнопка)
	
	УстановитьФлажки(ДеревоНенайденных, Ложь);
	
КонецПроцедуры

#КонецОбласти

ИнициализацияПеременных();

ПревьюЗагружено = Ложь;