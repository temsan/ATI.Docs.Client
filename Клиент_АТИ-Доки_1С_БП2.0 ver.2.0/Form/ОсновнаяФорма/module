
Перем API Экспорт;
Перем СтруктураСправочники Экспорт;
Перем ТекущаяПапка;
Перем ТекущийСдвиг;
Перем МВТ;
Перем ПредставлениеАккаунта;

// Шрифты
Перем ЖирныйШрифт;
Перем ОбычныйШрифт;
Перем Курсив;


#Область КлиентскаяЛогика

Процедура ПодписатьДокумент(Значение = Неопределено, ДопПараметры = Неопределено) Экспорт
    
    Если ДопПараметры = Неопределено Тогда
        ДопПараметры = Новый Структура("НазваниеОперации", "ВыборСертификата");
    ИначеЕсли НЕ ДопПараметры.Свойство("НазваниеОперации") Тогда
        ДопПараметры.Вставить("НазваниеОперации", "ВыборСертификата");
    КонецЕсли;

    Если ДопПараметры.НазваниеОперации = "ВыборСертификата" Тогда
		
		// Выбор сертификата
		
		СертификатСсылка = ПолучитьАктивныйСертификат();
		ДопПараметры.Вставить("НазваниеОперации", "Подписание");
		
		Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыЭЦП") И НЕ СертификатСсылка.Пустая() Тогда
			
			ПодписатьДокумент(СертификатСсылка, ДопПараметры);
			
		Иначе
			
			ОткрытьФорму("Справочник.СертификатыЭЦП.ФормаВыбора",, ЭтаФорма,,,,
				Новый ОписаниеОповещения("ПодписатьДокумент", ЭтаФорма, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;	
				
    ИначеЕсли ДопПараметры.НазваниеОперации = "Подписание" Тогда

		// Само подписание
		
		ВыбранныйСертификат = Значение;
		Если НЕ ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
			Возврат
		КонецЕсли;
		
		ДействителенДо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранныйСертификат, "ДатаОкончания");
		Если ДействителенДо < НачалоДня(ТекущаяДата()) Тогда
			Сообщить("Сертификат " + ВыбранныйСертификат + " просрочен!");
			Возврат;
		КонецЕсли;             
		
		МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
		
		Для каждого ТекДокумент Из МассивСтрок Цикл
			
			API.Sign(ТекДокумент.id, ВыбранныйСертификат);
			
		КонецЦикла;
		
		ЗаполнитьДокументыТекущейПапки();
			
	КонецЕсли;
    
КонецПроцедуры

Процедура ПоместитьДокументыВКорзину()

	МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ТекДокумент Из МассивСтрок Цикл
		
		API.Delete(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();

КонецПроцедуры 

Процедура ЗаполнитьНастройкиПоЛогину(Объект, НастройкиПоЛогину, ТекущийЛогин) Экспорт
	
	Если ТекущийЛогин <> Неопределено Тогда
		
		СтруктураПараметров = НастройкиПоЛогину[ТекущийЛогин];
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			СтруктураПараметров.Свойство("АдресСервера", Объект.АдресСервера);
			СтруктураПараметров.Свойство("Логин", Объект.Логин);
			СтруктураПараметров.Свойство("Пароль", Объект.Пароль);
			СтруктураПараметров.Свойство("token", Объект.token);
			СтруктураПараметров.Свойство("ДокументовНаСтранице", Объект.ДокументовНаСтранице);
			СтруктураПараметров.Свойство("ИспользоватьЗащищенноеСоединение", Объект.ИспользоватьЗащищенноеСоединение);
			СтруктураПараметров.Свойство("КаталогАгента", Объект.КаталогАгента);
			СтруктураПараметров.Свойство("ОтправлятьЧерезАгента", Объект.ОтправлятьЧерезАгента);
			СтруктураПараметров.Свойство("ОтправлятьСообщенияОбОшибках", Объект.ОтправлятьСообщенияОбОшибках);
			СтруктураПараметров.Свойство("ПолучатьСервисныеСообщения", Объект.ПолучатьСервисныеСообщения);
			
			Если СтруктураПараметров.Свойство("Сертификаты") И СтруктураПараметров.Сертификаты <> Неопределено Тогда
				
				Объект.Сертификаты.Очистить();
				Для Каждого Стр Из СтруктураПараметров.Сертификаты Цикл
					ЗаполнитьЗначенияСвойств(Объект.Сертификаты.Добавить(), Стр);
					
					Если Стр.Пометка ИЛИ СтруктураПараметров.Сертификаты.Количество() = 1 Тогда
						Объект.АктивныйСертификат = Стр.Отпечаток;
						Объект.АктивныйСертификатСтрока = Стр;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДеревоПапок.Колонки.Добавить("Наименование", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ДеревоПапок.Колонки.Добавить("Сдвиг", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5, 0));
	ДеревоПапок.Колонки.Добавить("Name", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ДеревоПапок.Колонки.Добавить("Обработать", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	
	СписокДокументов.Колонки.Добавить("ПравоПодписи", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Прочитан", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Отклонен", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("МожетБытьОтправлен", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("ТребуетРешения", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Утвержден", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Исходящий", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("ТребуетВнимания", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Формализованный", Новый ОписаниеТипов("Булево"));
	СписокДокументов.Колонки.Добавить("Черновик", Новый ОписаниеТипов("Булево"));
	
	//нужны?
	СписокДокументов.Колонки.Добавить("ФайлИмя", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	СписокДокументов.Колонки.Добавить("ФайлID", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(36));
	
	СформироватьДеревоПапок();
	
КонецПроцедуры

Процедура СохранитьНастройки() Экспорт
	
	НастройкиПоЛогину = ВосстановитьЗначение("Настройки_АТИ_Доки");
	Если ТипЗнч(НастройкиПоЛогину) <> Тип("Соответствие") Тогда
		НастройкиПоЛогину = Новый Соответствие;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСервера", АдресСервера);
	СтруктураПараметров.Вставить("Логин", Логин);
	СтруктураПараметров.Вставить("Пароль", Пароль);
	СтруктураПараметров.Вставить("token", token);
	СтруктураПараметров.Вставить("ДокументовНаСтранице", ДокументовНаСтранице);
	СтруктураПараметров.Вставить("ИспользоватьЗащищенноеСоединение", ИспользоватьЗащищенноеСоединение);
	СтруктураПараметров.Вставить("КаталогАгента", КаталогАгента);
	СтруктураПараметров.Вставить("ОтправлятьЧерезАгента", ОтправлятьЧерезАгента);
	СтруктураПараметров.Вставить("ОтправлятьСообщенияОбОшибках", ОтправлятьСообщенияОбОшибках);
	СтруктураПараметров.Вставить("ПолучатьСервисныеСообщения", ПолучатьСервисныеСообщения);
	СтруктураПараметров.Вставить("Сертификаты", Сертификаты);
	
	НастройкиПоЛогину.Вставить(Логин, СтруктураПараметров);
	НастройкиПоЛогину.Вставить("ТекущийЛогин", Логин);
	
	СохранитьЗначение("Настройки_АТИ_Доки", НастройкиПоЛогину);
	
	флПроцедураВызывалась = Истина;
	
КонецПроцедуры

Процедура ВосстановитьНастройки()
	
	НастройкиПоЛогину = ВосстановитьЗначение("Настройки_АТИ_Доки");
	
	Если ТипЗнч(НастройкиПоЛогину) = Тип("Соответствие") Тогда
		
		ТекущийЛогин = НастройкиПоЛогину["ТекущийЛогин"];
		
		ЗаполнитьНастройкиПоЛогину(ОбработкаОбъект, НастройкиПоЛогину, ТекущийЛогин);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормыКлиент

Процедура ДеревоПапокПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Строка Из ОформленияСтрок Цикл
		Если Строка.ДанныеСтроки.Обработать>0 Тогда
			Строка.Шрифт = Новый Шрифт(Строка.Шрифт,,,Истина);
		Иначе
			Строка.Шрифт = Новый Шрифт(Строка.Шрифт,,,Ложь);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

Процедура СписокДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого Строка Из ОформленияСтрок Цикл
					
		Если Строка.ДанныеСтроки.ТребуетРешения ИЛИ Строка.ДанныеСтроки.ТребуетВнимания Тогда
			Строка.Шрифт = ЖирныйШрифт;
		Иначе
			Строка.Шрифт = ОбычныйШрифт;
		КонецЕсли;

		Строка.Ячейки.Статус.ОтображатьКартинку = Истина;
		Если НЕ (Строка.ДанныеСтроки.ТребуетРешения ИЛИ Строка.ДанныеСтроки.Утвержден ИЛИ Строка.ДанныеСтроки.Отклонен) Тогда
			Строка.Ячейки.Статус.ИндексКартинки = 3;
		Иначе
			Строка.Ячейки.Статус.ИндексКартинки = ?(Строка.ДанныеСтроки.Утвержден, 0, ?(Строка.ДанныеСтроки.Отклонен, 1, 2));
		КонецЕсли;
				
		Если ТребуетсяСформироватьДокумент1С(Строка.ДанныеСтроки) Тогда
			Строка.Шрифт = Курсив;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтактныеЛицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		ТекДанные = ЭлементыФормы.КонтактныеЛица.ТекущиеДанные;
	КонецЕсли;
КонецПроцедуры

Процедура МаксимальныйРазмерФайлаПриИзменении(Элемент)
	МаксимальныйРазмерФайла = Мин(МаксимальныйРазмерФайла, 10);
КонецПроцедуры

Процедура АдресСервераПриИзменении(Элемент)
	
	API.Соединение = Неопределено;
	token = "";
	
КонецПроцедуры

Процедура tokenНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Логин = "";
	Пароль = "";
	ВвестиСтроку(Логин, "Введите логин");
	ВвестиСтроку(Пароль, "Введите пароль");
	
	token = API.GetToken(Логин, Пароль);
	
КонецПроцедуры

Процедура КнопкаЗарегистрироватьВнешнююПечатнуюФормуНажатие(Элемент)
	
	МакетОбработки = ПолучитьМакет("МакетВнешняяПечатнаяФорма");
	ИмяФайлаОбработки = ПолучитьИмяВременногоФайла(".epf");
	МакетОбработки.Записать(ИмяФайлаОбработки);
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВнешниеОбработкиПринадлежность.Ссылка
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &СсылкаОбъекта
	|	И ВнешниеОбработкиПринадлежность.ПредставлениеКнопки = &ПредставлениеКнопки";
	Запрос.УстановитьПараметр("СсылкаОбъекта", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПредставлениеКнопки", "Отправить через АТИ-Доки");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СпрОбъект = Справочники.ВнешниеОбработки.СоздатьЭлемент();
		ТекстСообщения = "Внешняя форма успешно создана";
	Иначе
		СпрОбъект = РезультатЗапроса.Выгрузить()[0].Ссылка.ПолучитьОбъект();
		ТекстСообщения = "Внешняя форма успешно обновлена";
	КонецЕсли;
	
	Если Ложь Тогда
		СпрОбъект = Справочники.ВнешниеОбработки.СоздатьЭлемент();
	КонецЕсли;
	
	СпрОбъект.Принадлежность.Очистить();
	СпрОбъект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	СпрОбъект.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаОбработки));   
	СпрОбъект.Наименование = "Отправить через АТИ-Доки";
	
	СтрПринадлежность = СпрОбъект.Принадлежность.Добавить();
	
	СтрПринадлежность.СсылкаОбъекта = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	СтрПринадлежность.ПредставлениеКнопки = "Отправить через АТИ-Доки";
	СтрПринадлежность.ПредставлениеОбъекта = "Документ ""Реализация товаров и услуг""";
	Попытка 
		СпрОбъект.Записать();
		Сообщить(ТекстСообщения);
	Исключение
		Сообщить(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Процедура КнопкаСправкаДопФормаНажатие(Элемент)
	Сообщить("Добавление элемента в справочник ""Дополнительные отчеты и обработки""
	|(регистрация внешней печатной формы для документа ""Реализация товаров и услуг"")
	|для формирования и отправки электронных документов из формы документа");
КонецПроцедуры

Процедура КаталогАгентаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(КаталогАгента) Тогда
		КаталогОбъект = Новый Файл(КаталогАгента);
		Если КаталогОбъект.Существует() И КаталогОбъект.ЭтоКаталог() Тогда
			ЗапуститьПриложение("explorer "+КаталогАгента);
		Иначе
			Ответ = Вопрос("Создать каталог ""АТИ_Доки-Агента""?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СоздатьКаталог(КаталогАгента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИнформацияОКомпанииНажатие(Элемент)
	ОткрытьСтраницуКонтрагента(UserID);
КонецПроцедуры

Процедура КнопкаУстановитьАгентНажатие(Элемент)
	МакетАгент = ПолучитьМакет("МакетАгент");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("exe");
	МакетАгент.Записать(ИмяВременногоФайла);
	
	WSH=Новый COMobject("wscript.shell"); 
	ProgramFiles = WSH.ExpandEnvironmentStrings("%ProgramFiles%");
	
	КаталогФайлаАгента = ProgramFiles+"\ADA\";
	КаталогОбъект = Новый Файл(КаталогФайлаАгента);
	Если НЕ КаталогОбъект.Существует() Тогда
		Попытка
			СоздатьКаталог(КаталогФайлаАгента);
		Исключение
			//скорей всего UAC
			ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			ДиалогВыбора.Заголовок = "Выбор каталога исполняемого файла ""АТИ-Доки Агента""";
			ДиалогВыбора.Каталог = ProgramFiles;
			Если ДиалогВыбора.Выбрать() Тогда
				КаталогФайлаАгента = ДиалогВыбора.Каталог;
			Иначе
				Возврат;
			КонецЕсли;
		КонецПопытки
	КонецЕсли;
	
	ИмяФайлаАгента = КаталогФайлаАгента + "ada.exe";
	
	Попытка
		ПереместитьФайл(ИмяВременногоФайла, ИмяФайлаАгента);
	Исключение
		Сообщить("Не удалось скопировать файл агента в каталог """+КаталогФайлаАгента+""". Выберите другой каталог.");
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.Заголовок = "Выбор каталога исполняемого файла ""АТИ-Доки Агента""";
		Если ДиалогВыбора.Выбрать() Тогда
			КаталогФайлаАгента = ДиалогВыбора.Каталог;
			ИмяФайлаАгента = КаталогФайлаАгента + "\ada.exe";
			ПереместитьФайл(ИмяВременногоФайла, ИмяФайлаАгента);
			Сообщить("Исполняемый файл агента успешно скопирован в """+ИмяФайлаАгента+"""");
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
	СоздатьДокумент();
КонецПроцедуры

Процедура ГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ГородID = 0;	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Запрос = Новый Запрос;
		Если МВТ = Неопределено Тогда
			МВТ = Новый МенеджерВременныхТаблиц;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = 
			"Выбрать Города.id, Города.Наименование Поместить ВТ_Города Из &ТЗ_Города Как Города";
			Запрос.УстановитьПараметр("ТЗ_Города", Города);
			Запрос.Выполнить();
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = МВТ;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТ_Города.id,
		|	ВТ_Города.Наименование
		|ИЗ
		|	ВТ_Города КАК ВТ_Города
		|ГДЕ
		|	ВТ_Города.Наименование ПОДОБНО &Наименование";
		Запрос.УстановитьПараметр("Наименование", Текст+"%");
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			СписокГородов = Новый СписокЗначений;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокГородов.Добавить(Выборка.ID, Выборка.Наименование);
			КонецЦикла;
			
			Если СписокГородов.Количество()>1 Тогда
				ВыбранноеЗначение = ВыбратьИзСписка(СписокГородов, Элемент);
			Иначе
				ВыбранноеЗначение = СписокГородов[0];
			КонецЕсли;
			
			Если ВыбранноеЗначение <> Неопределено Тогда
				Значение = ВыбранноеЗначение.Представление;
				ГородID = ВыбранноеЗначение.Значение;
			КонецЕсли;
		Иначе
			Сообщить("Город не найден");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаДобавитьНажатие(Элемент)
	
	Перем Сертификат;
	
	Результат = API.Certificate_Create(Сертификат);
	Сообщить(Результат);
	ЗаполнитьСертификаты();
	
КонецПроцедуры

Процедура КомандаКнопкаНазад(Кнопка)
	ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг = Макс(0, ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг - ДокументовНаСтранице);
	РезультатJSON = API.Documents(ТекущаяПапка, ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг, ДокументовНаСтранице);
	ЗаполнитьДокументы(РезультатJSON);
	СформироватьНадписьЛожнойКнопки();
КонецПроцедуры

Процедура КомандаКнопкаВперед(Кнопка)
	ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг = ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг + ДокументовНаСтранице;
	РезультатJSON = API.Documents(ТекущаяПапка, ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг, ДокументовНаСтранице);
	ЗаполнитьДокументы(РезультатJSON);
	СформироватьНадписьЛожнойКнопки();
КонецПроцедуры

Процедура КоманднаяПанельФормыГрупповаяОтправка(Кнопка)
	ФормаГО = ПолучитьФорму("ГрупповаяОтправкаДокументов", ЭтаФорма);
	ФормаГО.ФлажокАкты = Истина;
	ФормаГО.ФлажокСчета = Истина;
	ФормаГО.ФлажокСчетаФактуры = Истина;
	ФормаГО.Открыть();
КонецПроцедуры

Процедура КомандаКнопкаКопировать(Кнопка)
	СкопироватьДокумент();
КонецПроцедуры

Процедура КоманднаяПанель1Заполнить(Кнопка)
	ЗаполнитьСертификаты();
КонецПроцедуры

Процедура КоманднаяПанельФормыОбработкаЭлектронныхДокументов(Кнопка)
	ПолучитьФорму("ГрупповаяОбработкаДокументов", ЭтаФорма).ОткрытьМодально();
	ЗаполнитьДокументыТекущейПапки();
КонецПроцедуры

Процедура КомандаСоздатьДокументБезТипа(Кнопка)
	
	СоздатьДокумент();
	
КонецПроцедуры

Процедура КомандаПараметры(Кнопка)
	
	ЗаполнитьНастройки();
	ОтключитьОбработчикОжидания("ПолучитьСервисныеСообщения");
	
	Если ПолучатьСервисныеСообщения Тогда
		ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 100);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

Процедура КомандаНастройкаСертификатов(Кнопка)
	
	Форма = ПолучитьФорму("ФормаУправлениеСертификатами", ЭтаФорма, КлючУникальности);
	РезультатПараметры = Форма.ОткрытьМодально();
	
	Если РезультатПараметры = Истина Тогда
		
		ОбновитьСертификаты();
		СохранитьНастройки();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыход(Кнопка)
	Логин = "";
	Пароль = "";
	token = "";
	ЗаполнитьНастройки();
	ЗаполнитьДокументыТекущейПапки();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыКарточкаАТИ(Кнопка)
	ФормаИнфо = ПолучитьФорму("ФормаИнфо", ЭтаФорма);
	РезультатКарточкаАТИ = ФормаИнфо.ОткрытьМодально();
КонецПроцедуры

#КонецОбласти


Процедура ЗаполнитьДокументыТекущейПапки()
	
	ТекДанные = ЭлементыФормы.ДеревоПапок.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ТекущийСдвиг = 0;
		ТекущаяПапка = ТекДанные.name;
		Результат1С = API.Documents(ТекущаяПапка, ТекДанные.Сдвиг, ДокументовНаСтранице);
		ЗаполнитьДокументы(Результат1С);
	КонецЕсли;
	
	СформироватьНадписьЛожнойКнопки();
	
КонецПроцедуры

Процедура СформироватьДеревоПапок()
	
	ДеревоПапок.Строки.Очистить();
	
	СтрВсеДокументы = ДеревоПапок.Строки.Добавить();
	СтрВсеДокументы.Наименование = "Все документы";
	СтрВсеДокументы.name = "documents";
	
	СтрВходящие = СтрВсеДокументы.Строки.Добавить();
	СтрВходящие.Наименование = "Входящие";
	СтрВходящие.name = "inbox";
	
	СтрВходящие_ОжидаютРешения = СтрВходящие.Строки.Добавить();
	СтрВходящие_ОжидаютРешения.Наименование = "Ожидают решения";
	СтрВходящие_ОжидаютРешения.name = "waiting_in";
	
	СтрИсходящие = СтрВсеДокументы.Строки.Добавить();
	СтрИсходящие.Наименование = "Отправленные";
	СтрИсходящие.name = "outbox";
	
	СтрИсходящие_ОжидаютРешения = СтрИсходящие.Строки.Добавить();
	СтрИсходящие_ОжидаютРешения.Наименование = "Ожидают решения";
	СтрИсходящие_ОжидаютРешения.name = "waiting_out";
	
	СтрОдобренные = ДеревоПапок.Строки.Добавить();
	СтрОдобренные.Наименование = "Одобренные";
	СтрОдобренные.name = "approved";
	
	СтрОтклоненные = ДеревоПапок.Строки.Добавить();
	СтрОтклоненные.Наименование = "Отклоненные";
	СтрОтклоненные.name = "declined";
	
	СтрАрхив = ДеревоПапок.Строки.Добавить();
	СтрАрхив.Наименование = "Архив";
	СтрАрхив.name = "archive";
	
	СтрКорзина = ДеревоПапок.Строки.Добавить();
	СтрКорзина.Наименование = "Корзина";
	СтрКорзина.name = "deleted";
	
	СтрЧерновики = ДеревоПапок.Строки.Добавить();
	СтрЧерновики.Наименование = "Черновики";
	СтрЧерновики.name = "drafts";

КонецПроцедуры

Процедура ОбновитьСписокПапок(ОбновитьТолькоПапки = Истина)
	
	Результат1С = API.Mailbox();
	
	Если ТипЗнч(Результат1С) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат1С) Тогда
		
		Для Каждого Поле Из Результат1С Цикл
			
			ПапкаВДереве = ДеревоПапок.Строки.Найти(Поле.Ключ, "name", Истина);
			
			Если ПапкаВДереве <> Неопределено Тогда
				
				ПапкаВДереве.ВсегоДокументов = Поле.Значение[0];
				ПапкаВДереве.Обработать = Поле.Значение[1];
				
				Если ПапкаВДереве.Name = "archive" ИЛИ ПапкаВДереве.Name = "deleted" Тогда
					ПапкаВДереве.НаименованиеПолное = ПапкаВДереве.Наименование;
					
				Иначе	
					ПапкаВДереве.НаименованиеПолное = ПапкаВДереве.Наименование + ?(ПапкаВДереве.Обработать = 0, "", " ("+Формат(ПапкаВДереве.Обработать, "ЧДЦ=")+")");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

Процедура СформироватьНадписьЛожнойКнопки()
	
	ТекДанные = ЭлементыФормы.ДеревоПапок.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВсегоСтраниц = Цел(ТекДанные.ВсегоДокументов/ДокументовНаСтранице) + ?(ТекДанные.ВсегоДокументов%ДокументовНаСтранице>0, 1, 0);
		ТекущаяСтраница = Цел(ТекДанные.Сдвиг/ДокументовНаСтранице)+1;
		
		//Если Отладка Тогда
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ЛожнаяКнопка.Текст = ""+ТекущаяСтраница + " из " + ВсегоСтраниц;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.КнопкаНазад.Доступность = ТекущаяСтраница > 1;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.КнопкаВперед.Доступность = ТекущаяСтраница < ВсегоСтраниц;
		//КонецЕсли;
		
		//ЭлементыФормы.КоманднаяПанельНавигация.Кнопки.ЛожнаяКнопка.Текст = ""+ТекущаяСтраница + " из " + ВсегоСтраниц;
		//ЭлементыФормы.КоманднаяПанельНавигация.Кнопки.КнопкаНазад.Доступность = ТекущаяСтраница > 1;
		//ЭлементыФормы.КоманднаяПанельНавигация.Кнопки.КнопкаВперед.Доступность = ТекущаяСтраница < ВсегоСтраниц;
		
	Иначе
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ЛожнаяКнопка.Текст = "";
		//ЭлементыФормы.КоманднаяПанельНавигация.Кнопки.ЛожнаяКнопка.Текст = "";
	КонецЕсли;

КонецПроцедуры

Процедура НастройкаМенюДействия(Документ, Папка)
	Если Документ = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.Подписать.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПоместитьВАрхив.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ВернутьИзАрхива.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПоместитьВКорзину.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ВернутьИзКорзины.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПроверитьПодпись.Доступность = Ложь;
	Иначе	
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.Подписать.Доступность = (Документ.ПравоПодписи И НЕ Документ.Подписан И НЕ (Папка.name = "draft"));
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПроверитьПодпись.Доступность = Документ.Подписан ИЛИ Документ.ПодписанКонтрагентом;
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПоместитьВКорзину.Доступность = (НЕ Папка.name = "deleted");
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ВернутьИзКорзины.Доступность = (Папка.name = "deleted");
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПоместитьВАрхив.Доступность = (НЕ Папка.name = "archive") И (НЕ Папка.name = "deleted");
		ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ВернутьИзАрхива.Доступность = (Папка.name = "archive") И (НЕ Папка.name = "deleted");
	КонецЕсли;
	
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки Цикл
		Если ЭлементыФормы.КоманднаяПанельДокументы.Кнопки.Найти(Кнопка.Имя) <> Неопределено Тогда
			Кнопка.Доступность = ЭлементыФормы.КоманднаяПанельДокументы.Кнопки[Кнопка.Имя].Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочники() Экспорт
	
	РезультатJSON = API.References();
	
	Если РезультатJSON = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСправочники.Вставить("ОПФ", ОПФ);
	СтруктураСправочники.Вставить("Города", Города);
	СтруктураСправочники.Вставить("ТипыДокументов", ТипыДокументов);
	СтруктураСправочники.Вставить("ТипыТранспорта", ТипыТранспорта);
	
	ЗаполнитьСправочники(РезультатJSON, СтруктураСправочники);
	
КонецПроцедуры

Процедура ЗаполнитьКонтрагентов(Результат1С, Контрагенты, ГородID=0) Экспорт
	
	МассивКонтрагентов = Результат1С;
	Контрагенты.Очистить();
	Для Каждого Контрагент Из МассивКонтрагентов Цикл
		Если ЗначениеЗаполнено(ГородID) Тогда
			КонтрагентИнфо = API.Account(Контрагент.id);
			Попытка
				Если Число(КонтрагентИнфо.Получить("city")) <> ГородID Тогда
					Продолжить;
				КонецЕсли;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		СтрКонтрагент = Контрагенты.Добавить();
		СтрКонтрагент.user_id = Контрагент.Получить("id");
		СтрКонтрагент.Наименование = Контрагент.Получить("name");
		СтрКонтрагент.ОПФ = Контрагент.Получить("ownership");
		СтрКонтрагент.Активен = Контрагент.Получить("activated");
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.user_id КАК User_ID,
	|	ТЗ.Наименование,
	|	ТЗ.ОПФ,
	|	ТЗ.Активен
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ВТ_Свойство
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Наименование = ""ATI_DOC_ID""
	|	И СвойстваОбъектов.НазначениеСвойства = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Контрагенты.User_ID,
	|	ВТ_Контрагенты.Наименование КАК Наименование,
	|	ВТ_Контрагенты.ОПФ,
	|	ВТ_Контрагенты.Активен,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ЗначенияСвойствОбъектов.Объект = Контрагенты.Ссылка
	|		ПО ВТ_Контрагенты.User_ID = ЗначенияСвойствОбъектов.Значение
	|			И (ЗначенияСвойствОбъектов.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_Свойство.Свойство
	|				ИЗ
	|					ВТ_Свойство))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТЗ", Контрагенты);
	
	Контрагенты = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ОбновитьСертификаты() Экспорт
	
	//Сертификаты.Очистить();
	Для каждого Стр Из Сертификаты Цикл
		Стр.Удалить = Истина;
	КонецЦикла;
	
	СписокСертификатов = API.Certificates_Get();
	
	Если СписокСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Изменено: artem.b 23.06.2015
	//МенеджерКриптографии = ЭлектроннаяЦифроваяПодпись.МенеджерКриптографии("Расшифровка");
	//---- Заменено на: ----
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Ложь);
	/// artem.b 23.06.2015		
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	
	Если ЗначениеЗаполнено(СписокСертификатов) Тогда
		
		Для Каждого СертификатЭлемент Из СписокСертификатов Цикл
			
			Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", СертификатЭлемент["id"]));
			Если Массив.Количество() = 0 Тогда
				СтрСертифкат = Сертификаты.Добавить();
				СтрСертифкат.ДатаОкончания = ТекущаяДата()+120*60;
			Иначе
				СтрСертифкат = Массив[0];
				СтрСертифкат.Удалить = Ложь;
			КонецЕсли;
			
			СтрСертифкат.Отпечаток = СертификатЭлемент["id"];
			СтрСертифкат.Наименование = СертификатЭлемент["title"];
			
			СтрСертифкат.Тестовый = Найти(НРег(СертификатЭлемент["CA"]), "test");
			
			ИНН = СертификатЭлемент["components"]["INN"];
			Если Лев(ИНН, 2) = "00" Тогда
				ИНН = Сред(ИНН, 3)
			КонецЕсли;
			СтрСертифкат.ИНН = ИНН;
			
			СтрСертифкат.Организация = СертификатЭлемент["components"]["O"];
			СтрСертифкат.ДействителенС = СтрокаВДату(СертификатЭлемент["valid_from"]);
			СтрСертифкат.ДействителенПо = СтрокаВДату(СертификатЭлемент["valid_until"]);
			
			Если НЕ ЗначениеЗаполнено(СтрСертифкат.ОрганизацияСсылка) Тогда
				
				Если ЗначениеЗаполнено(СтрСертифкат.СертификатСсылка) Тогда
					
					СтрСертифкат.ОрганизацияСсылка = СтрСертифкат.СертификатСсылка.Организация;
					
				Иначе
					
					СтрСертифкат.ОрганизацияСсылка = НайтиОрганизациюПоИНН(СтрСертифкат.ИНН);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Свойства = СертификатЭлемент["components"];
			
			Если СертификатЭлемент["extra"] <> Неопределено Тогда
				Если ПустаяСтрока(Свойства["OGRN"]) Тогда
					
					Свойства.Вставить("OGRN", СертификатЭлемент["extra"]["ogrn"]);
					
				КонецЕсли;
				
				Свойства.Вставить("ifns", СертификатЭлемент["extra"]["ifns"]);
				Свойства.Вставить("region_code", СертификатЭлемент["extra"]["region_code"]);
				Свойства.Вставить("comment", СертификатЭлемент["extra"]["comment"]);

			КонецЕсли;
			
			СтрСертифкат.Свойства = ЗначениеВСтрокуВнутр(СертификатЭлемент["components"]);
			СтрСертифкат.extra = ЗначениеВСтрокуВнутр(СертификатЭлемент["extra"]);
			
			Если СертификатЭлемент["integrator"] <> Неопределено Тогда
				
				СтрСертифкат.СтатусКабинетаВДиадок = СертификатЭлемент["integrator"]["status"];
				СтрСертифкат.КодСтатуса = СертификатЭлемент["integrator"]["status_code"];
				СтрСертифкат.Представление = СертификатЭлемент["title"];
				СтрСертифкат.Отпечаток = СертификатЭлемент["id"];
				
				Если СертификатЭлемент["integrator"] <> Неопределено Тогда
					СтрСертифкат.Box_ID = СертификатЭлемент["integrator"]["box_id"];
					СтрСертифкат.edo_id = СертификатЭлемент["integrator"]["edo_id"];
					СтрСертифкат.СтатусКод = СертификатЭлемент["integrator"]["status_code"];
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверка перед подачей заявления в ФНС
			СтрСертифкат.РеквизитыЗаполнены = СертификатЭлемент["extra"] <> Неопределено
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["ifns"])
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["ogrn"])
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["region_code"]);
			
			Если СтрСертифкат.Отпечаток = АктивныйСертификат И (ПустаяСтрока(СтрСертифкат.token) ИЛИ ПустаяСтрока(СтрСертифкат.edo_id) ИЛИ (СтрСертифкат.ДатаОкончания-10*60) <= ТекущаяДата()) Тогда
				
				Результат1С = API.Certificate_Token_Get(СтрСертифкат.Отпечаток);
				
				Если Результат1С <> Неопределено Тогда
					СтрСертифкат.ЗашифрованныйТокен = Результат1С.Получить("token");
					СтрСертифкат.token = "";
					СтрСертифкат.ДатаОкончания = ТекущаяДата()+120*60;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
		Для каждого Стр Из Сертификаты Цикл
						
			Если ПустаяСтрока(Стр.ЗашифрованныйТокен) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрСертифкат.Отпечаток = АктивныйСертификат Тогда
				
				Попытка
					
					ПараметрыСертификата = API.ПолучитьДоступКСертификату(СтрСертифкат.СертификатСсылка);
					Если ТипЗнч(ПараметрыСертификата) <> Тип("Структура") Тогда
						Продолжить;
						
					ИначеЕсли ПараметрыСертификата.ПарольПолучен Тогда
						
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПараметрыСертификата.ПарольПользователя;
						
					КонецЕсли;
					
					Стр.token = СтрЗаменить(СтрЗаменить(Base64Строка(МенеджерКриптографии.Расшифровать(Base64Значение(Стр.ЗашифрованныйТокен))),
						Символы.ПС, ""),
						Символы.ВК, "");
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Стр Из Сертификаты Цикл
			
			Если Стр.Отпечаток <> АктивныйСертификат Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(Стр.token) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Стр.СтатусКод = "activation_pending" Тогда
				Результат1С = API.IFNS_UpdateStatus(Стр.Отпечаток, Стр.token);
				
				Если Результат1С <> Неопределено Тогда
					Стр.СтатусКод = Результат1С;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивКУдалению = Сертификаты.НайтиСтроки(Новый Структура("Удалить", Истина));
	Для Каждого Элемент Из МассивКУдалению Цикл
		Сертификаты.Удалить(Элемент);
	КонецЦикла;
	
	Если ПолучатьСервисныеСообщения Тогда
		//Изменено: Бирюков Артем 20.10.2015
		//ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 0.1, Истина);
		//---- Заменено на: ----
		ПолучитьСервисныеСообщения();
		/// Бирюков Артем 20.10.2015

		ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 100);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСервисныеСообщения()
	
	НужноОбновитьСписок = Ложь;
	
	Если НЕ ПолучатьСервисныеСообщения Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	СертификатСсылка = ПолучитьАктивныйСертификат();
	
	Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		Элем = Массив[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Элем.token) Тогда
		Возврат;
	КонецЕсли;
	
	//Удалено: Бирюков Артем 09.10.2015
	// Оповещать о начале получении извещений не нужно
	//ТекстОповещения = "Обмен счетами-фактурами: получаю извещения...";
	//ПоказатьОповещениеПользователя("Обмен счетами-фактурами",, ТекстОповещения);
	/// Бирюков Артем 09.10.2015
	
	МассивОтветов = Новый Массив;
	
	КоллекцияСообщений = API.Notifications_Get(Элем.token, Элем.Отпечаток);
	
	Если КоллекцияСообщений = Неопределено Тогда
		Возврат;
	Иначе
		КоллекцияСообщений = КоллекцияСообщений["notifications"];
	КонецЕсли;
	
	Для каждого ЭлементОтвета Из КоллекцияСообщений Цикл
		
		Если НЕ API.Notifications_Sign(ЭлементОтвета, СертификатСсылка) Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Обмен счетами-фактурами: обработано извещение %1", ЭлементОтвета["file_name"]);
		ПоказатьОповещениеПользователя("Обмен счетами-фактурами",, ТекстОповещения);
		
		НужноОбновитьСписок = Истина;
		
	КонецЦикла;
	
	Если НЕ Отказ И КоллекцияСообщений.Количество() > 0 Тогда
		
		API.Notifications_Put(Элем.token, Элем.Отпечаток, КоллекцияСообщений)
		
	КонецЕсли;
	
	Если НужноОбновитьСписок Тогда
		ЗаполнитьДокументыТекущейПапки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ВосстановитьНастройки();
	
	ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	
	Если ДокументовНаСтранице = 0 Тогда
		ДокументовНаСтранице = 20;
	КонецЕсли;
	
	Если МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 10;
	КонецЕсли;
			
	Если НЕ (ЗначениеЗаполнено(АдресСервера) И ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль)) Тогда

		Если ЗаполнитьНастройки() = Ложь Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//Попытка
	//	ОбновитьСписокПапок();
	//Исключение
	//КонецПопытки;
	
	//ПодключитьОбработчикОжидания("СтартовоеЗаполнение", 0.1, Истина);
	СтартовоеЗаполнение();
	
	Если ПолучатьСервисныеСообщения Тогда
		ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 100);
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьНастройки();
	
	ОтключитьОбработчикОжидания("ПолучитьСервисныеСообщения");
	
КонецПроцедуры

Процедура КомандаСоздатьДокумент(Кнопка)
	
	СоздатьДокумент(Кнопка.Текст);
	
КонецПроцедуры

Процедура КомандаПодписать(Кнопка)
	
	ПодписатьДокумент();
	
КонецПроцедуры

Процедура КомандаПоместитьВАрхив(Команда)
	
	МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ТекДокумент Из МассивСтрок Цикл
		
		API.Archive(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

Процедура КомандаВернутьИзАрхива(Команда)
	
	МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ТекДокумент Из МассивСтрок Цикл
		
		API.Unarchive(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоместитьВКорзину(Команда)
	
	ПоместитьДокументыВКорзину();
	
КонецПроцедуры

Процедура КомандаВернутьИзКорзины(Команда)
	
	МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ТекДокумент Из МассивСтрок Цикл
		
		API.Undelete(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьПодпись(Команда)
	
	МассивСтрок = ЭлементыФормы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ТекДокумент Из МассивСтрок Цикл
		
		API.TestSign(ТекДокумент.id);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСертификаты()
	
	СписокСертификатов = API.Certificates_Get();
	Сертификаты.Очистить();
	Если ЗначениеЗаполнено(СписокСертификатов) Тогда
		Для Каждого СертификатЭлемент Из СписокСертификатов Цикл
			СтрСертифкат = Сертификаты.Добавить();
			СтрСертифкат.Отпечаток = СертификатЭлемент.Получить("id");
			СтрСертифкат.Наименование = СертификатЭлемент.Получить("title");
			СтрСертифкат.ДействителенС = СтрокаВДату(СертификатЭлемент.Получить("valid_from"));
			СтрСертифкат.ДействителенПо = СтрокаВДату(СертификатЭлемент.Получить("valid_until"));
			СтрСертифкат.Свойства = ЗначениеВСтрокуВнутр(СертификатЭлемент.Получить("components"));
		КонецЦикла;
		//Сообщить("Сертификаты загружены");
	КонецЕсли;

КонецПроцедуры

Процедура КаталогАгентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогАгента;
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Заголовок = "Выберите каталог ""Агента"" ATI-Docs";
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогАгента = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоПапокПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(АдресСервера) Тогда
		
		//Изменено: Бирюков Артем 22.10.2015
		//ЗаполнитьДокументыТекущейПапки();
		//---- Заменено на: ----
		ПодключитьОбработчикОжидания("ЗаполнитьДокументыТекущейПапки", 0.1, Истина); 
		/// Бирюков Артем 22.10.2015
		
		ТекДокумент = ЭлементыФормы.СписокДокументов.ТекущиеДанные;
		
		ТекПапка = ЭлементыФормы.ДеревоПапок.ТекущиеДанные;
		Если ТекПапка <> Неопределено Тогда
			НастройкаМенюДействия(ТекДокумент, ТекПапка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("ФормаДокумента", ЭтаФорма);
		ФормаДокумента.ТипыДокументов = ТипыДокументов;
		ЗаполнитьЗначенияСвойств(ФормаДокумента, ВыбраннаяСтрока);
		
		НеобходимоОбновить = ФормаДокумента.ОткрытьМодально();
		
		Если НеобходимоОбновить <> Неопределено И НеобходимоОбновить Тогда
			ОбновитьСписокПапок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛоготипНажатие(Элемент)
	ЗапуститьПриложение("https://d.ati.su/welcome/");
КонецПроцедуры

//Процедура ПодключитьсяНажатие(Элемент)
//	token = API.GetToken(Логин, Пароль);
//	Если Не ЗначениеЗаполнено(token) Тогда
//		Сообщить("Не удалось подключиться к сервису. Обратитесь в техподдержку");
//	Иначе
//		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Папки;
//		ОбновитьДанныеАккаунта();
//	КонецЕсли;
//КонецПроцедуры

Процедура СсылкаНаФорумНажатие(Элемент)
	ЗапуститьПриложение("http://www.ati.su/Forum/Topic.aspx?forumid=1029&topicid=8905b610-d76e-e311-8e0d-00259038ec34");
КонецПроцедуры

Процедура СсылкаФидбэкНажатие(Элемент)
	ЗапуститьПриложение("http://feedback.d.ati.su/");
КонецПроцедуры

Процедура СсылкаFAQНажатие(Элемент)
	ЗапуститьПриложение("https://d.ati.su/about/faq/");
КонецПроцедуры

Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.Контрагенты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ФормаКонтрагента = ПолучитьФорму("ФормаКонтрагента", ЭтаФорма);
		ФормаКонтрагента.ID = ТекДанные.user_id;
		ФормаКонтрагента.ОткрытьМодально();
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	ТекДокумент = ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	ТекПапка = ЭлементыФормы.ДеревоПапок.ТекущиеДанные;
	Если ТекПапка <> Неопределено Тогда
		НастройкаМенюДействия(ТекДокумент, ТекПапка);
	КонецЕсли;
КонецПроцедуры

Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура УстановитьЗаголовок()

	Результат1С = API.Account();
	
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	UserID = Результат1С["ati_id"];
	ПредставлениеАккаунта = Результат1С["name"];
	Заголовок = "Клиент АТИ-Доки (" + ПредставлениеАккаунта + ")";

КонецПроцедуры

Функция ЗаполнитьНастройки()
	
	ФормаПараметров = ПолучитьФорму("ФормаПараметров", ЭтаФорма);
	ФормаПараметровРезультат = ФормаПараметров.ОткрытьМодально();
	
	Если ФормаПараметровРезультат = Истина Тогда
		
		API.Соединение = Неопределено;
		
		СформироватьДеревоПапок();
		ЭлементыФормы.ДеревоПапок.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		//ОбновитьСписокПапок();
		
		//ПодключитьОбработчикОжидания("СтартовоеЗаполнение", 0.1, Истина);
		СтартовоеЗаполнение();
		
		Возврат Ложь;
		
	ИначеЕсли НЕ (ЗначениеЗаполнено(АдресСервера) И ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль)) Тогда
		
		Если Открыта() Тогда
			Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура СтартовоеЗаполнение()
	
	Если НЕ (ЗначениеЗаполнено(АдресСервера) И ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль)) Тогда
		ЗаполнитьНастройки();
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(token) Тогда

		Попытка
			token = API.GetToken(Логин, Пароль);
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(token) Тогда
		Попытка
			//ОбновитьДанныеАккаунта();
			ОбновитьСписокПапок();
			//ЗаполнитьДокументыТекущейПапки();
			ОбновитьСправочники();
			ОбновитьСертификаты();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(АдресСервера) И ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль) Тогда
			Сообщить("Некорректно заполнены параметры подключения к сервису");
		Иначе
			Сообщить("Не заполнены параметры подключения к сервису");
		КонецЕсли;
		//ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Параметры;
	КонецЕсли;
	
	УстановитьЗаголовок();
	
КонецПроцедуры

Процедура ЗаполнитьДокументы(Результат1С)
	
	СписокДокументов.Очистить();
	
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Документ Из Результат1С Цикл
		
		СтрДокумент = СписокДокументов.Добавить();
		СтрДокумент.Дата = СтрокаВДату(Документ.Получить("date"));
		СтрДокумент.Номер = СокрЛП(СтрЗаменить(Документ.Получить("number"), "№", ""));
		СтрДокумент.Описание = Документ.Получить("description");
		СтрДокумент.ТипДокумента = Документ.Получить("doctype");
		СтрДокумент.id = Документ.Получить("id");
		contragent = Документ.Получить("contragent");
		Если ЗначениеЗаполнено(contragent) Тогда
			Account = contragent.Получить("account");
			Если ТипЗнч(Account) = Тип("Соответствие") Тогда
				СтрДокумент.КонтрагентId = Account["id"];
				СтрДокумент.КонтрагентНаименование = Account.Получить("name")+" ("+Формат(Account.Получить("id"), "ЧГ=0")+")";
			КонецЕсли;
		КонецЕсли;
		СтрДокумент.Статус = Документ.Получить("status");
		СтрДокумент.ПравоПодписи = Документ.Получить("can_be_signed");
		СтрДокумент.Подписан = Документ.Получить("is_signed");
		СтрДокумент.Прочитан = Документ.Получить("is_opened");
		СтрДокумент.Отклонен = Документ.Получить("is_declined");
		СтрДокумент.Утвержден = Документ.Получить("is_approved");
		СтрДокумент.ТребуетРешения = Документ.Получить("is_waiting");
		СтрДокумент.ТребуетВнимания = Документ.Получить("is_need_attention");
		СтрДокумент.МожетБытьОтправлен = Документ.Получить("can_be_sent");
		СтрДокумент.ТипДокумента = Документ.Получить("doctype");
		СтрДокумент.Исходящий = (Документ.Получить("direction") = "outbox");
		
		СтрДокумент.Формализованный = Документ.Получить("is_formal");
		СтрДокумент.Черновик = Документ.Получить("is_draft");
		
		File = Документ.Получить("file");
		Если ТипЗнч(File)=Тип("Соответствие") Тогда
			СтрДокумент.ФайлID = File.Получить("id");
			СтрДокумент.ФайлИмя = File.Получить("name");
		КонецЕсли;
		//signers = Документ.Получить("signers");
		
		Подписанты = Документ["signers"];
		
		Если ЗначениеЗаполнено(СтрДокумент.ФайлID) Тогда
			
			СписокПодписей = Документ["file"]["signs"];
			
			Если СписокПодписей <> Неопределено Тогда
				
				Для Каждого Элемент Из СписокПодписей Цикл
					
					Подпись = Элемент.Ключ;
					ТекущийСертификат = Элемент.Значение["certificate"];
					
					Если Найти(Подпись, Формат(СтрДокумент.КонтрагентId, "ЧН='не заполнено'; ЧГ=0")) Тогда
						
						СтрДокумент.ПодписанКонтрагентом = Истина;
						СтрДокумент.ПодписанКонтрагентомСертификат = ТекущийСертификат["title"];
						
					ИначеЕсли Найти(Подпись, Формат(UserID, "ЧН='не заполнено'; ЧГ=0")) Тогда
						
						СтрДокумент.ПодписанСертификат = ТекущийСертификат["title"];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДокумент()
	
	ТекДанные = ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ФормаДокумента = ПолучитьФорму("ФормаДокумента", ЭтаФорма);
		ФормаДокумента.ТипыДокументов = ТипыДокументов;
		ЗаполнитьЗначенияСвойств(ФормаДокумента, ТекДанные);
		ФормаДокумента.id = "";
		ФормаДокумента.Подписан = Ложь;
		ФормаДокумента.МожетБытьОтправлен = Истина;
		ФормаДокумента.ПравоПодписи = Истина;
		ФормаДокумента.ФайлИмя = "";
		ФормаДокумента.ФайлId = "";
		НеобходимоОбновить = ФормаДокумента.ОткрытьМодально();
		
		Если НеобходимоОбновить <> Неопределено И НеобходимоОбновить Тогда
			ОбновитьСписокПапок();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДокумент(ТипДокумента = "")
	
	Если ТипыДокументов.Количество()=0 Тогда
		ОбновитьСправочники();
	КонецЕсли;
	
	Если ТипыДокументов.Найти("Заказ услуги по оформлению пропусков в г. Москва") = Неопределено Тогда
		СтрЗаявки = ТипыДокументов.Добавить();
		СтрЗаявки.Наименование = "Заказ услуги по оформлению пропусков в г. Москва";
	КонецЕсли;
	
	Если СценарноеТестирование Тогда
		ФормаДокумента = ПолучитьФорму("ФормаДокумента", ЭтаФорма, "СценарноеТестирование");
	Иначе
		ФормаДокумента = ПолучитьФорму("ФормаДокумента", ЭтаФорма);
	КонецЕсли;
	
	ФормаДокумента.ТипыДокументов = ТипыДокументов;
	ФормаДокумента.ТипДокумента = ТипДокумента;
	
	Если СценарноеТестирование Тогда
		ФормаДокумента.Открыть();
		ФлагОбновить = Ложь;
	Иначе	
		ФлагОбновить = ФормаДокумента.ОткрытьМодально();
	КонецЕсли;
	
	Если ФлагОбновить=Истина Тогда
		Результат1C = API.Documents(ТекущаяПапка, ЭлементыФормы.ДеревоПапок.ТекущиеДанные.Сдвиг, ДокументовНаСтранице);
		ЗаполнитьДокументы(Результат1C);
		СформироватьНадписьЛожнойКнопки();
	КонецЕсли;
	
КонецПроцедуры

// TO DO здесь отработать распознавание организации и добавить поле, где отображается
// сформированный документ
Функция ТребуетсяСформироватьДокумент1С(ВхДанные)
	
	Если НЕ ВхДанные.Исходящий И ВхДанные.ПодписанКонтрагентом Тогда
		
		Если НРег(ВхДанные.ТипДокумента = "акт") ИЛИ НРег(ВхДанные.ТипДокумента = "счет") ИЛИ НРег(ВхДанные.ТипДокумента = "счет-фактура") Тогда
			
			Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ВхДанные.ФайлИмя);
			Если ВРЕГ(Расширение) = "XML" Тогда
				
				ID = ПолучитьСтруктуруИдентификатора(ВхДанные.id).ID;
				
				Если (НРег(ВхДанные.ТипДокумента = "акт") И НЕ ЗначениеЗаполнено(НайтиДокументПоДокИД("ПоступлениеТоваровУслуг", ID))) ИЛИ
					 (НРег(ВхДанные.ТипДокумента = "счет") И НЕ ЗначениеЗаполнено(НайтиДокументПоДокИД("ПлатежноеПоручение", ID))) ИЛИ
					 (НРег(ВхДанные.ТипДокумента = "счет-фактура") И НЕ ЗначениеЗаполнено(НайтиДокументПоДокИД("СчетФактураПолученный", ID))) Тогда
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаВДату_Форма(ДатаСтрокой) Экспорт
	Возврат СтрокаВДату(ДатаСтрокой);
КонецФункции

//служебная функция для автотеста
Процедура ВыполнитьКоманду(ТекстКоманды) Экспорт
	Выполнить(ТекстКоманды);
КонецПроцедуры

	
API = ПолучитьФорму("API");
СтруктураСправочники = Новый Структура;
ТекущийСдвиг = 1;
ТекущаяПапка = "documents";
МВТ = Неопределено;

ЖирныйШрифт = Новый Шрифт(,, Истина);
ОбычныйШрифт = Новый Шрифт;
Курсив = Новый Шрифт(,,, Истина);
