{3,
{38,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{19,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0},0,"","",1,
{19,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,"",0,0,1,
{19,
{0},0,0,0,7,"LeftCaptionButtons",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"LeftCaptionButtonsExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
},1,
{19,
{0},0,0,0,7,"RightCaptionButtons",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{8,
{0},0,0,0,0,"RightCaptionButtonsExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0}
}
},"
Функция ПечатьАктаОбОказанииУслуг(ДокументСсылка) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если Ложь Тогда
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	ДанныеДляПечати = ДокументОбъект.ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг();
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка          = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьШапки  = ""ШапкаСКодом"";
		ОбластьСтроки = ""СтрокаСКодом"";
	Иначе
		ОбластьШапки  = ""ШапкаТаблицы"";
		ОбластьСтроки = ""Строка"";
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт"";
	Макет       = ДокументОбъект.ПолучитьМакет(""Акт"");

	ОбластьМакета = Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, ""Акт"");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(""Поставщик"");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, ""НаименованиеДляПечатныхФорм,"");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(""Покупатель"");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, ""НаименованиеДляПечатныхФорм,"");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ДанныеДляПечати.ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.Цена  = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТабличнаяЧасть <> Неопределено Тогда

		Сумма    = ТабличнаяЧасть.Итог(""Сумма"");
		СуммаНДС = ТабличнаяЧасть.Итог(""СуммаНДС"");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть(""Итого"");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть(""ИтогоНДС"");
		
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, ""В том числе НДС"", "" Сумма НДС"");
		Иначе
			ОбластьМакета.Параметры.ВсегоНДС = ""-"";
			ОбластьМакета.Параметры.НДС      = ""Без налога (НДС)"";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть(""СуммаПрописью"");
	ОбластьМакета.Параметры.ИтоговаяСтрока =""Всего оказано услуг "" + НомерСтроки
	                                       + "", на сумму "" + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(""Подписи"");
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации = """" + Шапка.ДолжностьРуководителя + "" "" + ПредставлениеПоставщика;
	
	ОбластьМакета.Параметры.ЗаместительПоПриказу = Шапка.ФИОРуководителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПечатьСФ(ДокументСсылка) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если НЕ ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		ОбщиеДанныеДляПечати = ДокументОбъект.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если УчетНДС.ПолучитьВерсиюПостановления(ДокументОбъект.Дата) = 1 Тогда
			ТабДокумент = ДокументОбъект.ПечатьСчетаФактуры(ОбщиеДанныеДляПечати);
		Иначе
			ТабДокумент = ДокументОбъект.ПечатьСчетаФактуры1137(ОбщиеДанныеДляПечати);
		КонецЕсли;	
		
	Иначе // Корректировочный счет-фактура
		
		ОбщиеДанныеДляПечати = ДокументОбъект.ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры();
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Если УчетНДС.ПолучитьВерсиюПостановления(ДокументОбъект.Дата) = 1 Тогда
				ТабДокумент = ДокументОбъект.ПечатьКорректировочногоСчетаФактуры(ОбщиеДанныеДляПечати);
			Иначе
				ТабДокумент = ДокументОбъект.ПечатьКорректировочногоСчетаФактуры1137(ОбщиеДанныеДляПечати);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ложь Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(ДокументСсылка, Тип = ""Счет"") Экспорт
	
	Перем ПодразделениеОтветственныхЛиц;
	
	СтруктурнаяЕдиница = ДокументСсылка.СтруктурнаяЕдиница;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ТекущийДокумент"", ДокументСсылка);
	Запрос.Текст =""
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Покупатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	ОрганизацияПолучатель КАК Получатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент"";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ"";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""ТекущийДокумент"", ДокументСсылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг(""ЗаказПокупателя"");
	
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|    1 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|	
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	"" + ЧастьЗапросаДляВыбораСодержанияУслуг + "",
	|	"" + ЧастьЗапросаДляВыбораСодержанияУслуг + "",
	|	ЗаказПокупателя.Номенклатура.Код КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|    2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|    ID,
	|	НомерСтроки"";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = Документы.СчетНаОплатуПокупателю.ПолучитьМакет(""СчетЗаказ"");

	// Выводим шапку накладной

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	Если Тип = ""Счет"" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть(""ЗаголовокСчета"");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИННПолучателя = СведенияОПолучателе.ИНН;
		ОбластьМакета.Параметры.КПППолучателя = СведенияОПолучателе.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип(""СправочникСсылка.БанковскиеСчета"") Тогда
	        Банк = ?(НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ВернутьРасчетныйСчет(СтруктурнаяЕдиница);

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + "" "" + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктурнаяЕдиница.ТекстКорреспондента) Тогда
			ТекстКорреспондента = СведенияОПолучателе.НаименованиеДляПечатныхФорм;
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов) Тогда
				ТекстКорреспондента = ТекстКорреспондента + "" р/с "" + СтруктурнаяЕдиница.НомерСчета
				+ "" в "" + СтруктурнаяЕдиница.Банк + "" "" + СтруктурнаяЕдиница.Банк.Город;
			КонецЕсли;	
		Иначе
			ТекстКорреспондента = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;		
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ТекстКорреспондента;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, ""Счет на оплату"");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(""Поставщик"");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации, ""НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,"");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть(""Покупатель"");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОПокупателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, ""НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,"");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = ""Артикул"";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = ""Код"";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть(""ШапкаТаблицы|НомерСтроки"");
	ОбластьКодов  = Макет.ПолучитьОбласть(""ШапкаТаблицы|КолонкаКодов"");
	ОбластьДанных = Макет.ПолучитьОбласть(""ШапкаТаблицы|Данные"");
	ОбластьСуммы  = Макет.ПолучитьОбласть(""ШапкаТаблицы|Сумма"");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область(""Товар"");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область(""КолонкаКодов"").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть(""Строка|НомерСтроки"");
	ОбластьКодов  = Макет.ПолучитьОбласть(""Строка|КолонкаКодов"");
	ОбластьДанных = Макет.ПолучитьОбласть(""Строка|Данные"");
	ОбластьСуммы  = Макет.ПолучитьОбласть(""Строка|Сумма"");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = ""Артикул"" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть(""Итого|НомерСтроки"");
	ОбластьКодов  = Макет.ПолучитьОбласть(""Итого|КолонкаКодов"");
	ОбластьДанных = Макет.ПолучитьОбласть(""Итого|Данные"");
	ОбластьСуммы  = Макет.ПолучитьОбласть(""Итого|Сумма"");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	ОбластьНомера = Макет.ПолучитьОбласть(""ИтогоНДС|НомерСтроки"");
	ОбластьКодов  = Макет.ПолучитьОбласть(""ИтогоНДС|КолонкаКодов"");
	ОбластьДанных = Макет.ПолучитьОбласть(""ИтогоНДС|Данные"");
	ОбластьСуммы  = Макет.ПолучитьОбласть(""ИтогоНДС|Сумма"");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если СуммаНДС <> 0 Тогда
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, ""В том числе НДС:"", ""Сумма НДС:"");
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		ОбластьДанных.Параметры.НДС = ""Без налога (НДС)"";
		ОбластьСуммы.Параметры.ВсегоНДС = ""-"";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоКОплате
	ОбластьНомера = Макет.ПолучитьОбласть(""ИтогоКОплате|НомерСтроки"");
	ОбластьКодов = Макет.ПолучитьОбласть(""ИтогоКОплате|КолонкаКодов"");
	ОбластьДанных = Макет.ПолучитьОбласть(""ИтогоКОплате|Данные"");
	ОбластьСуммы  = Макет.ПолучитьОбласть(""ИтогоКОплате|Сумма"");
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	СуммаКОплате = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьСуммы.Параметры.ИтогоКОплате = ОбщегоНазначения.ФорматСумм(СуммаКОплате);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть(""СуммаПрописью"");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока =""Всего наименований "" + ЗапросТовары.Количество()
	+ "", на сумму "" + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = ""Счет"" Тогда
		
		Если Шапка.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(""ПодвалСчета"");
			
			Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.Дата, ПодразделениеОтветственныхЛиц);
			Руководитель = Руководители.РуководительПредставление;
			Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
			
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
			ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть(""ПодвалСчетаПредприниматель"");
			
			ФЛ = Шапка.Получатель.ИндивидуальныйПредприниматель;
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДокументСсылка.Дата, Новый Структура(""ФизЛицо"",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Предприниматель = СокрЛП(ДанныеФЛ[0].Фамилия) + "" "" + Лев(СокрЛП(ДанныеФЛ[0].Имя),1) + "". "" + Лев(СокрЛП(ДанныеФЛ[0].Отчество),1) + ""."";
			Иначе
				Предприниматель = """";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ФИОПредпринимателя = Предприниматель;
			
		КонецЕсли;
		
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть(""ПодвалЗаказа"");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",4027d0db-e0e5-47b0-81ab-be627fdaa4c2}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}